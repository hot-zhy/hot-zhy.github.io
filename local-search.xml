<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>GeoQA代码分析以及论文解读-以题目为例</title>
    <link href="/2023/07/16/7.16-code-analysis-about-geoqa/"/>
    <url>/2023/07/16/7.16-code-analysis-about-geoqa/</url>
    
    <content type="html"><![CDATA[<h1 id="GeoQA代码分析"><a href="#GeoQA代码分析" class="headerlink" title="GeoQA代码分析"></a>GeoQA代码分析</h1><img src="/images/7.16-code-analysis-about-geoqa/image-20230716163910084.png" alt="image-20230716163910084" style="zoom:80%;" /><p>——以具体题目为例</p><h4 id="原题目："><a href="#原题目：" class="headerlink" title="原题目："></a>原题目：</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <br> <span class="hljs-attr">&quot;subject&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;如图,在△ABC中,已知∠A=80°,∠B=60°,DE∥BC,那么∠CED的大小是()&quot;</span><span class="hljs-punctuation">,</span> <br> <span class="hljs-attr">&quot;choices&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;40°&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;60°&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;120°&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;140°&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br> <span class="hljs-attr">&quot;label&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span> <br> <span class="hljs-attr">&quot;formal_point&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;对顶角&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;三角形内角和&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;邻补角&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br> <span class="hljs-attr">&quot;answer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;∵∠A+∠B+∠C=180°(三角形内角和定理),∠A=80°,∠B=60°,∴∠C=180°-∠A-∠B=180°-80°-60°=40°,又∵DE//BC,∴∠CED+∠C=180°(两直线平行,同旁内角互补).∴∠CED=180°-40°=140°.故选D.&quot;</span><span class="hljs-punctuation">,</span> <br> <span class="hljs-attr">&quot;comment&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><img src="/images/7.16-code-analysis-about-geoqa/image-20230715095937359.png" alt="image-20230715095937359"></p><h4 id="代码从数据集中读取的原始数据-pickle"><a href="#代码从数据集中读取的原始数据-pickle" class="headerlink" title="代码从数据集中读取的原始数据(pickle)"></a>代码从数据集中读取的原始数据(pickle)</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    &#x27;token_list&#x27;<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>&#x27;如&#x27;<span class="hljs-punctuation">,</span> &#x27;图&#x27;<span class="hljs-punctuation">,</span> &#x27;<span class="hljs-punctuation">,</span>&#x27;<span class="hljs-punctuation">,</span> &#x27;在&#x27;<span class="hljs-punctuation">,</span> &#x27;△&#x27;<span class="hljs-punctuation">,</span> &#x27;A&#x27;<span class="hljs-punctuation">,</span> &#x27;B&#x27;<span class="hljs-punctuation">,</span> &#x27;C&#x27;<span class="hljs-punctuation">,</span> &#x27;中&#x27;<span class="hljs-punctuation">,</span> &#x27;<span class="hljs-punctuation">,</span>&#x27;<span class="hljs-punctuation">,</span> &#x27;已&#x27;<span class="hljs-punctuation">,</span> &#x27;知&#x27;<span class="hljs-punctuation">,</span> &#x27;∠&#x27;<span class="hljs-punctuation">,</span> &#x27;A&#x27;<span class="hljs-punctuation">,</span> &#x27;=&#x27;<span class="hljs-punctuation">,</span> &#x27;N_0&#x27;<span class="hljs-punctuation">,</span> &#x27;°&#x27;<span class="hljs-punctuation">,</span> &#x27;<span class="hljs-punctuation">,</span>&#x27;<span class="hljs-punctuation">,</span> &#x27;∠&#x27;<span class="hljs-punctuation">,</span> &#x27;B&#x27;<span class="hljs-punctuation">,</span> &#x27;=&#x27;<span class="hljs-punctuation">,</span> &#x27;N_1&#x27;<span class="hljs-punctuation">,</span> &#x27;°&#x27;<span class="hljs-punctuation">,</span> &#x27;<span class="hljs-punctuation">,</span>&#x27;<span class="hljs-punctuation">,</span> &#x27;D&#x27;<span class="hljs-punctuation">,</span> &#x27;E&#x27;<span class="hljs-punctuation">,</span> &#x27;∥&#x27;<span class="hljs-punctuation">,</span> &#x27;B&#x27;<span class="hljs-punctuation">,</span> &#x27;C&#x27;<span class="hljs-punctuation">,</span> &#x27;<span class="hljs-punctuation">,</span>&#x27;<span class="hljs-punctuation">,</span> &#x27;那&#x27;<span class="hljs-punctuation">,</span> &#x27;么&#x27;<span class="hljs-punctuation">,</span> &#x27;∠&#x27;<span class="hljs-punctuation">,</span> &#x27;C&#x27;<span class="hljs-punctuation">,</span> &#x27;E&#x27;<span class="hljs-punctuation">,</span> &#x27;D&#x27;<span class="hljs-punctuation">,</span> &#x27;的&#x27;<span class="hljs-punctuation">,</span> &#x27;大&#x27;<span class="hljs-punctuation">,</span> &#x27;小&#x27;<span class="hljs-punctuation">,</span> &#x27;是&#x27;<span class="hljs-punctuation">,</span> &#x27;(&#x27;<span class="hljs-punctuation">,</span> &#x27;)&#x27;<span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> <br>    &#x27;subject&#x27;<span class="hljs-punctuation">:</span> &#x27;如图<span class="hljs-punctuation">,</span>在△ABC中<span class="hljs-punctuation">,</span>已知∠A=<span class="hljs-number">80</span>°<span class="hljs-punctuation">,</span>∠B=<span class="hljs-number">60</span>°<span class="hljs-punctuation">,</span>DE∥BC<span class="hljs-punctuation">,</span>那么∠CED的大小是()&#x27;<span class="hljs-punctuation">,</span> <br>    &#x27;choices&#x27;<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>&#x27;<span class="hljs-number">40</span>°&#x27;<span class="hljs-punctuation">,</span> &#x27;<span class="hljs-number">60</span>°&#x27;<span class="hljs-punctuation">,</span> &#x27;<span class="hljs-number">120</span>°&#x27;<span class="hljs-punctuation">,</span> &#x27;<span class="hljs-number">140</span>°&#x27;<span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> <br>    &#x27;numbers&#x27;<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-number">80.0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">60.0</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> <br>    &#x27;choice_nums&#x27;<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-number">40.0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">60.0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">120.0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">140.0</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    &#x27;image&#x27;<span class="hljs-punctuation">:</span> array(<span class="hljs-punctuation">[</span><span class="hljs-punctuation">[</span><span class="hljs-number">255</span><span class="hljs-punctuation">,</span> <span class="hljs-number">255</span><span class="hljs-punctuation">,</span> <span class="hljs-number">255</span><span class="hljs-punctuation">,</span> ...<span class="hljs-punctuation">,</span> <span class="hljs-number">255</span><span class="hljs-punctuation">,</span> <span class="hljs-number">255</span><span class="hljs-punctuation">,</span> <span class="hljs-number">255</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>       <span class="hljs-punctuation">[</span><span class="hljs-number">255</span><span class="hljs-punctuation">,</span> <span class="hljs-number">255</span><span class="hljs-punctuation">,</span> <span class="hljs-number">255</span><span class="hljs-punctuation">,</span> ...<span class="hljs-punctuation">,</span> <span class="hljs-number">255</span><span class="hljs-punctuation">,</span> <span class="hljs-number">255</span><span class="hljs-punctuation">,</span> <span class="hljs-number">255</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>       <span class="hljs-punctuation">[</span><span class="hljs-number">255</span><span class="hljs-punctuation">,</span> <span class="hljs-number">255</span><span class="hljs-punctuation">,</span> <span class="hljs-number">255</span><span class="hljs-punctuation">,</span> ...<span class="hljs-punctuation">,</span> <span class="hljs-number">255</span><span class="hljs-punctuation">,</span> <span class="hljs-number">255</span><span class="hljs-punctuation">,</span> <span class="hljs-number">255</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>       ...<span class="hljs-punctuation">,</span><br>       <span class="hljs-punctuation">[</span><span class="hljs-number">255</span><span class="hljs-punctuation">,</span> <span class="hljs-number">255</span><span class="hljs-punctuation">,</span> <span class="hljs-number">160</span><span class="hljs-punctuation">,</span> ...<span class="hljs-punctuation">,</span> <span class="hljs-number">227</span><span class="hljs-punctuation">,</span> <span class="hljs-number">182</span><span class="hljs-punctuation">,</span> <span class="hljs-number">255</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>       <span class="hljs-punctuation">[</span><span class="hljs-number">255</span><span class="hljs-punctuation">,</span> <span class="hljs-number">255</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">89</span><span class="hljs-punctuation">,</span> ...<span class="hljs-punctuation">,</span>  <span class="hljs-number">72</span><span class="hljs-punctuation">,</span> <span class="hljs-number">255</span><span class="hljs-punctuation">,</span> <span class="hljs-number">255</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>       <span class="hljs-punctuation">[</span><span class="hljs-number">193</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">0</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> ...<span class="hljs-punctuation">,</span> <span class="hljs-number">255</span><span class="hljs-punctuation">,</span> <span class="hljs-number">255</span><span class="hljs-punctuation">,</span> <span class="hljs-number">255</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> dtype=uint8)<span class="hljs-punctuation">,</span> <br>    &#x27;label&#x27;<span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span> <br>    &#x27;answer&#x27;<span class="hljs-punctuation">:</span> &#x27;∵∠A+∠B+∠C=<span class="hljs-number">180</span>°(三角形内角和定理)<span class="hljs-punctuation">,</span>∠A=<span class="hljs-number">80</span>°<span class="hljs-punctuation">,</span>∠B=<span class="hljs-number">60</span>°<span class="hljs-punctuation">,</span>∴∠C=<span class="hljs-number">180</span>°-∠A-∠B=<span class="hljs-number">180</span>°<span class="hljs-number">-80</span>°<span class="hljs-number">-60</span>°=<span class="hljs-number">40</span>°<span class="hljs-punctuation">,</span>又∵DE<span class="hljs-comment">//BC,∴∠CED+∠C=180°(两直线平行,同旁内角互补).∴∠CED=180°-40°=140°.故选D.&#x27;,</span><br>    &#x27;formal_point&#x27;<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span>&#x27;邻补角&#x27;<span class="hljs-punctuation">,</span> &#x27;三角形内角和&#x27;<span class="hljs-punctuation">,</span> &#x27;对顶角&#x27;<span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    &#x27;target_number&#x27;<span class="hljs-punctuation">:</span> <span class="hljs-number">140.0</span><span class="hljs-punctuation">,</span><br>    &#x27;id&#x27;<span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <br>    &#x27;manual_program&#x27;<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>&#x27;g_minus&#x27;<span class="hljs-punctuation">,</span> &#x27;C_3&#x27;<span class="hljs-punctuation">,</span> &#x27;N_0&#x27;<span class="hljs-punctuation">,</span> &#x27;g_minus&#x27;<span class="hljs-punctuation">,</span> &#x27;V_0&#x27;<span class="hljs-punctuation">,</span> &#x27;N_1&#x27;<span class="hljs-punctuation">,</span> &#x27;g_minus&#x27;<span class="hljs-punctuation">,</span> &#x27;C_3&#x27;<span class="hljs-punctuation">,</span> &#x27;V_1&#x27;<span class="hljs-punctuation">]</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="文本处理过程"><a href="#文本处理过程" class="headerlink" title="文本处理过程"></a>文本处理过程</h2><p><img src="/images/7.16-code-analysis-about-geoqa/image-20230716142814332.png" alt="image-20230716142814332"></p><p>在forward函数中调用_encode函数:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">state = self._encode(source_tokens)<br></code></pre></td></tr></table></figure><h3 id="encode的过程如下，即-encode的执行流程"><a href="#encode的过程如下，即-encode的执行流程" class="headerlink" title="encode的过程如下，即_encode的执行流程"></a>encode的过程如下，即_encode的执行流程</h3><h4 id="将source-tokens中的string通过Vocabulary类映射到整数编码上"><a href="#将source-tokens中的string通过Vocabulary类映射到整数编码上" class="headerlink" title="将source_tokens中的string通过Vocabulary类映射到整数编码上:"></a>将source_tokens中的string通过Vocabulary类映射到整数编码上:</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">vocab: Vocabulary<br><span class="hljs-built_in">super</span>(SimpleSeq2Seq, self).__init__(vocab)<br>//Vocabulary类可以实现从index到token以及token到index的转换<br>self._token_to_index = _TokenToIndexDefaultDict(self._non_padded_namespaces,<br>                                                        self._padding_token,<br>                                                        self._oov_token)<br>self._index_to_token = _IndexToTokenDefaultDict(self._non_padded_namespaces,<br>                                                self._padding_token,<br>                                                self._oov_token)<br></code></pre></td></tr></table></figure><h4 id="映射后的整数编码："><a href="#映射后的整数编码：" class="headerlink" title="映射后的整数编码："></a>映射后的整数编码：</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span>&#x27;tokens&#x27;<span class="hljs-punctuation">:</span> tensor(<span class="hljs-punctuation">[</span><span class="hljs-punctuation">[</span> <span class="hljs-number">19</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">20</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">2</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">4</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">5</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">66</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">6</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">10</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">2</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">13</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">4</span><span class="hljs-punctuation">,</span> <span class="hljs-number">123</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">24</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">12</span><span class="hljs-punctuation">,</span><br>           <span class="hljs-number">3</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">25</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">2</span><span class="hljs-punctuation">,</span> <span class="hljs-number">183</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">86</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">65</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">54</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">13</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">24</span><span class="hljs-punctuation">,</span> <span class="hljs-number">183</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">10</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">2</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">23</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">13</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-number">86</span><span class="hljs-punctuation">,</span> <span class="hljs-number">183</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">10</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">9</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">36</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">47</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">26</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">18</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">17</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">0</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">0</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">0</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">0</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>           <span class="hljs-number">0</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">0</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">0</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">0</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">0</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">0</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">0</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">0</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">0</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">0</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">0</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">0</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">0</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>           <span class="hljs-number">0</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">0</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">0</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">[</span> <span class="hljs-number">72</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">71</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">4</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">5</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">35</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">6</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">10</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">26</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">30</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">16</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">9</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">82</span><span class="hljs-punctuation">,</span> <span class="hljs-number">137</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">41</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-number">51</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">2</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">13</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">4</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">5</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">6</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">12</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">3</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">25</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">2</span><span class="hljs-punctuation">,</span> <span class="hljs-number">108</span><span class="hljs-punctuation">,</span> <span class="hljs-number">109</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">13</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">5</span><span class="hljs-punctuation">,</span><br>           <span class="hljs-number">4</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">10</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">12</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">18</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">17</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">0</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">0</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">0</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">0</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">0</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">0</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">0</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">0</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>           <span class="hljs-number">0</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">0</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">0</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">0</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">0</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">0</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">0</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">0</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">0</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">0</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">0</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">0</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">0</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>           <span class="hljs-number">0</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">0</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">0</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">[</span> <span class="hljs-number">19</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">20</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">2</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">4</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">5</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">22</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">30</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">16</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">9</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">41</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">51</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">2</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">21</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">6</span><span class="hljs-punctuation">,</span><br>           <span class="hljs-number">2</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">10</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">34</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">30</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">16</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">40</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">75</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">44</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">13</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">4</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">16</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">10</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">12</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">3</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-number">25</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">2</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">23</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">13</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">5</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">6</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">10</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">68</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">31</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">18</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">17</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">0</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">0</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>           <span class="hljs-number">0</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">0</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">0</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">0</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">0</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">0</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">0</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">0</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">0</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">0</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">0</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">0</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">0</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>           <span class="hljs-number">0</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">0</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">0</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">[</span> <span class="hljs-number">72</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">71</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">42</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">4</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">5</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">6</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">37</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">2</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">4</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">10</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">66</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">5</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">6</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>           <span class="hljs-number">6</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">10</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">55</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">4</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">5</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">31</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">24</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">2</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">24</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">46</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">66</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">5</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">6</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>           <span class="hljs-number">4</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">24</span><span class="hljs-punctuation">,</span> <span class="hljs-number">102</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">24</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">5</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">12</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">3</span><span class="hljs-punctuation">,</span> <span class="hljs-number">102</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">11</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">2</span><span class="hljs-punctuation">,</span> <span class="hljs-number">193</span><span class="hljs-punctuation">,</span> <span class="hljs-number">133</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">42</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">4</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-number">10</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">24</span><span class="hljs-punctuation">,</span> <span class="hljs-number">133</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">12</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">27</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">2</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">23</span><span class="hljs-punctuation">,</span> <span class="hljs-number">193</span><span class="hljs-punctuation">,</span> <span class="hljs-number">133</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">42</span><span class="hljs-punctuation">,</span>   <span class="hljs-number">4</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">24</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">46</span><span class="hljs-punctuation">,</span> <span class="hljs-number">133</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-number">12</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">18</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">17</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> device=&#x27;cuda<span class="hljs-punctuation">:</span><span class="hljs-number">0</span>&#x27;)<span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="Dense-embedding-of-source-vocab-tokens-对源语言词汇表中的每个词汇（token）进行密集嵌入（dense-embedding）"><a href="#Dense-embedding-of-source-vocab-tokens-对源语言词汇表中的每个词汇（token）进行密集嵌入（dense-embedding）" class="headerlink" title="Dense embedding of source vocab tokens(对源语言词汇表中的每个词汇（token）进行密集嵌入（dense embedding）)"></a><strong>Dense embedding of source vocab tokens(对源语言词汇表中的每个词汇（token）进行密集嵌入（dense embedding）)</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">embedded_input = self._source_embedder(source_tokens)<br></code></pre></td></tr></table></figure><p>将源语言的文本数据转换为<strong>连续、密集的实数向量</strong>，从而方便模型学习文本数据的表示和语义信息，从而提高模型在自然语言处理任务中的性能。</p><h4 id="经过密集嵌入后的文本表示"><a href="#经过密集嵌入后的文本表示" class="headerlink" title="经过密集嵌入后的文本表示"></a>经过密集嵌入后的文本表示</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs json">tensor(<span class="hljs-punctuation">[</span><span class="hljs-punctuation">[</span><span class="hljs-punctuation">[</span> <span class="hljs-number">0.0531</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0503</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0213</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0139</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0104</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0440</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-punctuation">[</span> <span class="hljs-number">0.0464</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0214</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0172</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0282</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0524</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0017</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-punctuation">[</span> <span class="hljs-number">0.0620</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0129</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0032</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0518</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0445</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0315</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>         ...<span class="hljs-punctuation">,</span><br>         <span class="hljs-punctuation">[</span><span class="hljs-number">-0.0134</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0460</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0388</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0557</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0300</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0514</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-punctuation">[</span><span class="hljs-number">-0.0134</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0460</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0388</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0557</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0300</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0514</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-punctuation">[</span><span class="hljs-number">-0.0134</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0460</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0388</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0557</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0300</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0514</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br><br>        <span class="hljs-punctuation">[</span><span class="hljs-punctuation">[</span><span class="hljs-number">-0.0283</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0190</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0054</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0058</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0033</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0592</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-punctuation">[</span> <span class="hljs-number">0.0108</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0488</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0222</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0404</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0484</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0522</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-punctuation">[</span><span class="hljs-number">-0.0197</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0025</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0153</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0335</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0397</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0521</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>         ...<span class="hljs-punctuation">,</span><br>         <span class="hljs-punctuation">[</span><span class="hljs-number">-0.0134</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0460</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0388</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0557</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0300</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0514</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-punctuation">[</span><span class="hljs-number">-0.0134</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0460</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0388</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0557</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0300</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0514</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-punctuation">[</span><span class="hljs-number">-0.0134</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0460</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0388</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0557</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0300</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0514</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br><br>        <span class="hljs-punctuation">[</span><span class="hljs-punctuation">[</span> <span class="hljs-number">0.0531</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0503</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0213</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0139</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0104</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0440</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-punctuation">[</span> <span class="hljs-number">0.0464</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0214</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0172</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0282</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0524</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0017</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-punctuation">[</span> <span class="hljs-number">0.0620</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0129</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0032</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0518</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0445</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0315</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>         ...<span class="hljs-punctuation">,</span><br>         <span class="hljs-punctuation">[</span><span class="hljs-number">-0.0134</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0460</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0388</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0557</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0300</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0514</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-punctuation">[</span><span class="hljs-number">-0.0134</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0460</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0388</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0557</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0300</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0514</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-punctuation">[</span><span class="hljs-number">-0.0134</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0460</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0388</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0557</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0300</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0514</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br><br>        <span class="hljs-punctuation">[</span><span class="hljs-punctuation">[</span><span class="hljs-number">-0.0283</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0190</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0054</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0058</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0033</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0592</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-punctuation">[</span> <span class="hljs-number">0.0108</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0488</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0222</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0404</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0484</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0522</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-punctuation">[</span> <span class="hljs-number">0.0065</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0099</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0264</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0481</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0185</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0319</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>         ...<span class="hljs-punctuation">,</span><br>         <span class="hljs-punctuation">[</span><span class="hljs-number">-0.0316</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0120</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0048</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0444</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0203</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0102</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-punctuation">[</span><span class="hljs-number">-0.0606</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0007</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0137</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0086</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0351</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0533</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-punctuation">[</span><span class="hljs-number">-0.0183</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0066</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0517</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0461</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0141</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0274</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>       device=&#x27;cuda<span class="hljs-punctuation">:</span><span class="hljs-number">0</span>&#x27;<span class="hljs-punctuation">,</span> grad_fn=&lt;CatBackward0&gt;)<br></code></pre></td></tr></table></figure><h5 id="为什么要进行嵌入操作？"><a href="#为什么要进行嵌入操作？" class="headerlink" title="为什么要进行嵌入操作？"></a>为什么要进行嵌入操作？</h5><p>将输入的整数索引转换为词嵌入向量的过程是将<strong>离散的单词</strong>表示（整数索引）映射到<strong>连续的向量空间</strong>的过程，泽众映射叫做 **词嵌入(Word Embedding)**。</p><p>将单词表示为<strong>连续的向量表示</strong>，有助于捕捉单词之间的语义关系和相似性，在连续向量空间中，具有相似语义的单词在空间中更接近，从而有助于提高模型在语义理解任务中的表现，更好地捕捉单词之间的语义关系和上下文信息。</p><p>例如，当<code>source_tokens</code>包含以下内容时:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">source_tokens = &#123;<br>    <span class="hljs-string">&#x27;tokens&#x27;</span>: torch.tensor([[<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">6</span>, <span class="hljs-number">1</span>]])<br>&#125;<br></code></pre></td></tr></table></figure><p>假设这里有一个简单的词汇表，其中包含7个单词：[‘<pad>‘, ‘I’, ‘love’, ‘to’, ‘eat’, ‘pizza’, ‘and’]，并且这些单词在词汇表中的索引为：</p><p>在这个例子中，<code>source_tokens</code> 是一个字典，其中 <code>&#39;tokens&#39;</code> 键对应的值是一个形状为 (2, 4) 的张量（二维数组），表示两个输入样本，每个样本有4个单词。</p><p>当执行 <code>embedded_input = self._source_embedder(source_tokens)</code> 时，<code>self._source_embedder</code> 将会把 <code>source_tokens</code> 中的整数索引转换为对应的词嵌入向量，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">词嵌入表：<br>[<br>    [<span class="hljs-number">0.1</span>, <span class="hljs-number">0.2</span>, <span class="hljs-number">0.3</span>, <span class="hljs-number">0.4</span>, <span class="hljs-number">0.5</span>, <span class="hljs-number">0.6</span>, <span class="hljs-number">0.7</span>],  <span class="hljs-comment"># 表示 &#x27;&lt;pad&gt;&#x27;</span><br>    [<span class="hljs-number">0.9</span>, <span class="hljs-number">0.8</span>, <span class="hljs-number">0.7</span>, <span class="hljs-number">0.6</span>, <span class="hljs-number">0.5</span>, <span class="hljs-number">0.4</span>, <span class="hljs-number">0.3</span>],  <span class="hljs-comment"># 表示 &#x27;I&#x27;</span><br>    [<span class="hljs-number">0.2</span>, <span class="hljs-number">0.3</span>, <span class="hljs-number">0.4</span>, <span class="hljs-number">0.5</span>, <span class="hljs-number">0.6</span>, <span class="hljs-number">0.7</span>, <span class="hljs-number">0.8</span>],  <span class="hljs-comment"># 表示 &#x27;love&#x27;</span><br>    [<span class="hljs-number">0.3</span>, <span class="hljs-number">0.4</span>, <span class="hljs-number">0.5</span>, <span class="hljs-number">0.6</span>, <span class="hljs-number">0.7</span>, <span class="hljs-number">0.8</span>, <span class="hljs-number">0.9</span>],  <span class="hljs-comment"># 表示 &#x27;to&#x27;</span><br>    [<span class="hljs-number">0.4</span>, <span class="hljs-number">0.5</span>, <span class="hljs-number">0.6</span>, <span class="hljs-number">0.7</span>, <span class="hljs-number">0.8</span>, <span class="hljs-number">0.9</span>, <span class="hljs-number">0.1</span>],  <span class="hljs-comment"># 表示 &#x27;eat&#x27;</span><br>    [<span class="hljs-number">0.5</span>, <span class="hljs-number">0.6</span>, <span class="hljs-number">0.7</span>, <span class="hljs-number">0.8</span>, <span class="hljs-number">0.9</span>, <span class="hljs-number">0.1</span>, <span class="hljs-number">0.2</span>],  <span class="hljs-comment"># 表示 &#x27;pizza&#x27;</span><br>    [<span class="hljs-number">0.6</span>, <span class="hljs-number">0.7</span>, <span class="hljs-number">0.8</span>, <span class="hljs-number">0.9</span>, <span class="hljs-number">0.1</span>, <span class="hljs-number">0.2</span>, <span class="hljs-number">0.3</span>],  <span class="hljs-comment"># 表示 &#x27;and&#x27;</span><br>]<br></code></pre></td></tr></table></figure><p>那么 <code>embedded_input</code> 将会得到一个形状为 (2, 4, embedding_dim) 的张量，其中 <code>embedding_dim</code> 是词嵌入的维度。例如，假设 <code>embedding_dim</code> 是 7，则结果可能为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">embedded_input = torch.tensor([<br>    [<br>        [<span class="hljs-number">0.9</span>, <span class="hljs-number">0.8</span>, <span class="hljs-number">0.7</span>, <span class="hljs-number">0.6</span>, <span class="hljs-number">0.5</span>, <span class="hljs-number">0.4</span>, <span class="hljs-number">0.3</span>],  <span class="hljs-comment"># &#x27;I&#x27;</span><br>        [<span class="hljs-number">0.3</span>, <span class="hljs-number">0.4</span>, <span class="hljs-number">0.5</span>, <span class="hljs-number">0.6</span>, <span class="hljs-number">0.7</span>, <span class="hljs-number">0.8</span>, <span class="hljs-number">0.9</span>],  <span class="hljs-comment"># &#x27;to&#x27;</span><br>        [<span class="hljs-number">0.2</span>, <span class="hljs-number">0.3</span>, <span class="hljs-number">0.4</span>, <span class="hljs-number">0.5</span>, <span class="hljs-number">0.6</span>, <span class="hljs-number">0.7</span>, <span class="hljs-number">0.8</span>],  <span class="hljs-comment"># &#x27;love&#x27;</span><br>        [<span class="hljs-number">0.5</span>, <span class="hljs-number">0.6</span>, <span class="hljs-number">0.7</span>, <span class="hljs-number">0.8</span>, <span class="hljs-number">0.9</span>, <span class="hljs-number">0.1</span>, <span class="hljs-number">0.2</span>],  <span class="hljs-comment"># &#x27;pizza&#x27;</span><br>    ],<br>    [<br>        [<span class="hljs-number">0.4</span>, <span class="hljs-number">0.5</span>, <span class="hljs-number">0.6</span>, <span class="hljs-number">0.7</span>, <span class="hljs-number">0.8</span>, <span class="hljs-number">0.9</span>, <span class="hljs-number">0.1</span>],  <span class="hljs-comment"># &#x27;eat&#x27;</span><br>        [<span class="hljs-number">0.2</span>, <span class="hljs-number">0.3</span>, <span class="hljs-number">0.4</span>, <span class="hljs-number">0.5</span>, <span class="hljs-number">0.6</span>, <span class="hljs-number">0.7</span>, <span class="hljs-number">0.8</span>],  <span class="hljs-comment"># &#x27;love&#x27;</span><br>        [<span class="hljs-number">0.6</span>, <span class="hljs-number">0.7</span>, <span class="hljs-number">0.8</span>, <span class="hljs-number">0.9</span>, <span class="hljs-number">0.1</span>, <span class="hljs-number">0.2</span>, <span class="hljs-number">0.3</span>],  <span class="hljs-comment"># &#x27;and&#x27;</span><br>        [<span class="hljs-number">0.9</span>, <span class="hljs-number">0.8</span>, <span class="hljs-number">0.7</span>, <span class="hljs-number">0.6</span>, <span class="hljs-number">0.5</span>, <span class="hljs-number">0.4</span>, <span class="hljs-number">0.3</span>],  <span class="hljs-comment"># &#x27;I&#x27;</span><br>    ]<br>])<br></code></pre></td></tr></table></figure><p>这样，我们就得到了将 <code>source_tokens</code> 中的整数索引转换为词嵌入向量后的表示 <code>embedded_input</code>。这些词嵌入向量将被用于后续的深度学习模型处理。词嵌入向量中的每个值并不是随机的，而是通过模型训练过程学习得到的，以表达单词之间的语义关系。</p><h4 id="获取文本掩码"><a href="#获取文本掩码" class="headerlink" title="获取文本掩码"></a>获取文本掩码</h4><h5 id="为什么要用掩码？"><a href="#为什么要用掩码？" class="headerlink" title="为什么要用掩码？"></a>为什么要用掩码？</h5><p>输入的文本序列的<strong>长度可能不一致</strong>，但在深度学习模型中，通常需要将输入序列统一成<strong>相同长度</strong>的张量进行计算。</p><p>掩码是一个与输入序列长度相同的张量，其中元素的值为0或1。它的作用是指示哪些位置是真实的单词（非填充部分），哪些位置是填充部分。这样的话，可以将填充部分的计算过程忽略，从而<strong>避免填充部分对模型的计算结果产生影响</strong>。</p><ul><li>对于真实的单词位置，掩码的值为1，表示这些位置包含<strong>有效</strong>的单词。</li><li>对于填充的部分，掩码的值为0，表示这些位置是由于为了统一序列长度而添加的<strong>填充（padding）</strong>单词。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">source_mask = util.get_text_field_mask(source_tokens)<br></code></pre></td></tr></table></figure><h5 id="进行掩码处理后的数据"><a href="#进行掩码处理后的数据" class="headerlink" title="进行掩码处理后的数据:"></a>进行掩码处理后的数据:</h5><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs json">tensor(<span class="hljs-punctuation">[</span><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> device=&#x27;cuda<span class="hljs-punctuation">:</span><span class="hljs-number">0</span>&#x27;)<br></code></pre></td></tr></table></figure><p>对应位置为<strong>1表示该位置是真实的文本数据</strong>，为<strong>0表示该位置是填充数据</strong>，这样在处理文本数据时，就可以根据掩码忽略填充部分，只关注真实的文本内容</p><h4 id="获取图像掩码"><a href="#获取图像掩码" class="headerlink" title="获取图像掩码"></a>获取图像掩码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># source mask are used in attention</span><br>img_mask = torch.ones(source_mask.shape[<span class="hljs-number">0</span>], <span class="hljs-number">196</span>).long().cuda()<br></code></pre></td></tr></table></figure><h4 id="将图像掩码（img-mask）和文本掩码（source-mask）拼接在一起"><a href="#将图像掩码（img-mask）和文本掩码（source-mask）拼接在一起" class="headerlink" title="将图像掩码（img_mask）和文本掩码（source_mask）拼接在一起"></a>将图像掩码（img_mask）和文本掩码（source_mask）拼接在一起</h4><p>将图像特征和文本特征合并成一个综合的特征表示，以便在后续的任务中同时使用图像和文本的信息：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">concat_mask = torch.cat([img_mask, source_mask], <span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>将图像掩码（img_mask）和文本掩码（source_mask）拼接在一起，形成<code>concat_mask</code>，用于在后续计算中，将文本和图像的掩码信息合并使用。</p><h4 id="文本encode的输出-使用Seq2SeqEncoder"><a href="#文本encode的输出-使用Seq2SeqEncoder" class="headerlink" title="文本encode的输出,使用Seq2SeqEncoder"></a>文本encode的输出,使用Seq2SeqEncoder</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">encoder_outputs = self._encoder(embedded_input, source_mask)<span class="hljs-comment">#保存在state中，用&#x27;encoder_outputs&#x27;获取</span><br>encoder: Seq2SeqEncoder<br><span class="hljs-comment">#在_encode中，return &#123;</span><br><span class="hljs-comment">#                &quot;source_mask&quot;: source_mask,  # source_mask,</span><br><span class="hljs-comment">#                &quot;concat_mask&quot;: concat_mask,</span><br><span class="hljs-comment">#                &quot;encoder_outputs&quot;: encoder_outputs,</span><br><span class="hljs-comment">#        &#125;</span><br></code></pre></td></tr></table></figure><p>将<strong>嵌入</strong>的文本数据（<code>embedded_input</code>）和文本掩码（<code>source_mask</code>）输入到编码器（<code>_encoder</code>）中，得到编码器的输出（<code>encoder_outputs</code>）。这个编码过程可以将输入文本数据转换为语义表示，从而用于后续的解码或其他任务</p><p>最终文本的输出数据，在forward函数中获取:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">state = self._encode(source_tokens)<br></code></pre></td></tr></table></figure><p>得到的<strong>文本输出state</strong>:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span>&#x27;source_mask&#x27;<span class="hljs-punctuation">:</span> tensor(<span class="hljs-punctuation">[</span><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> device=&#x27;cuda<span class="hljs-punctuation">:</span><span class="hljs-number">0</span>&#x27;)<span class="hljs-punctuation">,</span> <br> &#x27;concat_mask&#x27;<span class="hljs-punctuation">:</span> tensor(<span class="hljs-punctuation">[</span><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> device=&#x27;cuda<span class="hljs-punctuation">:</span><span class="hljs-number">0</span>&#x27;)<span class="hljs-punctuation">,</span> <br> &#x27;encoder_outputs&#x27;<span class="hljs-punctuation">:</span> tensor(<span class="hljs-punctuation">[</span><span class="hljs-punctuation">[</span><span class="hljs-punctuation">[</span><span class="hljs-number">-0.0089</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0061</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0059</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0002</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0017</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0048</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-punctuation">[</span><span class="hljs-number">-0.0104</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0165</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0078</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0052</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0026</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0162</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-punctuation">[</span><span class="hljs-number">-0.0109</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0157</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0085</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0092</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0002</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0139</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>         ...<span class="hljs-punctuation">,</span><br>         <span class="hljs-punctuation">[</span> <span class="hljs-number">0.0000</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0000</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0000</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0000</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0000</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0000</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-punctuation">[</span> <span class="hljs-number">0.0000</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0000</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0000</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0000</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0000</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0000</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-punctuation">[</span> <span class="hljs-number">0.0000</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0000</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0000</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0000</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0000</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0000</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br><br>        <span class="hljs-punctuation">[</span><span class="hljs-punctuation">[</span><span class="hljs-number">-0.0075</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0042</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0060</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0055</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0035</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0004</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-punctuation">[</span><span class="hljs-number">-0.0141</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0138</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0016</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0050</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0010</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0024</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-punctuation">[</span><span class="hljs-number">-0.0121</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0118</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0085</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0070</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0019</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0038</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>         ...<span class="hljs-punctuation">,</span><br>         <span class="hljs-punctuation">[</span> <span class="hljs-number">0.0000</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0000</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0000</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0000</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0000</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0000</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-punctuation">[</span> <span class="hljs-number">0.0000</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0000</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0000</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0000</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0000</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0000</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-punctuation">[</span> <span class="hljs-number">0.0000</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0000</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0000</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0000</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0000</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0000</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br><br>        <span class="hljs-punctuation">[</span><span class="hljs-punctuation">[</span><span class="hljs-number">-0.0089</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0061</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0059</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0002</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0017</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0048</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-punctuation">[</span><span class="hljs-number">-0.0104</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0165</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0078</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0052</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0026</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0162</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-punctuation">[</span><span class="hljs-number">-0.0109</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0157</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0085</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0092</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0002</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0139</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>         ...<span class="hljs-punctuation">,</span><br>         <span class="hljs-punctuation">[</span> <span class="hljs-number">0.0000</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0000</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0000</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0000</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0000</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0000</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-punctuation">[</span> <span class="hljs-number">0.0000</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0000</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0000</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0000</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0000</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0000</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-punctuation">[</span> <span class="hljs-number">0.0000</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0000</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0000</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0000</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0000</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0000</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br><br>        <span class="hljs-punctuation">[</span><span class="hljs-punctuation">[</span><span class="hljs-number">-0.0075</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0042</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0060</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0055</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0035</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0004</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-punctuation">[</span><span class="hljs-number">-0.0141</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0138</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0016</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0050</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0010</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0024</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-punctuation">[</span><span class="hljs-number">-0.0099</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0110</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0027</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0100</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0064</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0016</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>         ...<span class="hljs-punctuation">,</span><br>         <span class="hljs-punctuation">[</span><span class="hljs-number">-0.0178</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0141</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0154</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0040</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0051</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0043</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-punctuation">[</span><span class="hljs-number">-0.0231</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0208</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0131</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0075</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0009</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0024</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-punctuation">[</span><span class="hljs-number">-0.0194</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0184</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0106</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0064</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0016</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0040</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>       device=&#x27;cuda<span class="hljs-punctuation">:</span><span class="hljs-number">0</span>&#x27;<span class="hljs-punctuation">,</span> grad_fn=&lt;IndexSelectBackward0&gt;)<span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>文本encode的部分结束，在forward函数中，使用<code>state = self._encode(source_tokens)</code>获取编码的文本信息，再继续进行图像编码，再继续进行fuse和计算。</p><h2 id="图像encode的过程"><a href="#图像encode的过程" class="headerlink" title="图像encode的过程"></a>图像encode的过程</h2><p><img src="/images/7.16-code-analysis-about-geoqa/image-20230716142804284.png" alt="image-20230716142804284"></p><h4 id="首先，新建一个resnet模型"><a href="#首先，新建一个resnet模型" class="headerlink" title="首先，新建一个resnet模型"></a>首先，新建一个resnet模型</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 创建一个预训练的ResNet-101模型</span><br>resnet = build_model()<br>self.resnet = resnet<br></code></pre></td></tr></table></figure><p>在build_model()中:</p><img src="/images/7.16-code-analysis-about-geoqa/image-20230716201329867.png" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">build_model</span>():<br>    <span class="hljs-comment"># 获取预训练的ResNet-101模型 pretrained=True表示会加载带有预训练权重的模型</span><br>    cnn = <span class="hljs-built_in">getattr</span>(torchvision.models, <span class="hljs-string">&#x27;resnet101&#x27;</span>)(pretrained=<span class="hljs-literal">True</span>)<br>    <span class="hljs-comment"># 卷积层 (conv1)、批归一化层 (bn1)、ReLU 激活函数 (relu) 和最大池化层 (maxpool)。</span><br>    layers = [cnn.conv1,<br>              cnn.bn1,<br>              cnn.relu,<br>              cnn.maxpool]<br>    <span class="hljs-comment"># 将ResNet-101模型的其余三个层添加到layers列表中，对应ResNet架构中的不同块</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>        name = <span class="hljs-string">&#x27;layer%d&#x27;</span> % (i + <span class="hljs-number">1</span>)<br>        layers.append(<span class="hljs-built_in">getattr</span>(cnn, name))<br>    <span class="hljs-comment"># 创建一个Sequential模型，允许按顺序以此应用这些层到输入数据中</span><br>    model = torch.nn.Sequential(*layers)<br>    <span class="hljs-comment"># 将模型迁移至GPU加速计算</span><br>    model.cuda()<br>    <span class="hljs-comment"># 将模型设置为评估模式</span><br>    model.<span class="hljs-built_in">eval</span>()<br>    <span class="hljs-comment"># 返回构建好的模型</span><br>    <span class="hljs-keyword">return</span> model<br></code></pre></td></tr></table></figure><h5 id="ResNet-101模型"><a href="#ResNet-101模型" class="headerlink" title="ResNet-101模型"></a>ResNet-101模型</h5><p><code>[论文]Deep Residual Learning for Image Recognition</code></p><p>​ResNet-101使用了残差学习(Residual Learning)的思想来解决深度神经网络中的<strong>梯度消失和梯度爆炸</strong>的问题。残差学习引入残差块(Residual Block)，使得网络可以学习残差映射，即输入特征和输出特征之间的差异，从而减轻梯度消失问题，使得更<strong>深的网络</strong>可以更容易地训练和优化。</p><p>​在传统的深度神经网络中，增加网络的深度会导致训练变得困难，因为深层网络中的梯度会逐渐变小，导致梯度消失问题，使得网络难以收敛。为了解决这个问题，ResNet提出了残差块（Residual Block）的结构。残差块包含了跨越网络层的捷径连接，即输入特征与输出特征之间的差异（残差）。通过学习残差映射，网络可以更容易地优化残差部分，从而使得更深的网络可以被训练得更好。</p><h4 id="其次进行图像的预处理"><a href="#其次进行图像的预处理" class="headerlink" title="其次进行图像的预处理"></a>其次进行图像的预处理</h4><p>在forward函数中:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 图像通过self.resnet(image)传入resnet模型进行处理</span><br><span class="hljs-comment"># 在该过程中不会影响网络参数，仅进行前向传播的推理过程</span><br><span class="hljs-comment"># 将图像数据输入到ResNet中，经过多个卷积层和池化层，最终得到图像的高级表示，这些特征可以用来图像分类和对象检测</span><br><span class="hljs-keyword">with</span> torch.no_grad():<span class="hljs-comment">#节省内存</span><br>    img_feats = self.resnet(image)<br></code></pre></td></tr></table></figure><p>得到的图像预处理的结果:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json">tensor(<span class="hljs-punctuation">[</span><span class="hljs-punctuation">[</span><span class="hljs-punctuation">[</span><span class="hljs-punctuation">[</span><span class="hljs-number">0.0000e+00</span><span class="hljs-punctuation">,</span> <span class="hljs-number">2.6794e-02</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.0000e+00</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span> <span class="hljs-number">0.0000e+00</span><span class="hljs-punctuation">,</span><br>           <span class="hljs-number">0.0000e+00</span><span class="hljs-punctuation">,</span> <span class="hljs-number">4.6280e-02</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-punctuation">[</span><span class="hljs-number">0.0000e+00</span><span class="hljs-punctuation">,</span> <span class="hljs-number">3.6035e-02</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1.4264e-01</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span> <span class="hljs-number">0.0000e+00</span><span class="hljs-punctuation">,</span><br>           <span class="hljs-number">3.7063e-02</span><span class="hljs-punctuation">,</span> <span class="hljs-number">4.5198e-02</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-punctuation">[</span><span class="hljs-number">0.0000e+00</span><span class="hljs-punctuation">,</span> <span class="hljs-number">5.3535e-02</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.0000e+00</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span> <span class="hljs-number">0.0000e+00</span><span class="hljs-punctuation">,</span><br>           <span class="hljs-number">7.6153e-03</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.0000e+00</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>          ...<span class="hljs-punctuation">,</span><br></code></pre></td></tr></table></figure><h4 id="然后，将图像的形状转换为-N-196-C-的形状-N-C-14-14-gt-N-196-C"><a href="#然后，将图像的形状转换为-N-196-C-的形状-N-C-14-14-gt-N-196-C" class="headerlink" title="然后，将图像的形状转换为:(N, 196, C)的形状(N, C, 14, 14) -&gt; (N, 196, C)"></a>然后，将图像的形状转换为:<strong>(N, 196, C)<strong>的形状</strong>(N, C, 14, 14) -&gt; (N, 196, C)</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">img_feats = img_feats.reshape(img_feats.shape[<span class="hljs-number">0</span>], img_feats.shape[<span class="hljs-number">1</span>], -<span class="hljs-number">1</span>).transpose(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><ol><li><code>img_feats</code>是一个张量，假设它的形状为 <code>(N, C, H, W)</code>，其中：<code>N</code> 表示批次大小（batch size）,<code>N</code> 表示通道数（channels）,<code>H</code> 表示图像高度（height）,<code>W</code> 表示图像宽度（width）</li><li><code>img_feats.reshape(img_feats.shape[0], img_feats.shape[1], -1)</code>：<ul><li>使用 <code>reshape</code> 函数对 <code>img_feats</code> 进行形状变换，将其调整为 <code>(N, C, H*W)</code> 的形状。这里的 <code>-1</code> 表示该维度的大小将根据其他维度的大小自动计算，确保张量元素的总数量不变。</li></ul></li><li><code>.transpose(1, 2)</code>：<ul><li>这一行代码使用 <code>transpose</code> 函数对张量进行转置操作。在这里，维度 1 和维度 2 进行了交换。在原始形状中，维度 1 对应通道数 <code>C</code>，而维度 2 对应图像的高度和宽度的组合 <code>H*W</code>。转置操作后，<code>img_feats</code> 的形状变为 <code>(N, H*W, C)</code>。</li></ul></li></ol><p><strong>这样做可以更好地整合和处理图像特征，使得模型在图像处理任务中能够更有效地学习和表达图像的信息。</strong></p><p>得到的结果:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json">tensor(<span class="hljs-punctuation">[</span><span class="hljs-punctuation">[</span><span class="hljs-punctuation">[</span><span class="hljs-number">0.0000</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.0000</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.0000</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span> <span class="hljs-number">0.1723</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.1291</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.5126</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-punctuation">[</span><span class="hljs-number">0.0268</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.0000</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.0000</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span> <span class="hljs-number">0.1500</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.2367</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.4088</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-punctuation">[</span><span class="hljs-number">0.0000</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.0000</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.0000</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span> <span class="hljs-number">0.1340</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.1610</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.7858</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>         ...<span class="hljs-punctuation">,</span><br></code></pre></td></tr></table></figure><p>调用channel_transform:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">img_feats = self.channel_transform(img_feats)<br><span class="hljs-comment">## 创建一个线性层，输入特征的维度为 1024，输出特征的维度为 512，对特征进行减少，并希望这种变换能够更好地捕捉图像中与任务相关的信息</span><br><span class="hljs-comment">## 线性变换，全连接层</span><br><span class="hljs-comment">## self.channel_transform = torch.nn.Linear(1024, 512)</span><br></code></pre></td></tr></table></figure><p>得到的结果:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json">tensor(<span class="hljs-punctuation">[</span><span class="hljs-punctuation">[</span><span class="hljs-punctuation">[</span> <span class="hljs-number">0.2362</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0080</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0822</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span> <span class="hljs-number">-0.1908</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0636</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.1090</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-punctuation">[</span> <span class="hljs-number">0.1500</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.1148</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.1365</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span> <span class="hljs-number">-0.2499</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0272</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0957</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-punctuation">[</span> <span class="hljs-number">0.2534</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0941</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.2060</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span> <span class="hljs-number">-0.3264</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0095</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.1565</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>         ...<span class="hljs-punctuation">,</span><br></code></pre></td></tr></table></figure><h5 id="使用共同注意力机制得到融合后的图像信息"><a href="#使用共同注意力机制得到融合后的图像信息" class="headerlink" title="使用共同注意力机制得到融合后的图像信息:"></a>使用共同注意力机制得到融合后的图像信息:</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">_, img_feats = self.mcan(lang_feats, img_feats, lang_mask, img_mask)<br><span class="hljs-comment"># 其中四个参数分别表示state[&#x27;encoder_outputs&#x27;]、self.channel_transform(img_feats)、 make_mask(source_tokens[&#x27;tokens&#x27;].unsqueeze(2))、img_mask = make_mask(img_feats)，即文本特征、图像特征、文本掩码和图像掩码</span><br><br><span class="hljs-comment">## 其中c</span><br><span class="hljs-comment">## 其中MCA_ED表示论文中Joint Reasoning Module的部分</span><br></code></pre></td></tr></table></figure><img src="/images/7.16-code-analysis-about-geoqa/image-20230716205930890.png" alt="image-20230716205930890" style="zoom:80%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">## self.mcan = MCA_ED(__C)的具体实现</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MCA_ED</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, __C</span>):<br>        <span class="hljs-built_in">super</span>(MCA_ED, self).__init__()<br>        <span class="hljs-comment"># enc_list是一个模型列表，包含多个SA(Self-attention)</span><br>        <span class="hljs-comment"># 模块，用于对文本特征进行编码</span><br>        self.enc_list = nn.ModuleList([SA(__C) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(__C.LAYER)])<br>        <span class="hljs-comment"># dec_list是另一个模型列表，包含多个SGA(Self-Guided Attention)</span><br>        <span class="hljs-comment"># 模块，用于对图像特征进行编码</span><br>        self.dec_list = nn.ModuleList([SGA(__C) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(__C.LAYER)])<br><br>    <span class="hljs-comment"># 模型接收四个输入参数：lang（语言特征）、image（图像特征）</span><br>    <span class="hljs-comment"># lang_mask（语言掩码，用于处理变长序列）、image_mask（图像掩码，</span><br>    <span class="hljs-comment"># 用于处理变尺寸的图像）</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, lang, image, lang_mask, image_mask</span>):  <span class="hljs-comment"># lang, image</span><br>        <span class="hljs-comment"># 对输入的语言特征lang进行多层自注意力编码，获得更丰富的语言表示</span><br>        <span class="hljs-keyword">for</span> enc <span class="hljs-keyword">in</span> self.enc_list:<br>            lang = enc(lang, lang_mask)<br>        <br>        <span class="hljs-comment"># 对图像特征image进行多层自注意力解码，并结合编码后的语言特征</span><br>        <span class="hljs-comment"># lang进行自引导注意力操作，最终获得图像特征的融合表示</span><br>        <span class="hljs-keyword">for</span> dec <span class="hljs-keyword">in</span> self.dec_list:<br>            image = dec(image, lang, image_mask, lang_mask)<br><br>        <span class="hljs-keyword">return</span> lang, image<br></code></pre></td></tr></table></figure><h4 id="经过mcan处理融合后的图像信息"><a href="#经过mcan处理融合后的图像信息" class="headerlink" title="经过mcan处理融合后的图像信息:"></a>经过mcan处理融合后的图像信息:</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json">tensor(<span class="hljs-punctuation">[</span><span class="hljs-punctuation">[</span><span class="hljs-punctuation">[</span><span class="hljs-number">-0.1857</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">1.2427</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-2.5455</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span>  <span class="hljs-number">1.2758</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.6164</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">2.0748</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-punctuation">[</span><span class="hljs-number">-0.7417</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">2.0356</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-2.2843</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span>  <span class="hljs-number">1.7573</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.5136</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">1.6424</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-punctuation">[</span> <span class="hljs-number">0.2079</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.8267</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-2.0543</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span>  <span class="hljs-number">0.5003</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.3139</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">1.8027</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>         ...<span class="hljs-punctuation">,</span><br></code></pre></td></tr></table></figure><h4 id="enhance-text-information"><a href="#enhance-text-information" class="headerlink" title="enhance text information:"></a>enhance text information:</h4><p>根据现有的文本信息和融合后的图像信息，更新state中的文本信息，对文本信息进行加强:</p><img src="/images/7.16-code-analysis-about-geoqa/image-20230716210944396.png" alt="image-20230716210944396" style="zoom:80%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">state[<span class="hljs-string">&#x27;encoder_outputs&#x27;</span>] = torch.cat([img_feats, lang_feats], <span class="hljs-number">1</span>)<br><span class="hljs-comment">## 是将两个张量img_feats和lang_feats在维度1上进行拼接</span><br></code></pre></td></tr></table></figure><h4 id="拼接-加强-后的文本信息"><a href="#拼接-加强-后的文本信息" class="headerlink" title="拼接(加强)后的文本信息"></a>拼接(加强)后的文本信息</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json">&#x27;encoder_outputs&#x27;<span class="hljs-punctuation">:</span> tensor(<span class="hljs-punctuation">[</span><span class="hljs-punctuation">[</span><span class="hljs-punctuation">[</span><span class="hljs-number">-1.8568e-01</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">1.2427e+00</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-2.5455e+00</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span>  <span class="hljs-number">1.2758e+00</span><span class="hljs-punctuation">,</span><br>           <span class="hljs-number">6.1642e-01</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">2.0748e+00</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-punctuation">[</span><span class="hljs-number">-7.4170e-01</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">2.0356e+00</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-2.2843e+00</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span>  <span class="hljs-number">1.7573e+00</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-number">-5.1359e-01</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">1.6424e+00</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-punctuation">[</span> <span class="hljs-number">2.0789e-01</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">8.2671e-01</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-2.0543e+00</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span>  <span class="hljs-number">5.0033e-01</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-number">-3.1393e-01</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">1.8027e+00</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>         ...<span class="hljs-punctuation">,</span><br></code></pre></td></tr></table></figure><p>至此，encode的过程已经结束，encode的输入为预处理后的图像信息以及映射到整数后的文本信息，输出为融合后的图像信息以及融合后的文本信息</p><p>其中，对应论文中Joint Reasoning Module的部分，代码实现在mcan.py的部分，在这个文件中，实现了共同注意力的12个self-attention和6个guided-attention，共同的注意力机制将文本信息和图像信息完全地融合与对齐。</p><p>其中，在SA和SGA的实现中，使用了FFN(前馈神经网络，对MLP进行了封装)，以及MNATtt(mult-head) Attention，这种注意力机制能够使得模型在不同“头”上学习不同的注意力模式。</p><p><strong><code>state[&#39;encoder_outputs&#39;]</code>作为decoder的输入，被输入到一个LSTM decoder中进行解码，decoder利用state,lang_feats,img_feats,img_mask进行初始化，然后将初始化后的state输入LSTM单元中进行解码</strong></p><h2 id="decode的过程"><a href="#decode的过程" class="headerlink" title="decode的过程"></a>decode的过程</h2><p><img src="/images/7.16-code-analysis-about-geoqa/image-20230716142750087.png" alt="image-20230716142750087"></p><img src="/images/7.16-code-analysis-about-geoqa/image-20230716142840615.png" alt="image-20230716142840615" /><h4 id="首先，初始化decoder的状态"><a href="#首先，初始化decoder的状态" class="headerlink" title="首先，初始化decoder的状态:"></a>首先，初始化decoder的状态:</h4><p>在初始化decoder的过程中，<code>final_lang_feat = util.get_final_encoder_states(                         lang_feats,                         state[&quot;source_mask&quot;],                         self._encoder.is_bidirectional())</code>获取了文本的最后一个特征，然后将其与图像信息进行拼接，实现如下部分:</p><img src="/images/7.16-code-analysis-about-geoqa/image-20230716213334664.png" alt="image-20230716213334664" style="zoom:80%;" /><p><img src="/images/7.16-code-analysis-about-geoqa/image-20230716213354244.png" alt="image-20230716213354244"></p><p>拼接: <code> feat = torch.cat([final_lang_feat, img_feat], 1)</code></p><p>而<code>self.attflat_img(img_feats,img_mask)</code>的部分是如下论文部分的实现:</p><img src="/images/7.16-code-analysis-about-geoqa/image-20230716214209397.png" alt="image-20230716214209397" style="zoom:80%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python">state = self._init_decoder_state(state, lang_feats, img_feats, img_mask)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">_init_decoder_state</span>(<span class="hljs-params">self, state, lang_feats, img_feats, img_mask</span>):<br>        batch_size = state[<span class="hljs-string">&quot;source_mask&quot;</span>].size(<span class="hljs-number">0</span>)<br>        <span class="hljs-comment"># 得到文本的最后一个特征</span><br>        final_lang_feat = util.get_final_encoder_states(<br>                        lang_feats,<br>                        state[<span class="hljs-string">&quot;source_mask&quot;</span>],<br>                        self._encoder.is_bidirectional())<br>        <span class="hljs-comment"># self.attflat_img = AttFlat(__C)</span><br>        <span class="hljs-comment"># AttFlat类实现了自注意力机制和全连接层的结合，将输入序列中的信息进行加权聚合，得到一个新的表示</span><br>        <span class="hljs-comment"># 在AttFlat类中使用了双层的MLP来处理图像信息</span><br>        img_feat = self.attflat_img(img_feats, img_mask)<br>        feat = torch.cat([final_lang_feat, img_feat], <span class="hljs-number">1</span>)<br>        feat = self.decode_transform(feat)<br>        state[<span class="hljs-string">&quot;concat_feature&quot;</span>] = feat<br><br>        state[<span class="hljs-string">&quot;decoder_hidden&quot;</span>] = feat<br>        <span class="hljs-comment"># C0 shape: (batch_size, decoder_output_dim)</span><br>        state[<span class="hljs-string">&quot;decoder_context&quot;</span>] = torch.zeros(batch_size, self._decoder_output_dim).cuda()<br>        <span class="hljs-comment"># state[&quot;decoder_context&quot;] = state[&quot;encoder_outputs&quot;].new_zeros(batch_size, self._decoder_output_dim)</span><br>        <span class="hljs-keyword">return</span> state<br></code></pre></td></tr></table></figure><p>初始化decoder后得到的state:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span>&#x27;source_mask&#x27;<span class="hljs-punctuation">:</span> tensor(<span class="hljs-punctuation">[</span><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> device=&#x27;cuda<span class="hljs-punctuation">:</span><span class="hljs-number">0</span>&#x27;)<span class="hljs-punctuation">,</span> <br> &#x27;concat_mask&#x27;<span class="hljs-punctuation">:</span> tensor(<span class="hljs-punctuation">[</span><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> device=&#x27;cuda<span class="hljs-punctuation">:</span><span class="hljs-number">0</span>&#x27;)<span class="hljs-punctuation">,</span> <br> &#x27;encoder_outputs&#x27;<span class="hljs-punctuation">:</span> tensor(<span class="hljs-punctuation">[</span><span class="hljs-punctuation">[</span><span class="hljs-punctuation">[</span><span class="hljs-number">-1.8568e-01</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">1.2427e+00</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-2.5455e+00</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span>  <span class="hljs-number">1.2758e+00</span><span class="hljs-punctuation">,</span><br>           <span class="hljs-number">6.1642e-01</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">2.0748e+00</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-punctuation">[</span><span class="hljs-number">-7.4170e-01</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">2.0356e+00</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-2.2843e+00</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span>  <span class="hljs-number">1.7573e+00</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-number">-5.1359e-01</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">1.6424e+00</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-punctuation">[</span> <span class="hljs-number">2.0789e-01</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">8.2671e-01</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-2.0543e+00</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span>  <span class="hljs-number">5.0033e-01</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-number">-3.1393e-01</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">1.8027e+00</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>         ...<span class="hljs-punctuation">,</span><br>         <span class="hljs-punctuation">[</span> <span class="hljs-number">0.0000e+00</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0000e+00</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0000e+00</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0000e+00</span><span class="hljs-punctuation">,</span><br>           <span class="hljs-number">0.0000e+00</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0000e+00</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-punctuation">[</span> <span class="hljs-number">0.0000e+00</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0000e+00</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0000e+00</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0000e+00</span><span class="hljs-punctuation">,</span><br>           <span class="hljs-number">0.0000e+00</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0000e+00</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-punctuation">[</span> <span class="hljs-number">0.0000e+00</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0000e+00</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0000e+00</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0000e+00</span><span class="hljs-punctuation">,</span><br>           <span class="hljs-number">0.0000e+00</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0000e+00</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br><br>        <span class="hljs-punctuation">[</span><span class="hljs-punctuation">[</span> <span class="hljs-number">2.3856e-02</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">1.3058e+00</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-1.8343e+00</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span>  <span class="hljs-number">1.0722e+00</span><span class="hljs-punctuation">,</span><br>           <span class="hljs-number">1.4554e+00</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">1.7364e+00</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-punctuation">[</span> <span class="hljs-number">7.8659e-02</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">1.6336e+00</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-3.0100e+00</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span>  <span class="hljs-number">9.5237e-01</span><span class="hljs-punctuation">,</span><br>           <span class="hljs-number">8.1084e-01</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">1.8931e+00</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-punctuation">[</span><span class="hljs-number">-6.3895e-03</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">1.7448e+00</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-2.7792e+00</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span>  <span class="hljs-number">1.2021e+00</span><span class="hljs-punctuation">,</span><br>           <span class="hljs-number">6.1907e-01</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">1.9338e+00</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>         ...<span class="hljs-punctuation">,</span><br>         <span class="hljs-punctuation">[</span> <span class="hljs-number">0.0000e+00</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0000e+00</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0000e+00</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0000e+00</span><span class="hljs-punctuation">,</span><br>           <span class="hljs-number">0.0000e+00</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0000e+00</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-punctuation">[</span> <span class="hljs-number">0.0000e+00</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0000e+00</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0000e+00</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0000e+00</span><span class="hljs-punctuation">,</span><br>           <span class="hljs-number">0.0000e+00</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0000e+00</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-punctuation">[</span> <span class="hljs-number">0.0000e+00</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0000e+00</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0000e+00</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0000e+00</span><span class="hljs-punctuation">,</span><br>           <span class="hljs-number">0.0000e+00</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0000e+00</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br><br>        <span class="hljs-punctuation">[</span><span class="hljs-punctuation">[</span><span class="hljs-number">-9.9398e-02</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">1.0618e+00</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-2.8032e+00</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span>  <span class="hljs-number">1.2120e+00</span><span class="hljs-punctuation">,</span><br>           <span class="hljs-number">3.6584e-01</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">2.4790e+00</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-punctuation">[</span><span class="hljs-number">-6.0500e-01</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">1.4447e+00</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-2.2084e+00</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span>  <span class="hljs-number">6.5523e-01</span><span class="hljs-punctuation">,</span><br>           <span class="hljs-number">2.2132e-01</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">1.8058e+00</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-punctuation">[</span><span class="hljs-number">-4.5138e-01</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">1.5847e+00</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-2.3221e+00</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span>  <span class="hljs-number">6.2359e-01</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-number">-6.5195e-02</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">2.0452e+00</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>         ...<span class="hljs-punctuation">,</span><br>         <span class="hljs-punctuation">[</span> <span class="hljs-number">0.0000e+00</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0000e+00</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0000e+00</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0000e+00</span><span class="hljs-punctuation">,</span><br>           <span class="hljs-number">0.0000e+00</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0000e+00</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-punctuation">[</span> <span class="hljs-number">0.0000e+00</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0000e+00</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0000e+00</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0000e+00</span><span class="hljs-punctuation">,</span><br>           <span class="hljs-number">0.0000e+00</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0000e+00</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-punctuation">[</span> <span class="hljs-number">0.0000e+00</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0000e+00</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0000e+00</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0000e+00</span><span class="hljs-punctuation">,</span><br>           <span class="hljs-number">0.0000e+00</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0000e+00</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br><br>        <span class="hljs-punctuation">[</span><span class="hljs-punctuation">[</span> <span class="hljs-number">8.2480e-02</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">1.2435e+00</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-2.3472e+00</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span>  <span class="hljs-number">1.4413e+00</span><span class="hljs-punctuation">,</span><br>           <span class="hljs-number">1.0995e+00</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">2.7460e+00</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-punctuation">[</span><span class="hljs-number">-2.1474e-01</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">1.5908e+00</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-2.1710e+00</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span>  <span class="hljs-number">1.6513e+00</span><span class="hljs-punctuation">,</span><br>           <span class="hljs-number">8.4147e-01</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">2.5247e+00</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-punctuation">[</span> <span class="hljs-number">4.5507e-01</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">9.4305e-01</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-2.9737e+00</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span>  <span class="hljs-number">8.3792e-01</span><span class="hljs-punctuation">,</span><br>           <span class="hljs-number">4.8650e-01</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">2.0453e+00</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>         ...<span class="hljs-punctuation">,</span><br>         <span class="hljs-punctuation">[</span><span class="hljs-number">-1.7787e-02</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">1.4127e-02</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">1.5389e-02</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span> <span class="hljs-number">-4.0229e-03</span><span class="hljs-punctuation">,</span><br>           <span class="hljs-number">5.1481e-03</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-4.2730e-03</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-punctuation">[</span><span class="hljs-number">-2.3142e-02</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">2.0802e-02</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">1.3149e-02</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span> <span class="hljs-number">-7.5230e-03</span><span class="hljs-punctuation">,</span><br>           <span class="hljs-number">8.5205e-04</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-2.3521e-03</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-punctuation">[</span><span class="hljs-number">-1.9417e-02</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">1.8419e-02</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">1.0621e-02</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span> <span class="hljs-number">-6.4330e-03</span><span class="hljs-punctuation">,</span><br>           <span class="hljs-number">1.5681e-03</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-3.9732e-03</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> device=&#x27;cuda<span class="hljs-punctuation">:</span><span class="hljs-number">0</span>&#x27;<span class="hljs-punctuation">,</span> grad_fn=&lt;CatBackward0&gt;)<span class="hljs-punctuation">,</span> <br><span class="hljs-comment">//论文中的FR，得到的最终encode的文本和图像的结果</span><br>&#x27;concat_feature&#x27;<span class="hljs-punctuation">:</span> tensor(<span class="hljs-punctuation">[</span><span class="hljs-punctuation">[</span> <span class="hljs-number">0.1841</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.5670</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0278</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0229</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0041</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.1886</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">[</span> <span class="hljs-number">0.1544</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.5350</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0684</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0170</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0535</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.1588</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">[</span> <span class="hljs-number">0.1305</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.5631</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0526</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0510</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0656</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.1601</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">[</span> <span class="hljs-number">0.1140</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.5501</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0111</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0381</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0347</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.1559</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>       device=&#x27;cuda<span class="hljs-punctuation">:</span><span class="hljs-number">0</span>&#x27;<span class="hljs-punctuation">,</span> grad_fn=&lt;AddmmBackward0&gt;)<span class="hljs-punctuation">,</span> <br><span class="hljs-comment">//LSTM在t时刻的隐藏状态st</span><br>&#x27;decoder_hidden&#x27;<span class="hljs-punctuation">:</span> tensor(<span class="hljs-punctuation">[</span><span class="hljs-punctuation">[</span> <span class="hljs-number">0.1841</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.5670</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0278</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0229</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.0041</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.1886</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">[</span> <span class="hljs-number">0.1544</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.5350</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0684</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0170</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0535</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.1588</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">[</span> <span class="hljs-number">0.1305</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.5631</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0526</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0510</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0656</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.1601</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">[</span> <span class="hljs-number">0.1140</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">0.5501</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0111</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0381</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.0347</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-0.1559</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>       device=&#x27;cuda<span class="hljs-punctuation">:</span><span class="hljs-number">0</span>&#x27;<span class="hljs-punctuation">,</span> grad_fn=&lt;AddmmBackward0&gt;)<span class="hljs-punctuation">,</span> <br>&#x27;decoder_context&#x27;<span class="hljs-punctuation">:</span> tensor(<span class="hljs-punctuation">[</span><span class="hljs-punctuation">[</span><span class="hljs-number">0.</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span> <span class="hljs-number">0.</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">[</span><span class="hljs-number">0.</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span> <span class="hljs-number">0.</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">[</span><span class="hljs-number">0.</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span> <span class="hljs-number">0.</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">[</span><span class="hljs-number">0.</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">,</span> <span class="hljs-number">0.</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> device=&#x27;cuda<span class="hljs-punctuation">:</span><span class="hljs-number">0</span>&#x27;)<span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="递归解码，使用LSTM单元进行递归解码，生成整个目标序列"><a href="#递归解码，使用LSTM单元进行递归解码，生成整个目标序列" class="headerlink" title="递归解码，使用LSTM单元进行递归解码，生成整个目标序列"></a><strong>递归解码，使用LSTM单元进行递归解码，生成整个目标序列</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">output_dict = self._forward_loop(state, target_tokens)  <span class="hljs-comment"># recurrent decoding for LSTM</span><br></code></pre></td></tr></table></figure><p>得到的output_dict:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span>&#x27;predictions&#x27;<span class="hljs-punctuation">:</span> tensor(<span class="hljs-punctuation">[</span><span class="hljs-punctuation">[</span><span class="hljs-number">15</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">3</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">3</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">3</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">8</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">8</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">8</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">8</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">8</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">8</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">[</span><span class="hljs-number">15</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">3</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">3</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">3</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">8</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">8</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">8</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">8</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">8</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">8</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">[</span><span class="hljs-number">15</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">3</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">3</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">3</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">8</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">8</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">8</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">8</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">8</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">8</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">[</span><span class="hljs-number">15</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">3</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">3</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">3</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">8</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">8</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">8</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">8</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">8</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">8</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> device=&#x27;cuda<span class="hljs-punctuation">:</span><span class="hljs-number">0</span>&#x27;)<span class="hljs-punctuation">,</span> &#x27;loss&#x27;<span class="hljs-punctuation">:</span> tensor(<span class="hljs-number">2.4066</span><span class="hljs-punctuation">,</span> device=&#x27;cuda<span class="hljs-punctuation">:</span><span class="hljs-number">0</span>&#x27;<span class="hljs-punctuation">,</span> grad_fn=&lt;DivBackward0&gt;)<span class="hljs-punctuation">&#125;</span> ...<br></code></pre></td></tr></table></figure><p>进行知识点的预测，计算知识点的损失函数，并保存在output_dict中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> self.point_ratio != <span class="hljs-number">0</span>:<span class="hljs-comment">#需要考虑知识点</span><br>    concat_feature = state[<span class="hljs-string">&quot;concat_feature&quot;</span>]<br>    <span class="hljs-comment"># 归一化操作</span><br>    point_feat = self.points_norm(concat_feature)<br>    <span class="hljs-comment"># 投影操作</span><br>    point_feat = self.points_proj(point_feat)<br>    <span class="hljs-comment">#  进行 Sigmoid 函数激活，得到一个值范围在 0 到 1 之间的预测概率值 point_pred。这个概率值表示每个知识点的预测置信度</span><br>    point_pred = torch.sigmoid(point_feat)<br>    <span class="hljs-comment"># 计算知识点损失并调节知识点损失在总损失中所占的比例</span><br>    point_loss = self.points_criterion(point_pred, point_label) * self.point_ratio<br>    <span class="hljs-comment"># 存储知识点的预测概率</span><br>    output_dict[<span class="hljs-string">&quot;point_pred&quot;</span>] = point_pred<br>    <span class="hljs-comment"># 存储知识点损失</span><br>    output_dict[<span class="hljs-string">&quot;point_loss&quot;</span>] = point_loss<br>    <span class="hljs-comment"># 将知识点损失加到总体损失中，这样模型在进行训练时，还会优化知识点损失</span><br>    output_dict[<span class="hljs-string">&quot;loss&quot;</span>] += point_loss<br></code></pre></td></tr></table></figure><p>计算后的output_dict:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span>&#x27;predictions&#x27;<span class="hljs-punctuation">:</span> tensor(<span class="hljs-punctuation">[</span><span class="hljs-punctuation">[</span> <span class="hljs-number">136</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1177</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1177</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1177</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1177</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1177</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1177</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1177</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1177</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">[</span> <span class="hljs-number">850</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1177</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1177</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1177</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">818</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">818</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">818</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">818</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">818</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">[</span> <span class="hljs-number">599</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">818</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">818</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">818</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1177</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1177</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1177</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1177</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1177</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">[</span> <span class="hljs-number">136</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">818</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">818</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">818</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">818</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">818</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">818</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">818</span><span class="hljs-punctuation">,</span>  <span class="hljs-number">818</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>       device=&#x27;cuda<span class="hljs-punctuation">:</span><span class="hljs-number">0</span>&#x27;)<span class="hljs-punctuation">,</span> <br> &#x27;loss&#x27;<span class="hljs-punctuation">:</span> tensor(<span class="hljs-number">7.8141</span><span class="hljs-punctuation">,</span> device=&#x27;cuda<span class="hljs-punctuation">:</span><span class="hljs-number">0</span>&#x27;<span class="hljs-punctuation">,</span> grad_fn=&lt;AddBackward0&gt;)<span class="hljs-punctuation">,</span> <br> &#x27;point_pred&#x27;<span class="hljs-punctuation">:</span> tensor(<span class="hljs-punctuation">[</span><span class="hljs-punctuation">[</span><span class="hljs-number">0.4552</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.3563</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.3665</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.5904</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.4875</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.7260</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.5326</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.4646</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.5458</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-number">0.5603</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.4952</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.4335</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.6794</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.4520</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.5140</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.3657</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.5173</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.6096</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-number">0.5354</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.7347</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.4870</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.3245</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.7726</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.6352</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.6223</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.4108</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.4164</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-number">0.4443</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.5647</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.3512</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.4421</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.6050</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.2412</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.2990</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.3103</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.3905</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-number">0.5547</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.5716</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.2916</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.5286</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.5300</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.5546</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.5452</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.5133</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.3112</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-number">0.3731</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.6321</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.3663</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.4877</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.4742</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">[</span><span class="hljs-number">0.5069</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.3067</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.3451</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.5134</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.5182</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.7757</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.4767</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.4210</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.6802</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-number">0.6227</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.5106</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.4961</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.6092</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.4707</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.4589</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.3791</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.4650</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.5887</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-number">0.5564</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.6933</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.4756</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.2512</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.7658</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.6295</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.6322</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.4123</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.4198</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-number">0.4111</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.4782</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.4121</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.4020</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.5673</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.2585</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.4545</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.2514</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.4056</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-number">0.5961</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.5101</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.4088</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.3904</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.5556</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.4644</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.5947</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.5814</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.3428</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-number">0.3558</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.6446</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.4494</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.6433</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.5191</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">[</span><span class="hljs-number">0.4920</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.3333</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.3406</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.5265</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.4944</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.7473</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.4900</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.4278</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.6322</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-number">0.6220</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.4848</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.4687</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.6296</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.4290</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.4808</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.4082</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.5069</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.5941</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-number">0.5236</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.7076</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.4646</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.2762</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.7472</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.6498</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.6365</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.4332</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.4022</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-number">0.4381</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.5259</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.4107</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.3769</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.6083</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.2359</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.4039</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.2543</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.3727</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-number">0.5819</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.5167</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.3826</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.4297</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.5478</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.4863</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.5893</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.5470</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.3345</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-number">0.3670</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.6283</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.4061</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.6101</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.5447</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">[</span><span class="hljs-number">0.4969</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.3700</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.3529</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.5614</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.5207</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.7504</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.5594</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.5152</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.6049</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-number">0.5701</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.4579</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.4550</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.6560</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.4645</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.5446</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.3921</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.4785</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.6119</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-number">0.5203</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.7177</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.4605</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.3018</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.7567</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.6928</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.6193</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.4212</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.4727</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-number">0.4148</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.4978</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.3841</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.4249</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.5825</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.2215</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.3627</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.2671</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.4180</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-number">0.5866</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.5542</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.3559</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.4671</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.5564</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.5340</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.5962</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.5357</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.3218</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-number">0.3591</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.6334</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.3828</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.5163</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.5002</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> device=&#x27;cuda<span class="hljs-punctuation">:</span><span class="hljs-number">0</span>&#x27;<span class="hljs-punctuation">,</span><br>       grad_fn=&lt;SigmoidBackward0&gt;)<span class="hljs-punctuation">,</span> <br>&#x27;point_loss&#x27;<span class="hljs-punctuation">:</span> tensor(<span class="hljs-number">0.7048</span><span class="hljs-punctuation">,</span> device=&#x27;cuda<span class="hljs-punctuation">:</span><span class="hljs-number">0</span>&#x27;<span class="hljs-punctuation">,</span> grad_fn=&lt;MulBackward0&gt;)<span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="其中，对于point-pred"><a href="#其中，对于point-pred" class="headerlink" title="其中，对于point_pred"></a>其中，对于point_pred</h4><p>point_pred的每一行表示一个样本的预测结果（即一道题的预测结果），例如，对于第一个样本:</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-string">[0.4552, 0.3563, 0.3665, 0.5904, 0.4875, 0.7260, 0.5326, 0.4646, 0.5458,</span><br><span class="hljs-string">         0.5603, 0.4952, 0.4335, 0.6794, 0.4520, 0.5140, 0.3657, 0.5173, 0.6096,</span><br><span class="hljs-string">         0.5354, 0.7347, 0.4870, 0.3245, 0.7726, 0.6352, 0.6223, 0.4108, 0.4164,</span><br><span class="hljs-string">         0.4443, 0.5647, 0.3512, 0.4421, 0.6050, 0.2412, 0.2990, 0.3103, 0.3905,</span><br><span class="hljs-string">         0.5547, 0.5716, 0.2916, 0.5286, 0.5300, 0.5546, 0.5452, 0.5133, 0.3112,</span><br><span class="hljs-string">         0.3731, 0.6321, 0.3663, 0.4877, 0.4742]</span>,<br></code></pre></td></tr></table></figure><p>对应概率最高的0.7726，对应的index是22，对应的token是‘对应角’</p><h4 id="获取执行program"><a href="#获取执行program" class="headerlink" title="获取执行program"></a>获取执行program</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 获取预测序列  </span><br><span class="hljs-comment"># 从 top_k_predictions 中获取第 b 个样本的第 i 个 Beam（候选预测）。top_k_predictions 是经过 Beam Search 后得到的预测结果</span><br>hypo = <span class="hljs-built_in">list</span>(top_k_predictions[b][i])<br><span class="hljs-comment"># 判断预测序列中是否包含结束符&#x27;end_index&#x27;</span><br><span class="hljs-keyword">if</span> self._end_index <span class="hljs-keyword">in</span> <span class="hljs-built_in">list</span>(hypo):<br>    <span class="hljs-comment"># 保留结束符之前的部分</span><br>    hypo = hypo[:hypo.index(self._end_index)]<br>    <span class="hljs-comment"># 将预测序列中的整数转化成文本  </span><br>    hypo = [self.vocab.get_token_from_index(idx.item()) <span class="hljs-keyword">for</span> idx <span class="hljs-keyword">in</span> hypo]<br></code></pre></td></tr></table></figure><h4 id="获得的hypo"><a href="#获得的hypo" class="headerlink" title="获得的hypo:"></a>获得的hypo:</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">[</span>&#x27;g_minus&#x27;<span class="hljs-punctuation">,</span> &#x27;C_3&#x27;<span class="hljs-punctuation">,</span> &#x27;N_0&#x27;<span class="hljs-punctuation">,</span> &#x27;g_minus&#x27;<span class="hljs-punctuation">,</span> &#x27;V_0&#x27;<span class="hljs-punctuation">,</span> &#x27;N_1&#x27;<span class="hljs-punctuation">,</span> &#x27;g_minus&#x27;<span class="hljs-punctuation">,</span> &#x27;C_3&#x27;<span class="hljs-punctuation">,</span> &#x27;V_1&#x27;<span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><h4 id="执行program"><a href="#执行program" class="headerlink" title="执行program"></a>执行program</h4><p>得到最终答案，并统计正确率和损失率</p><p>执行计算:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 执行计算  </span><br>res = self._equ.excuate_equation(hypo, source_nums[b])<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 执行program</span><br>    <span class="hljs-comment"># 例如，exp = [&#x27;N_0&#x27;, &#x27;V_1&#x27;, &#x27;g_divide&#x27;]</span><br>    <span class="hljs-comment"># source_nums = [5, 2]→</span><br>    <span class="hljs-comment"># vars = [2.5]</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">excuate_equation</span>(<span class="hljs-params">self, exp, source_nums=<span class="hljs-literal">None</span></span>):<br><br>        <span class="hljs-keyword">if</span> source_nums <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            source_nums = self.exp_info[<span class="hljs-string">&#x27;nums&#x27;</span>]<br>        <span class="hljs-built_in">vars</span> = []<br>        idx = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> idx &lt; <span class="hljs-built_in">len</span>(exp):<br>            op = exp[idx]<br>            <span class="hljs-comment"># 没有对应的操作符</span><br>            <span class="hljs-keyword">if</span> op <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> self.op_list:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>            op_nums = self.op_num[op]<br>            <span class="hljs-comment"># 找不到对应的表达式    </span><br>            <span class="hljs-keyword">if</span> idx + op_nums &gt;= <span class="hljs-built_in">len</span>(exp):<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>            excuate_nums = []<br>            <span class="hljs-keyword">for</span> tmp <span class="hljs-keyword">in</span> exp[idx + <span class="hljs-number">1</span>: idx + <span class="hljs-number">1</span> + op_nums]:<br>                <span class="hljs-keyword">if</span> tmp[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;N&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">int</span>(tmp[-<span class="hljs-number">1</span>]) &lt; <span class="hljs-built_in">len</span>(source_nums):<br>                    excuate_nums.append(source_nums[<span class="hljs-built_in">int</span>(tmp[-<span class="hljs-number">1</span>])])<br>                <span class="hljs-keyword">elif</span> tmp[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;V&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">int</span>(tmp[-<span class="hljs-number">1</span>]) &lt; <span class="hljs-built_in">len</span>(<span class="hljs-built_in">vars</span>):<br>                    excuate_nums.append(<span class="hljs-built_in">vars</span>[<span class="hljs-built_in">int</span>(tmp[-<span class="hljs-number">1</span>])])<br>                <span class="hljs-keyword">elif</span> tmp[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;C&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">int</span>(tmp[-<span class="hljs-number">1</span>]) &lt; <span class="hljs-built_in">len</span>(constant):<br>                    excuate_nums.append(constant[<span class="hljs-built_in">int</span>(tmp[-<span class="hljs-number">1</span>])])<br>                <span class="hljs-keyword">else</span>:<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>            idx += op_nums + <span class="hljs-number">1</span><br>            <span class="hljs-comment"># 执行操作，得到结果</span><br>            v = self.call_op[op](*excuate_nums)<br>            <span class="hljs-keyword">if</span> v <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>            <span class="hljs-built_in">vars</span>.append(v)<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">vars</span><br></code></pre></td></tr></table></figure><h2 id="有关辅助任务"><a href="#有关辅助任务" class="headerlink" title="有关辅助任务?"></a>有关辅助任务?</h2><p>knowledge points prediction:</p><img src="/images/7.16-code-analysis-about-geoqa/image-20230716231903333.png" alt="image-20230716231903333" style="zoom:80%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> self.point_ratio != <span class="hljs-number">0</span>:<span class="hljs-comment">#需要考虑知识点</span><br>        concat_feature = state[<span class="hljs-string">&quot;concat_feature&quot;</span>]<br>        <span class="hljs-comment"># 归一化操作</span><br>        point_feat = self.points_norm(concat_feature)<br>        <span class="hljs-comment"># 投影操作</span><br>        point_feat = self.points_proj(point_feat)<br>        <span class="hljs-comment">#  进行 Sigmoid 函数激活，得到一个值范围在 0 到 1 之间的预测概率值 point_pred。这个概率值表示每个知识点的预测置信度</span><br>        point_pred = torch.sigmoid(point_feat)<br>        <span class="hljs-comment"># 计算知识点损失并调节知识点损失在总损失中所占的比例</span><br>        point_loss = self.points_criterion(point_pred, point_label) * self.point_ratio<br>        <span class="hljs-comment"># 存储知识点的预测概率</span><br>        output_dict[<span class="hljs-string">&quot;point_label&quot;</span>]=point_label<br>        output_dict[<span class="hljs-string">&quot;point_pred&quot;</span>] = point_pred<br>        <span class="hljs-comment"># 存储知识点损失</span><br>        output_dict[<span class="hljs-string">&quot;point_loss&quot;</span>] = point_loss<br>        <span class="hljs-comment"># 将知识点损失加到总体损失中，这样模型在进行训练时，还会优化知识点损失</span><br>        output_dict[<span class="hljs-string">&quot;loss&quot;</span>] += point_loss<br></code></pre></td></tr></table></figure><h4 id="其他辅助任务"><a href="#其他辅助任务" class="headerlink" title="其他辅助任务"></a>其他辅助任务</h4><h5 id="jigsaw-location-prediction"><a href="#jigsaw-location-prediction" class="headerlink" title="jigsaw location prediction"></a>jigsaw location prediction</h5><p><img src="/images/7.16-code-analysis-about-geoqa/image-20230716232132074.png" alt="image-20230716232132074"></p><h5 id="geometry-elements-prediction"><a href="#geometry-elements-prediction" class="headerlink" title="geometry elements prediction"></a>geometry elements prediction</h5><p>?</p>]]></content>
    
    
    <categories>
      
      <category>智慧教育</category>
      
    </categories>
    
    
    <tags>
      
      <tag>智慧教育</tag>
      
      <tag>自动数学求解器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/06/21/Lexical-Analysis(CC++)-%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/"/>
    <url>/2023/06/21/Lexical-Analysis(CC++)-%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/</url>
    
    <content type="html"><![CDATA[<h1 id="Lexical-Analysis-C-x2F-C-实验报告"><a href="#Lexical-Analysis-C-x2F-C-实验报告" class="headerlink" title="Lexical-Analysis(C&#x2F;C++)-实验报告"></a>Lexical-Analysis(C&#x2F;C++)-实验报告</h1>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>软件需求期末复习</title>
    <link href="/2023/06/15/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/"/>
    <url>/2023/06/15/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="Chapter-1-2"><a href="#Chapter-1-2" class="headerlink" title="Chapter 1-2"></a>Chapter 1-2</h1><p>:fallen_leaf:requirements level</p><p>:leaves:requirements development and management</p><p>:maple_leaf:good requirements characteristic</p><p>:four_leaf_clover:requirement baseline</p><h2 id="Different-Requirement-levels"><a href="#Different-Requirement-levels" class="headerlink" title="Different Requirement levels"></a>Different Requirement levels</h2><img src="/images/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230615105246322.png" alt="image-20230615105246322" style="zoom:80%;" /><h2 id="What-is-a-requirements"><a href="#What-is-a-requirements" class="headerlink" title="What is a requirements"></a>What is a requirements</h2><h3 id="In-user-view"><a href="#In-user-view" class="headerlink" title="In user view"></a>In user view</h3><p>A condition or capability needed by a user to solve a problem or achieve an objective</p><h3 id="in-developer-view"><a href="#in-developer-view" class="headerlink" title="in developer view"></a>in developer view</h3><p>A condition or capability that must be met or possessed by a system or system component to satisfy a contract , standard, specification, or other formally imposed document </p><h3 id="levels-of-requirements"><a href="#levels-of-requirements" class="headerlink" title="levels of requirements"></a>levels of requirements</h3><p><img src="/images/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230615105844047.png" alt="image-20230615105844047"></p><h4 id="business-requirements"><a href="#business-requirements" class="headerlink" title="business requirements"></a>business requirements</h4><p>Business requirements represent high-level objectives of the organization or customer who requests the system </p><img src="/images/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230615110133430.png" alt="image-20230615110133430" style="zoom:67%;" /><h4 id="user-requirements"><a href="#user-requirements" class="headerlink" title="user requirements"></a>user requirements</h4><ul><li>user requirements describe user goals or tasks that users must be able to perform with the product</li><li>ways of representation:<ol><li>use cases</li><li>scenario descriptions</li><li>event-response tables</li></ol></li><li><img src="/images/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230615110323156.png" alt="image-20230615110323156" style="zoom:67%;" /></li></ul><h4 id="functional-requirements"><a href="#functional-requirements" class="headerlink" title="functional requirements"></a>functional requirements</h4><ul><li>functional requirements specify the software functionality that the developers must build into the product to enable users to accomplish their tasks,thereby satisfying the business requirements</li><li><img src="/images/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230615110519987.png" alt="image-20230615110519987" style="zoom:67%;" /></li></ul><h4 id="system-requirements"><a href="#system-requirements" class="headerlink" title="system requirements"></a>system requirements</h4><p>system requirements describe the top-level requirements for a product that contains multiple- that is , a system</p><img src="/images/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230615110654845.png" alt="image-20230615110654845" style="zoom:67%;" /><h4 id="business-rules"><a href="#business-rules" class="headerlink" title="business rules"></a>business rules</h4><img src="/images/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230615110720757.png" alt="image-20230615110720757" style="zoom:67%;" /><ul><li>business rules includes corporate policies , govenment regulations , industry standard , accounting practices , and computional algotithms</li><li>business rules exit outside the boundaries of any specific software systems</li><li>业务规则本身不是软件需求</li><li>它们经常决定系统为了切合相关规则而必须包含哪些功能</li><li><img src="/images/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230615111008092.png" alt="image-20230615111008092" style="zoom:50%;" /></li></ul><h4 id="non-functional-requirements"><a href="#non-functional-requirements" class="headerlink" title="non-functional requirements"></a>non-functional requirements</h4><p>non-functional requirements includes performance goals amd descriptions of quality attributes</p><ul><li>non-functinoal requirements includes <strong>performance goals</strong> and <strong>descriptions of quality attributes</strong></li><li><strong>quality attributes</strong>  describe the product’s characristics in various dimensions that are important either to users or developers</li></ul><h4 id="software-requirements-specification-SRS"><a href="#software-requirements-specification-SRS" class="headerlink" title="software requirements specification (SRS)"></a>software requirements specification (SRS)</h4><ul><li>describes as fully as necessary the expected behavior of the software system</li><li>used in developments , testing , quality assurance, project management, and related project functions</li><li>contains functinal and non-functional requirements</li></ul><h4 id="feature"><a href="#feature" class="headerlink" title="feature"></a>feature</h4><ul><li><strong>a set of  logically related functional requirements</strong> that provides a capability to the user and enables the satisfaction of a business objective</li><li><img src="/images/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230615121117661.png" alt="image-20230615121117661" style="zoom:50%;" /></li><li><img src="/images/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230615121146246.png" alt="image-20230615121146246" style="zoom:50%;" /></li><li><img src="/images/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230615121215489.png" alt="image-20230615121215489" style="zoom:50%;" /></li><li><img src="/images/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230615121316339.png" alt="image-20230615121316339" style="zoom:67%;" /></li></ul><h4 id="what-requirements-are-not"><a href="#what-requirements-are-not" class="headerlink" title="what requirements are not"></a>what requirements are not</h4><ul><li>design detail</li><li>implementation detail</li><li>project plan information</li><li>testing information</li></ul><h4 id="software-engineering-domain"><a href="#software-engineering-domain" class="headerlink" title="software engineering domain"></a>software engineering domain</h4><img src="/images/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230615121651448.png" alt="image-20230615121651448" style="zoom:67%;" /><h4 id="A-requirements-developments-process"><a href="#A-requirements-developments-process" class="headerlink" title="A requirements developments process"></a>A requirements developments process</h4><img src="/images/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230615121826949.png" alt="image-20230615121826949" style="zoom:67%;" /><h5 id="Elicitation"><a href="#Elicitation" class="headerlink" title="Elicitation"></a>Elicitation</h5><img src="/images/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230615121928381.png" alt="image-20230615121928381" style="zoom:50%;" /><h5 id="Requirements-Modeling-and-Analysis"><a href="#Requirements-Modeling-and-Analysis" class="headerlink" title="Requirements Modeling and  Analysis"></a>Requirements Modeling and  Analysis</h5><img src="/images/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230615122011823.png" alt="image-20230615122011823" style="zoom:50%;" /><h5 id="Specification-and-Validation"><a href="#Specification-and-Validation" class="headerlink" title="Specification and Validation"></a>Specification and Validation</h5><img src="/images/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230615122216660.png" alt="image-20230615122216660" style="zoom:50%;" /><h4 id="requirement-management"><a href="#requirement-management" class="headerlink" title="requirement management"></a>requirement management</h4><ul><li><strong>establishing and maintaining</strong> an agreement with the customer on the requirements for the software project</li><li>the <strong>agreement</strong> is embodied in the wirtten <strong>requirements specifications and the models</strong></li></ul><h5 id="major-requirements-management-activities"><a href="#major-requirements-management-activities" class="headerlink" title="major requirements management activities"></a>major requirements management activities</h5><img src="/images/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230615122631024.png" alt="image-20230615122631024" style="zoom:67%;" /><h4 id="boundary-between-development-and-management"><a href="#boundary-between-development-and-management" class="headerlink" title="boundary between development and management"></a>boundary between development and management</h4><img src="/images/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230615122953047.png" alt="image-20230615122953047" style="zoom:67%;" /><h4 id="when-bad-requirements-happen-to-nice-people"><a href="#when-bad-requirements-happen-to-nice-people" class="headerlink" title="when bad requirements happen to nice people"></a>when bad requirements happen to nice people</h4><ul><li>insuffcient user involvement</li><li>creeping user requirements</li><li>ambiguous requirements</li><li>gold plating</li><li>minimal specification</li><li>overlooked user classes</li><li>inaccurate planning</li></ul><h4 id="benefits-from-a-high-quality-requirements-process-star-star-of-david"><a href="#benefits-from-a-high-quality-requirements-process-star-star-of-david" class="headerlink" title="benefits from a high-quality requirements process:star::star_of_david:"></a>benefits from a high-quality requirements process:star::star_of_david:</h4><ul><li><strong>fewer requirements defects</strong></li><li><strong>reduced development rework</strong></li><li><strong>fewer unnecessary features</strong></li><li><strong>lower enhancement costs</strong></li><li><strong>faster development</strong></li><li><strong>fewer miscommunications</strong></li><li><strong>reduced scope creep</strong></li><li><strong>reduced project chaos</strong></li><li><strong>more accurate system-testing estimates</strong></li><li><strong>higher customer and team member satisfaction</strong></li></ul><h3 id="requirements-from-the-customer’s-perspective"><a href="#requirements-from-the-customer’s-perspective" class="headerlink" title="requirements from the customer’s perspective"></a>requirements from the customer’s perspective</h3><h4 id="what-is-customer"><a href="#what-is-customer" class="headerlink" title="what is customer?"></a>what is customer?</h4><p>software customers includes those <strong>project stakeholders</strong> who <strong>request, pay for , select, specify, use or receive the output generated</strong> by a software product</p><h1 id="Chapter-3-4"><a href="#Chapter-3-4" class="headerlink" title="Chapter 3-4"></a>Chapter 3-4</h1><p>:star:Concepts of RE</p><p>:label:Role of requirement analyst</p><p>:fallen_leaf:good practice for RE</p><ol><li>Knowledge</li><li>Project management </li><li>Requirements management</li><li>Elicitation</li><li>Analysis</li><li>Specification</li><li>Validation</li></ol><h3 id="levels-of-requirements-1"><a href="#levels-of-requirements-1" class="headerlink" title="levels of requirements"></a>levels of requirements</h3><img src="/images/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230615124509800.png" alt="image-20230615124509800" style="zoom:67%;" /><img src="/images/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230615124602592.png" alt="image-20230615124602592" style="zoom:67%;" /><h3 id="good-practices-for-RE"><a href="#good-practices-for-RE" class="headerlink" title="good practices for RE"></a>good practices for RE</h3><p>requirements developments process</p><img src="/images/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230615153310911.png" alt="image-20230615153310911" style="zoom:80%;" /><h3 id="role-of-requirements-analyst"><a href="#role-of-requirements-analyst" class="headerlink" title="role of requirements analyst"></a>role of requirements analyst</h3><ul><li>记录员：记录客户需求</li><li>分析员：与客户一起分析问题，完善需求</li><li>引导员：引导客户需求</li></ul><h4 id="Role-of-requirements-analyst"><a href="#Role-of-requirements-analyst" class="headerlink" title="Role of requirements analyst"></a>Role of requirements analyst</h4><ul><li>Project Sponsor : Business requirements</li><li>Project management: Size and complexity information</li><li>User representatives:User requirements </li><li>Testing:functional and non-functional requirements </li><li>Development:functional and non-funtional requirements</li><li>Other stakeholders:Expectations and constraints</li></ul><h4 id="Essential-Analyst-knowledge"><a href="#Essential-Analyst-knowledge" class="headerlink" title="Essential Analyst knowledge"></a>Essential Analyst knowledge</h4><ul><li>breath of knowledge</li><li>apply requirements engineering techniques in the context of various software development life cycles</li><li>rich tool kit techniques available and know when to use which one</li></ul><h1 id="vison-and-document"><a href="#vison-and-document" class="headerlink" title="vison and document"></a>vison and document</h1><h2 id="Why-vison-and-scope"><a href="#Why-vison-and-scope" class="headerlink" title="Why vison and scope"></a>Why vison and scope</h2><p>a clear vison and scope is critical</p><h3 id="definite-business-requirements"><a href="#definite-business-requirements" class="headerlink" title="definite business requirements"></a>definite business requirements</h3><ul><li>业务需求是指的一组信息，描述的是需要，在此需要的指导下，一个或多个项目交付一个解决方案和符合预期的最终业务结果</li><li><strong>业务需求的组成部分：</strong><ol><li><strong>业务机会</strong></li><li><strong>业务目标</strong></li><li><strong>成功标准</strong></li><li><strong>愿景声明</strong></li></ol></li></ul><h3 id="Vision-and-scope"><a href="#Vision-and-scope" class="headerlink" title="Vision and scope"></a>Vision and scope</h3><ol><li><p><strong>Product vision</strong></p><ul><li>align all stakeholders in a common direction</li><li>describes what the product is about and what it eventually could become</li></ul></li><li><p><strong>Project scope</strong></p><ul><li>the statement of scope draws the boundary between what’s in and what’s out</li></ul></li><li><p>vision encompasses the scope for each planned release</p><img src="/images/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230615213727598.png" alt="image-20230615213727598" style="zoom:50%;" /></li></ol><h2 id="What-is-vision-and-scope-document"><a href="#What-is-vision-and-scope-document" class="headerlink" title="What is vision and scope document"></a>What is vision and scope document</h2><ol><li><p>collects the <strong>business</strong> requirements into a single document that sets the stage for the subsequent development work</p></li><li><p>named</p><ul><li>project charter</li><li>business case document</li><li>market requirements document</li></ul></li><li><p>roles involved</p><img src="/images/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230615214134460.png" alt="image-20230615214134460" style="zoom:50%;" /></li><li></li></ol><h2 id="范围可视化表示"><a href="#范围可视化表示" class="headerlink" title="范围可视化表示"></a>范围可视化表示</h2><h1 id="Requirements-Elicitation-6-7"><a href="#Requirements-Elicitation-6-7" class="headerlink" title="Requirements Elicitation 6-7"></a>Requirements Elicitation 6-7</h1><h2 id="Finding-the-Voice-of-the-Customer"><a href="#Finding-the-Voice-of-the-Customer" class="headerlink" title="Finding the Voice of the Customer"></a>Finding the Voice of the Customer</h2><p>To find the voice of the customer, take the following steps :</p><img src="/images/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230616215849877.png" alt="image-20230616215849877" style="zoom:67%;" /><h3 id="User-classes-imp-star-of-david-dizzy"><a href="#User-classes-imp-star-of-david-dizzy" class="headerlink" title="User classes:imp::star_of_david::dizzy:"></a>User classes:imp::star_of_david::dizzy:</h3><img src="/images/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230616220202979.png" alt="image-20230616220202979" style="zoom:67%;" /><ul><li>他们使用的平台</li><li>他们的母语</li><li>他们是直接还是间接和系统交互</li></ul><h3 id="Some-questions"><a href="#Some-questions" class="headerlink" title="Some questions"></a>Some questions</h3><ul><li>Does every user class equal important to you </li><li>does each user class have its own set of requirements</li><li>is every user class a human being(可能是代理软件)</li></ul><h3 id="User-profiles"><a href="#User-profiles" class="headerlink" title="User profiles"></a>User profiles</h3><h3 id="An-example-about-user-classes"><a href="#An-example-about-user-classes" class="headerlink" title="An example about user classes"></a>An example about user classes</h3><img src="/images/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230616220903610.png" alt="image-20230616220903610" style="zoom:67%;" /><h3 id="How-to-deal-with-requirements-conflicts"><a href="#How-to-deal-with-requirements-conflicts" class="headerlink" title="How to deal with requirements conflicts"></a>How to deal with requirements conflicts</h3><h3 id="Who-makes-the-decisions"><a href="#Who-makes-the-decisions" class="headerlink" title="Who makes the decisions"></a>Who makes the decisions</h3><img src="/images/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230616221140423.png" alt="image-20230616221140423" style="zoom:67%;" /><h2 id="Hear-the-voice-of-the-Customer"><a href="#Hear-the-voice-of-the-Customer" class="headerlink" title="Hear the voice of the Customer"></a>Hear the voice of the Customer</h2><p>Begin by planning the project’s requirements elicitation activities </p><h3 id="Cyclic-nature-of-requirements-elicitation-analysis-and-specification"><a href="#Cyclic-nature-of-requirements-elicitation-analysis-and-specification" class="headerlink" title="Cyclic nature of requirements elicitation, analysis and  specification"></a>Cyclic nature of requirements elicitation, analysis and  specification</h3><img src="/images/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230616221556627.png" alt="image-20230616221556627" style="zoom:50%;" /><h3 id="Activities-for-a-single-requirements-elicitation-session"><a href="#Activities-for-a-single-requirements-elicitation-session" class="headerlink" title="Activities for a single requirements elicitation session"></a>Activities for a single requirements elicitation session</h3><img src="/images/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230616222028191.png" alt="image-20230616222028191" style="zoom:67%;" /><h3 id="需求获取技巧-star-star2-sailboat"><a href="#需求获取技巧-star-star2-sailboat" class="headerlink" title="需求获取技巧:star::star2::sailboat:"></a>需求获取技巧:star::star2::sailboat:</h3><ol><li><p>访谈</p><ul><li>建立融洽的关系</li><li>不脱离范围</li><li>提前准备好问题和稻草人模型</li><li>提出看法</li><li>主动倾听</li></ul></li><li><p>工作坊</p></li><li><p>焦点小组</p><img src="/images/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230616222352914.png" alt="image-20230616222352914" style="zoom:50%;" /></li><li><p>观察</p><p>选择<strong>重要或高风险</strong>的任务以及若干个用户类别来观察</p></li><li><p>问卷调查</p><p>针对大群体用户进行调查并了解其需要的方式，最大的问题是问卷设计</p></li><li><p><strong>系统接口分析</strong></p><ul><li><p><strong>检查哪些系统与你的系统相关联</strong></p></li><li><p><strong>解释的功能需求涉及系统之间的数据和服务交换</strong></p></li><li><p><strong>关联图和生态系统图</strong></p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230616222707343.png" alt="image-20230616222707343"></p></li></ul></li><li><p>用户界面分析</p><ul><li>最好与现有系统直接交互</li><li>屏幕截图</li><li>找出潜在特性</li></ul></li><li><p>文档分析</p><ul><li>最有用的文档包括需求规格说明、业务过程、课程学习总结以及现有的或者类似程序的用户手册</li></ul></li></ol><h3 id="制定项目需求获取计划"><a href="#制定项目需求获取计划" class="headerlink" title="制定项目需求获取计划"></a>制定项目需求获取计划</h3><img src="/images/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230616223222117.png" alt="image-20230616223222117" style="zoom:50%;" /><h3 id="Some-cautions-about-Elicitation"><a href="#Some-cautions-about-Elicitation" class="headerlink" title="Some cautions about Elicitation"></a>Some cautions about Elicitation</h3><img src="/images/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230616223826720.png" alt="image-20230616223826720" style="zoom:50%;" /><h3 id="Finding-missing-requirements"><a href="#Finding-missing-requirements" class="headerlink" title="Finding missing requirements"></a>Finding missing requirements</h3><img src="/images/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230616224622827.png" alt="image-20230616224622827" style="zoom:50%;" /><h3 id="A-CRUD-matrix-star"><a href="#A-CRUD-matrix-star" class="headerlink" title="A CRUD matrix :star:"></a>A CRUD matrix :star:</h3><img src="/images/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230616224651877.png" alt="image-20230616224651877" style="zoom:50%;" /><img src="/images/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230616224719224.png" alt="image-20230616224719224" style="zoom:50%;" /><h3 id="How-do-you-know-when-you’re-done"><a href="#How-do-you-know-when-you’re-done" class="headerlink" title="How do you know when you’re done?"></a>How do you know when you’re done?</h3><p>create a **checklist ** of common functional areas to consider for your projects</p><h3 id="Classfying-Customer-Input-star"><a href="#Classfying-Customer-Input-star" class="headerlink" title="Classfying Customer Input :star:"></a>Classfying Customer Input :star:</h3><img src="/images/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230616225509336.png" alt="image-20230616225509336" style="zoom:67%;" /><h4 id="Business-requirements"><a href="#Business-requirements" class="headerlink" title="Business requirements"></a>Business requirements</h4><p>Anything that describes the <strong>financial,marketplace,or other business benefit</strong> that either <strong>customers or the developing organization</strong> wish to <strong>gain</strong> from the product is a business requirement </p><img src="/images/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230616225802172.png" alt="image-20230616225802172" style="zoom:50%;" /><h4 id="Business-Rules"><a href="#Business-Rules" class="headerlink" title="Business Rules"></a>Business Rules</h4><img src="/images/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230616225920738.png" alt="image-20230616225920738" style="zoom:50%;" /><h4 id="Functional-requirements"><a href="#Functional-requirements" class="headerlink" title="Functional requirements"></a>Functional requirements</h4><ul><li>describes the obserable behaviors </li><li>derived from system requirements, user requirements, business rules, and other sources make up the bulk of the SRS</li></ul><img src="/images/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230616230204646.png" alt="image-20230616230204646" style="zoom:50%;" /><h4 id="External-interface-requirements"><a href="#External-interface-requirements" class="headerlink" title="External interface requirements"></a>External interface requirements</h4><img src="/images/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230616230342337.png" alt="image-20230616230342337" style="zoom:50%;" /><h4 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h4><ul><li>design and implementation constraints legitimately restrict the options available to the developer</li><li>devices with embedded software often must respect physical constraints such as size , weight , and interface connections</li><li>Record it and respect its validity</li></ul><img src="/images/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230616230709354.png" alt="image-20230616230709354" style="zoom:67%;" /><img src="/images/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230616230809548.png" alt="image-20230616230809548" style="zoom:67%;" /><h4 id="Data-definitions"><a href="#Data-definitions" class="headerlink" title="Data definitions"></a>Data definitions</h4><img src="/images/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230616230928277.png" alt="image-20230616230928277" style="zoom:67%;" /><h4 id="Solution-ideas"><a href="#Solution-ideas" class="headerlink" title="Solution ideas"></a>Solution ideas</h4><img src="/images/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230616231229772.png" alt="image-20230616231229772" style="zoom:67%;" /><h1 id="Requirements-Elicitation-8-9"><a href="#Requirements-Elicitation-8-9" class="headerlink" title="Requirements Elicitation 8-9"></a>Requirements Elicitation 8-9</h1><h2 id="Understanding-user-requirements-use-case-amp-user-story"><a href="#Understanding-user-requirements-use-case-amp-user-story" class="headerlink" title="Understanding user requirements(use case &amp; user story)"></a>Understanding user requirements(use case &amp; user story)</h2><h3 id="常见的需求抽取方法"><a href="#常见的需求抽取方法" class="headerlink" title="常见的需求抽取方法"></a>常见的需求抽取方法</h3><ul><li>以用户为中心</li><li>以使用为中心</li><li>场景、用例、用户故事</li></ul><h3 id="用户故事"><a href="#用户故事" class="headerlink" title="用户故事"></a>用户故事</h3><img src="/images/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230617094220383.png" alt="image-20230617094220383" style="zoom:67%;" /><h4 id="example"><a href="#example" class="headerlink" title="example"></a>example</h4><p><img src="/images/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230617094250986.png" alt="image-20230617094250986"></p><h3 id="用例和用户故事"><a href="#用例和用户故事" class="headerlink" title="用例和用户故事"></a>用例和用户故事</h3><img src="/images/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230617094329690.png" alt="image-20230617094329690" style="zoom:67%;" /><p>:star::star:</p><h4 id="什么时候使用用例和用户故事"><a href="#什么时候使用用例和用户故事" class="headerlink" title="什么时候使用用例和用户故事"></a>什么时候使用用例和用户故事</h4><img src="/images/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230617094434423.png" alt="image-20230617094434423" style="zoom:67%;" /><h4 id="用例和用户故事的不同走向"><a href="#用例和用户故事的不同走向" class="headerlink" title="用例和用户故事的不同走向"></a>用例和用户故事的不同走向</h4><img src="/images/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230617094638818.png" alt="image-20230617094638818" style="zoom:67%;" /><p>use case model&#x3D;use case diagram+use case description</p><h3 id="Good-use-case-test"><a href="#Good-use-case-test" class="headerlink" title="Good use case test"></a>Good use case test</h3><ul><li>Boss test</li><li>Elementary Business Process(EBP)</li><li>Size test</li></ul><h3 id="stadium-用例和业务规则的关系"><a href="#stadium-用例和业务规则的关系" class="headerlink" title=":stadium:用例和业务规则的关系"></a>:stadium:用例和业务规则的关系</h3><img src="/images/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230617095138071.png" alt="image-20230617095138071" style="zoom:50%;" /><h3 id="fallen-leaf-use-case-and-functional-requirements"><a href="#fallen-leaf-use-case-and-functional-requirements" class="headerlink" title=":fallen_leaf:use case and functional requirements"></a>:fallen_leaf:use case and functional requirements</h3><img src="/images/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230617095305954.png" alt="image-20230617095305954" style="zoom:50%;" /><h3 id="How-to-document-the-functional-requirements-associated-with-a-use-case"><a href="#How-to-document-the-functional-requirements-associated-with-a-use-case" class="headerlink" title="How to document the functional requirements associated with a use case"></a>How to document the functional requirements associated with a use case</h3><img src="/images/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230617095451595.png" alt="image-20230617095451595" style="zoom:50%;" /><h3 id="Benefits-of-use-cases"><a href="#Benefits-of-use-cases" class="headerlink" title="Benefits of use cases"></a>Benefits of use cases</h3><ul><li><strong>task-centric</strong> and <strong>user-centric</strong> perspective</li><li>helps with requirements <strong>prioritization</strong></li><li>reveals some of the important <strong>domain objects and their responsibilities</strong> to each other</li></ul><h4 id="avoid"><a href="#avoid" class="headerlink" title="avoid"></a>avoid</h4><ul><li>too many use cases</li><li>highly complex use cases</li><li>including user interface design</li><li>including data definitions </li><li>users’ can’t understand</li><li>excessive use of includes and extends relationships</li></ul><h2 id="playing-by-the-rules-type-of-rules"><a href="#playing-by-the-rules-type-of-rules" class="headerlink" title="playing by the rules (type of rules)"></a>playing by the rules (type of rules)</h2><h3 id="what-is-business-rules"><a href="#what-is-business-rules" class="headerlink" title="what is business rules"></a>what is business rules</h3><img src="/images/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230617100105467.png" alt="image-20230617100105467" style="zoom:67%;" /><h3 id="规则和软件的关系"><a href="#规则和软件的关系" class="headerlink" title="规则和软件的关系"></a>规则和软件的关系</h3><img src="/images/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230617100228739.png" alt="image-20230617100228739" style="zoom:67%;" /><h3 id="How-business-rules-can-influence-various-types-of-requirements"><a href="#How-business-rules-can-influence-various-types-of-requirements" class="headerlink" title="How business rules can influence various types of requirements"></a>How business rules can influence various types of requirements</h3><img src="/images/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230617112811805.png" alt="image-20230617112811805" style="zoom:80%;" /><h3 id="业务规则分类法"><a href="#业务规则分类法" class="headerlink" title="业务规则分类法"></a>业务规则分类法</h3><h4 id=""><a href="#" class="headerlink" title=""></a><img src="/images/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230617112934482.png" alt="image-20230617112934482" style="zoom:67%;" /></h4><h3 id="The-rules-of-the-Business-star-star-star-star"><a href="#The-rules-of-the-Business-star-star-star-star" class="headerlink" title="The rules of the Business:star::star::star::star:"></a>The rules of the Business:star::star::star::star:</h3><p><strong>A business rule is a statement that defines or constraints some aspect of the business</strong></p><p>a business rule is a statement that defines or constraints some aspect of the business</p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230617113124340.png" alt="image-20230617113124340"></p><h4 id="Facts-true-about-the-business"><a href="#Facts-true-about-the-business" class="headerlink" title="Facts(true about the business)"></a>Facts(true about the business)</h4><img src="/images/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230617113204922.png" alt="image-20230617113204922" style="zoom:67%;" /><h4 id="Constraints-restrict-the-actions-that-the-system-or-its-users-may-perform"><a href="#Constraints-restrict-the-actions-that-the-system-or-its-users-may-perform" class="headerlink" title="Constraints(restrict the actions that the system or its users may perform)"></a>Constraints(restrict the actions that the system or its users may perform)</h4><img src="/images/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230617113248263.png" alt="image-20230617113248263" style="zoom:67%;" /><p>业务规则约束即使不能直接映射到功能，也能为软件开发传递一些隐性的信息 </p><p>约束性业务规则有时可以用<strong>角色以及授权矩阵</strong>来表示：</p><img src="/images/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230617113431325.png" alt="image-20230617113431325" style="zoom:67%;" /><h4 id="Action-Enablers-trigger-some-activity"><a href="#Action-Enablers-trigger-some-activity" class="headerlink" title="Action Enablers(trigger some activity)"></a>Action Enablers(trigger some activity)</h4><img src="/images/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230617113510447.png" alt="image-20230617113510447" style="zoom:67%;" /><h4 id="Inferences-establish-some-new-knowledge"><a href="#Inferences-establish-some-new-knowledge" class="headerlink" title="Inferences(establish some new knowledge)"></a>Inferences(establish some new knowledge)</h4><img src="/images/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230617113550622.png" alt="image-20230617113550622" style="zoom:67%;" /><h4 id="Computations-are-performed-using-specific-mathematical-formulas-or-algorithms"><a href="#Computations-are-performed-using-specific-mathematical-formulas-or-algorithms" class="headerlink" title="Computations(are performed using specific mathematical formulas or algorithms)"></a>Computations(are performed using specific mathematical formulas or algorithms)</h4><img src="/images/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230617113806324.png" alt="image-20230617113806324" style="zoom:67%;" /><h4 id="使用表格描述运算类业务规则"><a href="#使用表格描述运算类业务规则" class="headerlink" title="使用表格描述运算类业务规则"></a>使用表格描述运算类业务规则</h4><img src="/images/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230617113850316.png" alt="image-20230617113850316" style="zoom:50%;" /><h4 id="原子业务规则"><a href="#原子业务规则" class="headerlink" title="原子业务规则"></a>原子业务规则</h4><img src="/images/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230617113928321.png" alt="image-20230617113928321" style="zoom:50%;" /><img src="/images/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230617113949892.png" alt="image-20230617113949892" style="zoom:50%;" /><h3 id="documenting-business-rules"><a href="#documenting-business-rules" class="headerlink" title="documenting business rules"></a>documenting business rules</h3><h4 id="Sample-Business-Rules-Catalog"><a href="#Sample-Business-Rules-Catalog" class="headerlink" title="Sample Business Rules Catalog"></a>Sample Business Rules Catalog</h4><p><img src="/images/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230617114054613.png" alt="image-20230617114054613"></p><h4 id="Discovering-Business-Rules"><a href="#Discovering-Business-Rules" class="headerlink" title="Discovering Business Rules"></a>Discovering Business Rules</h4><p>Discovering business rules by asking questions from different perspectives</p><img src="/images/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230617114225310.png" alt="image-20230617114225310" style="zoom:67%;" /><h4 id="business-rules-and-req"><a href="#business-rules-and-req" class="headerlink" title="business rules and req"></a>business rules and req</h4><ul><li>Determine whick business rule must be implemented in the software</li><li>some rules will lead to <strong>use case</strong>s and hence to <strong>functinal requirements</strong> that enforces the rule</li></ul><img src="/images/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230617114418380.png" alt="image-20230617114418380" style="zoom:50%;" /><h4 id="How-to-define-the-relation"><a href="#How-to-define-the-relation" class="headerlink" title="How to define the relation?"></a>How to define the relation?</h4><p>define the links between a functional requirement and its parent business rules in the following ways:</p><img src="/images/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230617114551171.png" alt="image-20230617114551171" style="zoom:67%;" /><h1 id="Document-chapter-10-11"><a href="#Document-chapter-10-11" class="headerlink" title="Document chapter 10-11"></a>Document chapter 10-11</h1><h1 id="requirements-modeling"><a href="#requirements-modeling" class="headerlink" title="requirements modeling"></a>requirements modeling</h1><h1 id="Specifying-data-requirements"><a href="#Specifying-data-requirements" class="headerlink" title="Specifying data requirements"></a>Specifying data requirements</h1><h1 id="beyond-functionality"><a href="#beyond-functionality" class="headerlink" title="beyond functionality"></a>beyond functionality</h1><h1 id="Requirements-validation"><a href="#Requirements-validation" class="headerlink" title="Requirements validation"></a>Requirements validation</h1><h1 id="requirements-validation"><a href="#requirements-validation" class="headerlink" title="requirements validation"></a>requirements validation</h1><h2 id="risk-reduction-through-prototying"><a href="#risk-reduction-through-prototying" class="headerlink" title="risk reduction through prototying"></a>risk reduction through prototying</h2><h3 id="Prototyping-major-purpose"><a href="#Prototyping-major-purpose" class="headerlink" title="Prototyping major purpose"></a>Prototyping major purpose</h3><img src="/images/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230617125257146.png" alt="image-20230617125257146" style="zoom: 67%;" /><h3 id="when-to-use-prototyping"><a href="#when-to-use-prototyping" class="headerlink" title="when to use prototyping?"></a>when to use prototyping?</h3><img src="/images/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230617125340410.png" alt="image-20230617125340410" style="zoom:67%;" /><h3 id="Overview-concepts-used-in-prototyping"><a href="#Overview-concepts-used-in-prototyping" class="headerlink" title="Overview-concepts used in prototyping"></a>Overview-concepts used in prototyping</h3><h4 id="Mock-ups-水平原型"><a href="#Mock-ups-水平原型" class="headerlink" title="Mock-ups(水平原型)"></a>Mock-ups(水平原型)</h4><img src="/images/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230617125711715.png" alt="image-20230617125711715" style="zoom:67%;" /><h4 id="Proof-of-Concepts-垂直原型"><a href="#Proof-of-Concepts-垂直原型" class="headerlink" title="Proof of Concepts(垂直原型)"></a>Proof of Concepts(垂直原型)</h4><img src="/images/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230617130019996.png" alt="image-20230617130019996" style="zoom:67%;" /><img src="/images/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230617130119308.png" alt="image-20230617130119308" style="zoom:67%;" /><h4 id="Throwaway-Prototypes-抛弃式原型"><a href="#Throwaway-Prototypes-抛弃式原型" class="headerlink" title="Throwaway Prototypes(抛弃式原型)"></a>Throwaway Prototypes(抛弃式原型)</h4><img src="/images/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230617130158838.png" alt="image-20230617130158838" style="zoom:67%;" /><h4 id="Evolutionary-Prototypes-演化式模型"><a href="#Evolutionary-Prototypes-演化式模型" class="headerlink" title="Evolutionary Prototypes(演化式模型)"></a>Evolutionary Prototypes(演化式模型)</h4><img src="/images/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230617130453511.png" alt="image-20230617130453511" style="zoom:67%;" /><h4 id="Paper-and-Electionic-Prototypes-纸和电子原型"><a href="#Paper-and-Electionic-Prototypes-纸和电子原型" class="headerlink" title="Paper and Electionic Prototypes(纸和电子原型)"></a>Paper and Electionic Prototypes(纸和电子原型)</h4><img src="/images/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230617130544560.png" alt="image-20230617130544560" style="zoom:67%;" /><img src="/images/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230617130620422.png" alt="image-20230617130620422" style="zoom:67%;" /><h3 id="working-with-prototypes"><a href="#working-with-prototypes" class="headerlink" title="working with prototypes"></a>working with prototypes</h3><h4 id="Activity-sequence-from-use-cases-to-user-interface-design-using-a-throwaway-prototype"><a href="#Activity-sequence-from-use-cases-to-user-interface-design-using-a-throwaway-prototype" class="headerlink" title="Activity sequence from use cases to user interface design using a throwaway prototype"></a>Activity sequence from use cases to user interface design using a throwaway prototype</h4><img src="/images/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230617130746237.png" alt="image-20230617130746237" style="zoom:67%;" /><img src="/images/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230617130810743.png" alt="image-20230617130810743" style="zoom:50%;" /><img src="/images/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230617130825734.png" alt="image-20230617130825734" style="zoom:50%;" /><h3 id="Prototype-Evaluation"><a href="#Prototype-Evaluation" class="headerlink" title="Prototype Evaluation"></a>Prototype Evaluation</h3><img src="/images/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230617213847296.png" alt="image-20230617213847296" style="zoom:67%;" /><h3 id="The-risks-of-Prototyping"><a href="#The-risks-of-Prototyping" class="headerlink" title="The risks of Prototyping"></a>The risks of Prototyping</h3><img src="/images/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230617213925185.png" alt="image-20230617213925185" style="zoom:67%;" /><h3 id="Prototyping-success-factors"><a href="#Prototyping-success-factors" class="headerlink" title="Prototyping success factors"></a>Prototyping success factors</h3><img src="/images/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230617214113760.png" alt="image-20230617214113760" style="zoom:67%;" /><img src="/images/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230617214149914.png" alt="image-20230617214149914" style="zoom:67%;" /><h2 id="setting-requirements-priorities"><a href="#setting-requirements-priorities" class="headerlink" title="setting requirements priorities"></a>setting requirements priorities</h2><h3 id="为什么要设置项目的优先级"><a href="#为什么要设置项目的优先级" class="headerlink" title="为什么要设置项目的优先级"></a>为什么要设置项目的优先级</h3><p>Prioritization is a way to deal with competing demands for <strong>limited resources.</strong></p><h3 id="如何设定项目的优先级"><a href="#如何设定项目的优先级" class="headerlink" title="如何设定项目的优先级"></a>如何设定项目的优先级</h3><h4 id="some-prioritization-techniques"><a href="#some-prioritization-techniques" class="headerlink" title="some prioritization techniques"></a>some prioritization techniques</h4><h5 id="requirements-prioritization-based-on-importance-and-urgency"><a href="#requirements-prioritization-based-on-importance-and-urgency" class="headerlink" title="requirements prioritization based on importance and urgency"></a>requirements prioritization based on importance and urgency</h5><img src="/images/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230618113931578.png" alt="image-20230618113931578" style="zoom:67%;" /><h2 id="validating-the-requirements"><a href="#validating-the-requirements" class="headerlink" title="validating the requirements"></a>validating the requirements</h2><h3 id="The-V-model-of-software-development"><a href="#The-V-model-of-software-development" class="headerlink" title="The V model of software development"></a>The V model of software development</h3><img src="/images/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230618114057283.png" alt="image-20230618114057283" style="zoom:67%;" /><h3 id="Target-of-Validation"><a href="#Target-of-Validation" class="headerlink" title="Target of Validation"></a>Target of Validation</h3><img src="/images/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230618114253999.png" alt="image-20230618114253999" style="zoom:67%;" /><p>To ensure the SRS is correct&#x2F;satisfy various needs&#x2F;complete and of high quality&#x2F;consistent&#x2F;provide a adequate basis to proceed with design and construction&#x2F;software requirements are correctly derived from system requirements,business rules or other resources.</p><h3 id="Review-Requirements"><a href="#Review-Requirements" class="headerlink" title="Review Requirements"></a>Review Requirements</h3><img src="/images/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230618114608435.png" alt="image-20230618114608435" style="zoom:67%;" /><ul><li>peer deskcheck </li><li>passaround</li><li>walkthrough</li><li>inspection</li></ul><h3 id="Inspection-stages"><a href="#Inspection-stages" class="headerlink" title="Inspection stages"></a>Inspection stages</h3><img src="/images/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230618114956214.png" alt="image-20230618114956214" style="zoom:67%;" /><h3 id="defect-checklists"><a href="#defect-checklists" class="headerlink" title="defect checklists"></a>defect checklists</h3><p>develop a defect checklist for each type of SRS</p><h3 id="requirements-review-challenges"><a href="#requirements-review-challenges" class="headerlink" title="requirements review challenges"></a>requirements review challenges</h3><img src="/images/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230618115159391.png" alt="image-20230618115159391" style="zoom:67%;" /><p>潜在问题：</p><img src="/images/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230618115235083.png" alt="image-20230618115235083" style="zoom:67%;" /><h1 id="requirements-management"><a href="#requirements-management" class="headerlink" title="requirements management"></a>requirements management</h1><p>软件需求的管理要落实到每条需求</p><p>After Eclicitation, analysis, Specification, Validation,we have:</p><p>vision and scope document</p><p>use-case</p><p>SRS</p><p>data dictionary</p><p>analysis model</p><p>After Elicitation, analysis, Specification, Validation，we  have :</p><ul><li>vision and scope document</li><li>use-case</li><li>SRS</li><li>data dictionary</li><li>analysis model</li></ul><p>The above artifacts define the <strong>baseline</strong> for the development</p><h2 id="The-requirements-Baseline"><a href="#The-requirements-Baseline" class="headerlink" title="The requirements Baseline"></a>The requirements Baseline</h2><h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><p>The requirements baseline is the set of functinoal and non-functional requirements that the development team has committed to implement in a specific release.</p><img src="/images/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230617122335275.png" alt="image-20230617122335275" style="zoom:67%;" /><h3 id="boundary-between-development-and-management-1"><a href="#boundary-between-development-and-management-1" class="headerlink" title="boundary between  development and management"></a>boundary between  development and management</h3><p><img src="/images/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230617122830186.png" alt="image-20230617122830186"></p><h3 id="star-major-requirements-management-activities"><a href="#star-major-requirements-management-activities" class="headerlink" title=":star:major requirements management activities"></a>:star:major requirements management activities</h3><img src="/images/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230617123107168.png" alt="image-20230617123107168" style="zoom:67%;" /><h3 id="根源：需求变更"><a href="#根源：需求变更" class="headerlink" title="根源：需求变更"></a>根源：需求变更</h3><p>changes affects a lot:</p><p>The project can respond to new or changed requirements:</p><img src="/images/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230617123240713.png" alt="image-20230617123240713" style="zoom:67%;" /><h2 id="Change-happens"><a href="#Change-happens" class="headerlink" title="Change happens"></a>Change happens</h2><ul><li>requirement change is not negative</li><li>requirement change is inevitable<ul><li>enhancement</li><li>business process changes</li></ul></li><li>Practitioners need to develop appropriate techniques for handling changes</li></ul><h2 id="Sample-template-for-a-change-control-process-description"><a href="#Sample-template-for-a-change-control-process-description" class="headerlink" title="Sample template for a change-control process description"></a>Sample template for a change-control process description</h2><img src="/images/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230617123608968.png" alt="image-20230617123608968" style="zoom:67%;" /><h3 id="Roles-and-responsibilities"><a href="#Roles-and-responsibilities" class="headerlink" title="Roles and responsibilities"></a>Roles and responsibilities</h3><ul><li>CCB Chair : Chairperson of the <strong>change control board</strong>;generally has final decison-making authority if the CCB does not reach agreement; selects the Evaluater and Modifier for each change request</li><li>CCB:<strong>The group</strong> that decides to <strong>approve or reject</strong> proposed changes for a specific project</li><li>Evaluater:<img src="/images/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230617124357304.png" alt="image-20230617124357304" style="zoom:50%;" /></li><li>Modifier:<img src="/images/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230617124412102.png" alt="image-20230617124412102" style="zoom:50%;" /></li><li>Originator: someone who submits a new change request</li><li>Request Receiver: The person to whom new requests are submitted</li><li>Verifier:The person who determines whether the changes was made correctly</li></ul><p>CCB Chair</p><p>CCB</p><p>Evaluater</p><p>Modifier</p><p>Originator</p><p>Request Receiver</p><p>Verifier</p><h3 id="Change-Request-Status"><a href="#Change-Request-Status" class="headerlink" title="Change-Request Status"></a>Change-Request Status</h3><p>State-transition for a change request:</p><img src="/images/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230617124835746.png" alt="image-20230617124835746" style="zoom:80%;" />]]></content>
    
    
    <categories>
      
      <category>软件需求</category>
      
    </categories>
    
    
    <tags>
      
      <tag>期末复习</tag>
      
      <tag>软件需求</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>编译原理——第二章</title>
    <link href="/2023/03/12/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E2%80%94%E2%80%94%E7%AC%AC%E4%BA%8C%E7%AB%A0/"/>
    <url>/2023/03/12/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E2%80%94%E2%80%94%E7%AC%AC%E4%BA%8C%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="编译原理——第二章"><a href="#编译原理——第二章" class="headerlink" title="编译原理——第二章"></a>编译原理——第二章</h1><h2 id="2-2-文法定义"><a href="#2-2-文法定义" class="headerlink" title="2.2 文法定义"></a>2.2 文法定义</h2><h3 id="CFG的组成"><a href="#CFG的组成" class="headerlink" title="CFG的组成"></a>CFG的组成</h3><p>一个CFG（Context-free grammar ）被用来描述一个语言的语法结构，一个CFG由下列四个元素组成：</p><ul><li>一个<strong>终结符号（token &#x2F; terminal）集合</strong>，有时也称为“词法单元”，终结符号是该文法所定义的语言的基本符号的集合</li><li>一个<strong>非终结符号（non-terminal）集合</strong>，有时也称为“语法变量”，每个非终结符号表示一个终结符号串的集合</li><li>一个<strong>产生式（Production Rule）集合</strong>，其中每个产生式包括一个称为“<strong>产生式头</strong>”的非终结符号，一个箭头和一个称为“<strong>产生式体</strong>”的由<strong>终结符号和非终结符号</strong>组成的序列。产生式主要用来表示某个构造的某种书写方式。如果产生式头非终结符号代表一个构造，那么该产生式体就代表了该构造的一种书写方式</li><li>指定一个非终结符号为<strong>开始符号</strong></li></ul><h3 id="CFG-Example"><a href="#CFG-Example" class="headerlink" title="CFG Example"></a>CFG Example</h3><img src="/C:/Users/zhy19/AppData/Roaming/Typora/typora-user-images/image-20230312135635937.png" alt="image-20230312135635937" style="zoom:67%;" /><h3 id="Grammars-are-used-to-derived-strings"><a href="#Grammars-are-used-to-derived-strings" class="headerlink" title="Grammars are used to derived strings"></a>Grammars are used to derived strings</h3><img src="/C:/Users/zhy19/AppData/Roaming/Typora/typora-user-images/image-20230312135716803.png" alt="image-20230312135716803" style="zoom:67%;" /><h3 id="语法分析树（Parse-Tree）"><a href="#语法分析树（Parse-Tree）" class="headerlink" title="语法分析树（Parse Tree）"></a>语法分析树（Parse Tree）</h3><img src="/C:/Users/zhy19/AppData/Roaming/Typora/typora-user-images/image-20230312135740421.png" alt="image-20230312135740421" style="zoom:67%;" /><h3 id="一个语法分析树的构成"><a href="#一个语法分析树的构成" class="headerlink" title="一个语法分析树的构成"></a>一个语法分析树的构成</h3><p>给定一个上下文无关文法，该文法的一颗语法分析树是具有以下性质的树：</p><ul><li><strong>根节点</strong>的标号为文法的<strong>开始符号</strong></li><li>每个<strong>叶子节点</strong>的标号为一个<strong>终结符号或e</strong></li><li>每个<strong>内部节点</strong>的标号为一个<strong>非终结符号</strong></li><li>如果非终结符号<strong>A</strong>是某个<strong>内部节点</strong>的标号，并且它的子节点的标号从左到右分别是$X_1,X_2,…,X_n$，那么必然存在产生式$A\rightarrow X_1X_2X_3…X_n$，其中$X_1,X_2,…,X_n$既可以是终结符号也可以是非终结符号。作为一个特殊情况，如果$A\rightarrow e$是一个产生式，那么一个标号为A的节点可以只有一个标号为e的子节点</li></ul><h3 id="二义性-ambiguity"><a href="#二义性-ambiguity" class="headerlink" title="二义性(ambiguity)"></a>二义性(ambiguity)</h3><img src="/C:/Users/zhy19/AppData/Roaming/Typora/typora-user-images/image-20230312140651480.png" alt="image-20230312140651480" style="zoom:67%;" /><p>要证明一个文法具有二义性，我们只需要找到一个终结字符串,说明它是两颗以上语法分析树的结果</p><h3 id="结合性（associativity-of-operators）"><a href="#结合性（associativity-of-operators）" class="headerlink" title="结合性（associativity of operators）"></a>结合性（associativity of operators）</h3><img src="/images/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E2%80%94%E2%80%94%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20230312141125387.png" alt="image-20230312141125387" style="zoom:67%;" /><p>左边是左结合，左结合是指当一个运算分量左右两侧都有“+”时，它属于左边的运算符，+-*&#x2F;都是左结合的；指数运算和&#x3D;是右结合的</p><h3 id="Embedding-Associativity"><a href="#Embedding-Associativity" class="headerlink" title="Embedding Associativity"></a>Embedding Associativity</h3><p>The language of arithmetic expressions with + -:</p><ul><li><p>(ambiguous) grammar that does not enforce associaticity</p><img src="/images/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E2%80%94%E2%80%94%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20230312142158334.png" alt="image-20230312142158334" style="zoom: 80%;" /></li><li><p>non-ambiguous grammar enforcing left associability (parse tree will grow to the left)</p><img src="/images/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E2%80%94%E2%80%94%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20230312142238027.png" alt="image-20230312142238027" style="zoom: 80%;" /></li><li><p>non-ambiguous grammar enforcing right associability(parse tree will grow to the right)</p></li></ul><img src="/images/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E2%80%94%E2%80%94%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20230312142304187.png" alt="image-20230312142304187" style="zoom:80%;" /><h3 id="运算符优先性（Operator-Precedence）"><a href="#运算符优先性（Operator-Precedence）" class="headerlink" title="运算符优先性（Operator Precedence）"></a>运算符优先性（Operator Precedence）</h3><p>考虑具有最高优先级的二目运算符*和&#x2F;。由于这些运算符是左结合的，因此其产生式和左结合列表的产生式类似：</p><img src="/images/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E2%80%94%E2%80%94%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20230312143004708.png" alt="image-20230312143004708" style="zoom:80%;" /><p>类似地，expr生成由加减运算符分隔地term列表：</p><img src="/images/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E2%80%94%E2%80%94%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20230312143037076.png" alt="image-20230312143037076" style="zoom:80%;" /><p>因此得到最终的文法为：</p><img src="/images/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E2%80%94%E2%80%94%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20230312143126218.png" alt="image-20230312143126218" style="zoom:80%;" /><p>表达式的基本单元是数位和带括号的表达式</p><h2 id="2-3语法制导翻译（Syntax-Directed-Translation）"><a href="#2-3语法制导翻译（Syntax-Directed-Translation）" class="headerlink" title="2.3语法制导翻译（Syntax-Directed Translation）"></a>2.3语法制导翻译（Syntax-Directed Translation）</h2><p>语法制导翻译是通过向一个文法的产生式附加一些规则或程序片段得到。</p><p>例如：$expr\rightarrow expr_1 +term$，我们可以利用expr的结构，用如下的伪代码来翻译expr：</p><img src="/images/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E2%80%94%E2%80%94%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20230312144102280.png" alt="image-20230312144102280" style="zoom:80%;" /><p>为expr构造一棵语法分析树，我们首先建立expr1和term的语法分析树，然后处理+运算符并构造一个和此运算符对应的结点。</p><p>两个相关概念：</p><ul><li>属性</li><li>（语法制导的）翻译方案（translation scheme）：翻译方案是将<strong>程序片段</strong>附加到一个文法的各个产生式上的表示法。当<strong>在语法分析过程中使用一个产生式时，相应的程序片段就会执行</strong>。这些程序片段的执行效果按照<strong>语法分析过程的顺序</strong>组合起来，得到的结果就是这次<strong>分析&#x2F;综合过程处理源程序得到的翻译结果</strong></li></ul><h4 id="后缀表示"><a href="#后缀表示" class="headerlink" title="后缀表示"></a>后缀表示</h4><p>一个表达式E的后缀表示（postfix notation）可以按照如下形式进行归纳定义：</p><img src="/images/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E2%80%94%E2%80%94%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20230312150000994.png" alt="image-20230312150000994" style="zoom:80%;" /><h5 id="example"><a href="#example" class="headerlink" title="example"></a>example</h5><img src="/images/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E2%80%94%E2%80%94%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20230312150619368.png" alt="image-20230312150619368" style="zoom:80%;" /><h4 id="Syntax-Directed-Definition（语法制导定义）"><a href="#Syntax-Directed-Definition（语法制导定义）" class="headerlink" title="Syntax-Directed Definition（语法制导定义）"></a>Syntax-Directed Definition（语法制导定义）</h4><p>语法制导定义把：</p><ol><li>每个文法符号和一个属性集合相关联</li><li>每个产生式和一组语义规则（semantic rule）相关联，这些规则用于计算与该产生式中符号相关联的属性值</li></ol><h5 id="属性求值："><a href="#属性求值：" class="headerlink" title="属性求值："></a>属性求值：</h5><p>对于一个给定的输入串x，构建x的一个语法分析树，然后按照下面的语义规则来计算语法分析树中各个结点的属性</p><h5 id="综合属性（synthesized-attribute）"><a href="#综合属性（synthesized-attribute）" class="headerlink" title="综合属性（synthesized attribute）"></a>综合属性（synthesized attribute）</h5><p>某个属性在语法分析树结点N上的值是由N的子节点以及N本身的属性值确定的，那么这个属性就称为综合属性。</p><p>综合属性有一个很好的性质：只需要对语法分析树进行一次自底向上的遍历，就可以计算出属性的值</p><h5 id="语法制导定义："><a href="#语法制导定义：" class="headerlink" title="语法制导定义："></a>语法制导定义：</h5><img src="/images/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E2%80%94%E2%80%94%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20230312152127746.png" alt="image-20230312152127746" style="zoom:80%;" /><p>根据该语法制导定义得到的注释分析树：</p><img src="/images/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E2%80%94%E2%80%94%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20230312152206548.png" alt="image-20230312152206548" style="zoom:80%;" /><p>其中的t属性表示由该非终结符号生成的表达式的后缀表达形式</p><p>每一个产生式都与一个语义规则相关联，例如：</p><img src="/images/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E2%80%94%E2%80%94%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20230312152427891.png" alt="image-20230312152427891" style="zoom:80%;" /><p>这个规则是后缀表达式定义的一个公式化表示</p><h5 id="简单语法制导定义"><a href="#简单语法制导定义" class="headerlink" title="简单语法制导定义"></a>简单语法制导定义</h5><p>要得到代表产生式头部的非终结符号的翻译结果的字符串，只需要将产生式体中<strong>各非终结符号的翻译结果</strong>按照它们<strong>在非终结符号中的出现顺序</strong>连接起来，并在其中<strong>穿插一些附加的串</strong>即可，具有这个性质的语法制导定义称为<strong>简单语法制导定义</strong></p><p>例如：</p><img src="/images/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E2%80%94%E2%80%94%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20230312152922506.png" alt="image-20230312152922506" style="zoom:80%;" /><h5 id="树的遍历"><a href="#树的遍历" class="headerlink" title="树的遍历"></a>树的遍历</h5><p>树的遍历将用于描述属性的求值过程，以及<strong>描述一个<em>翻译方案</em> 中的各个代码片段的执行过程</strong>。一个树的遍历从根节点开始，并按照某个顺序访问树的各个结点。</p><ul><li>深度优先遍历</li></ul><p>语法制导定义没有规定一颗语法分析树中各个属性值的求值顺序。只要一个顺序能够保证计算属性a的值时，a所依赖的其他属性都已经计算完毕，这个顺序就是可以接受的。综合属性可以在自底向上遍历的时候进行计算。</p><h4 id="翻译方案"><a href="#翻译方案" class="headerlink" title="翻译方案"></a>翻译方案</h4><p>上面的语法制导定义将字符串作为属性值附加在语法分析树的结点上，从而得到翻译结果。我们现在来考虑另外一种不需要操作字符串的办法。它通过运行程序片段，逐步生成相同的翻译结果</p><ul><li>前序遍历：N→从左到右的每颗子树的前序遍历</li><li>后序遍历：从左到右的每棵子树的后序遍历→N</li></ul><p>语法制导翻译方案是一种<strong>在文法产生式中附加一些程序片段来描述翻译结果</strong>的表示方法。<strong>语法制导翻译方案</strong>与<strong>语法制导定义</strong>相似，只是<strong>显式指定</strong>了<strong>语义规则的计算顺序</strong></p><p>被嵌入到产生式体中程序片段称为 <strong>语义动作（semantic action）</strong>，一个语义动作用花括号括起来，并写入到产生式的体中，它的执行位置也由此指定，如：</p><img src="/images/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E2%80%94%E2%80%94%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20230312154254782.png" alt="image-20230312154254782" style="zoom:80%;" /><p>当我们画出一个翻译方案的语法分析树时，<strong>我们为每一个语义动作构造一个额外的子节点，并使用虚线将它和该产生式头部对应的结点相连</strong>。例如：</p><img src="/images/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E2%80%94%E2%80%94%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20230312154537714.png" alt="image-20230312154537714" style="zoom:80%;" /><p>后序遍历该子树：</p><img src="/images/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E2%80%94%E2%80%94%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20230312154624140.png" alt="image-20230312154624140" style="zoom:80%;" /><p>该图中的语义动作在对语法分析树的<strong>后序遍历</strong>中执行时会打印出95-2+</p><img src="/images/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E2%80%94%E2%80%94%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20230312154818118.png" alt="image-20230312154818118" style="zoom:80%;" /><h5 id="两种方案对比"><a href="#两种方案对比" class="headerlink" title="两种方案对比"></a>两种方案对比</h5><p>尽管这种方案与上述附加字符串的方案的产生结果相同，但它们的构造过程不同。第一种方案是把字符串作为属性附加到语法分析树中的结点上，而该方案是通过语义动作把翻译结果以增量的方式打印出来。</p><p>后者不需要任何附加空间来存放子表达式的翻译结果。</p><p>实现一个翻译方案时，必须保证各个语义动作按照它们在语法分析树的<strong>后序遍历</strong>中的顺序执行</p><h2 id="2-4-语法分析"><a href="#2-4-语法分析" class="headerlink" title="2.4 语法分析"></a>2.4 语法分析</h2><p>对于任何上下文无关文法，我们都可以构造出一个时间复杂度为$O(n^3)$的语法分析器，它最多使用$O(n^3)$的时间就可以完成一个长度为n的符号串的语法分析。</p><p>但是对于实际的程序设计语言而言，我们能够设计出一个可以被高效分析的文法。<strong>线性时间复杂度</strong>的算法足以分析实践中出现的各种程序设计语言。</p><p>语法分析方法可大致分为两类：</p><ul><li>自顶向下</li><li>自底向上</li></ul><p>直接从文法生成语法分析器的软件工具常常使用自底向上的办法。而自顶向下可以较容易地手工构造出高效的语法分析器</p><h4 id="自顶向下分析方法"><a href="#自顶向下分析方法" class="headerlink" title="自顶向下分析方法"></a>自顶向下分析方法</h4><p>我们给定一个预定的字符串</p><img src="/images/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E2%80%94%E2%80%94%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20230312190803119.png" alt="image-20230312190803119" style="zoom:80%;" /><p>给定一个文法：</p><img src="/images/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E2%80%94%E2%80%94%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20230312190820702.png" alt="image-20230312190820702" style="zoom:80%;" /><p>我们根据这个文法，构造一个叶子节点是特定字符串顺序的语法分析树，如果能构造这样的语法分析树，则说明该文法是正确的。</p><p>我们开始构造语法分析树：</p><ul><li>在标号为非终结符号A的结点N上，选择A的一个产生式，并为该产生式体中的各个符号构造出N的子结点</li><li>寻找下一个结点来构造子树，通常选择的是语法分析树最左边的尚未扩展的非终结符</li></ul><h5 id="lookahead"><a href="#lookahead" class="headerlink" title="lookahead"></a>lookahead</h5><p>输入中当前被扫描的终结符号称为 <strong>向前看（lookahead）</strong>符号。我们的目标是以适当的方法构造出语法分析树的其余部分，使得<strong>这棵树生成的符号串与输入符号串匹配。</strong></p><h5 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h5><img src="/images/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E2%80%94%E2%80%94%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20230312191603728.png" alt="image-20230312191603728" style="zoom:80%;" /><ol><li><img src="/images/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E2%80%94%E2%80%94%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20230312192315773.png" alt="image-20230312192315773"></li><li><img src="/images/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E2%80%94%E2%80%94%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20230312192329380.png" alt="image-20230312192329380"></li><li><img src="/images/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E2%80%94%E2%80%94%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20230312192337942.png" alt="image-20230312192337942"></li><li><img src="/images/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E2%80%94%E2%80%94%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20230312192345623.png" alt="image-20230312192345623"></li></ol><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><ul><li>为一个非终结符号选择产生式是一个“尝试并犯错”的过程，也就是说，我们首先选择一个产生式，并在这个产生式不合适时进行 <strong>回溯</strong>，再尝试另一个产生式。</li><li>一个产生式不合适是指使用了该产生式之后，我们无法构造得到一棵与当前输入串相匹配的语法分析树</li></ul><h4 id="预测分析法"><a href="#预测分析法" class="headerlink" title="预测分析法"></a>预测分析法</h4><h4 id="何时使用e产生式"><a href="#何时使用e产生式" class="headerlink" title="何时使用e产生式"></a>何时使用e产生式</h4><h4 id="设计一个预测分析器"><a href="#设计一个预测分析器" class="headerlink" title="设计一个预测分析器"></a>设计一个预测分析器</h4><h4 id="左递归"><a href="#左递归" class="headerlink" title="左递归"></a>左递归</h4><p>递归下降语法分析器有可能进入无限循环。当出现如下所示的“左递归”产生式时，分析器就会出现无限循环：<br>$$<br>expr\rightarrow expr+term<br>$$<br>通过改写有问题的产生式就可以消除左递归：</p><img src="/images/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E2%80%94%E2%80%94%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20230312222501705.png" alt="image-20230312222501705" style="zoom:80%;" /><p>因为产生式$A\rightarrow A\alpha$的右部的最左符号是A自身，非终结符号A和它的产生式就称为 <strong>左递归</strong>的，不断应用这个产生式将在A的右边生成一个$\alpha$序列：</p><img src="/images/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E2%80%94%E2%80%94%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20230312222727275.png" alt="image-20230312222727275" style="zoom:80%;" /><p>使用一个新的非终结符号R，并按照如下方式改写A的产生式可以达到同样的效果：</p><img src="/images/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E2%80%94%E2%80%94%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20230312222828964.png" alt="image-20230312222828964" style="zoom:80%;" /><p>非终结符号R和它的产生式$R\rightarrow \alpha R$是右递归的，因为这个产生式的右部的最后一个符号就是R本身：</p><img src="/images/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E2%80%94%E2%80%94%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20230312223108148.png" alt="image-20230312223108148" style="zoom:80%;" /><p>可见，生成一个串可以是左递归的，也可以是右递归的，左递归的产生式会使得树向右上方生长，右递归的产生式会使得树向右下方生长。</p><p>左递归到右递归的例子：</p><img src="/images/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E2%80%94%E2%80%94%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20230312223242348.png" alt="image-20230312223242348" style="zoom:80%;" /><p>从左递归到右递归中语义动作的变化：</p><img src="/images/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E2%80%94%E2%80%94%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20230312224322432.png" alt="image-20230312224322432" style="zoom:80%;" /><p>左递归中的语法分析树：</p><img src="/images/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E2%80%94%E2%80%94%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20230312224351930.png" alt="image-20230312224351930" style="zoom:80%;" /><p>右递归的语法分析树：</p><img src="/images/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E2%80%94%E2%80%94%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20230312224431272.png" alt="image-20230312224431272" style="zoom:80%;" /><h2 id="词法分析过程的图形描述"><a href="#词法分析过程的图形描述" class="headerlink" title="词法分析过程的图形描述"></a>词法分析过程的图形描述</h2><h2 id="2-5简单表达式的翻译器"><a href="#2-5简单表达式的翻译器" class="headerlink" title="2.5简单表达式的翻译器"></a>2.5简单表达式的翻译器</h2><h4 id="抽象语法和具体语法"><a href="#抽象语法和具体语法" class="headerlink" title="抽象语法和具体语法"></a>抽象语法和具体语法</h4><h4 id="调整翻译方案"><a href="#调整翻译方案" class="headerlink" title="调整翻译方案"></a>调整翻译方案</h4><h4 id="非终结符号的过程"><a href="#非终结符号的过程" class="headerlink" title="非终结符号的过程"></a>非终结符号的过程</h4><h4 id="翻译器的简化"><a href="#翻译器的简化" class="headerlink" title="翻译器的简化"></a>翻译器的简化</h4><h4 id="完整的程序"><a href="#完整的程序" class="headerlink" title="完整的程序"></a>完整的程序</h4><h2 id="2-6词法分析"><a href="#2-6词法分析" class="headerlink" title="2.6词法分析"></a>2.6词法分析</h2><p>一个词法分析器从输入中读取字符，并将它们组成“词法单元对象”。除了用于语法分析的终结符号之外，一个词法单元对象还包含一些附加信息，这些信息以属性值的形式出现。</p><p>在本节中，一个词法单元就是一个带有附加信息的终结符号。</p><p>构成一个词法单元的输入字符序列被称为词素</p><h4 id="剔除空白和注释"><a href="#剔除空白和注释" class="headerlink" title="剔除空白和注释"></a>剔除空白和注释</h4><h4 id="预读"><a href="#预读" class="headerlink" title="预读"></a>预读</h4><h4 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h4><h4 id="识别关键字和标识符"><a href="#识别关键字和标识符" class="headerlink" title="识别关键字和标识符"></a>识别关键字和标识符</h4><h4 id="词法分析器"><a href="#词法分析器" class="headerlink" title="词法分析器"></a>词法分析器</h4><h2 id="2-7-符号表"><a href="#2-7-符号表" class="headerlink" title="2.7 符号表"></a>2.7 符号表</h2><h4 id="为每个作用域设置一个符号表"><a href="#为每个作用域设置一个符号表" class="headerlink" title="为每个作用域设置一个符号表"></a>为每个作用域设置一个符号表</h4><h4 id="符号表的作用"><a href="#符号表的作用" class="headerlink" title="符号表的作用"></a>符号表的作用</h4><h2 id="2-8-生成中间代码"><a href="#2-8-生成中间代码" class="headerlink" title="2.8 生成中间代码"></a>2.8 生成中间代码</h2><h4 id="两种中间表示形式"><a href="#两种中间表示形式" class="headerlink" title="两种中间表示形式"></a>两种中间表示形式</h4><h4 id="语法树的构造"><a href="#语法树的构造" class="headerlink" title="语法树的构造"></a>语法树的构造</h4><h4 id="静态检查"><a href="#静态检查" class="headerlink" title="静态检查"></a>静态检查</h4><h4 id="三地址码"><a href="#三地址码" class="headerlink" title="三地址码"></a>三地址码</h4><h2 id="词法分析"><a href="#词法分析" class="headerlink" title="词法分析"></a>词法分析</h2><p>正则表达式 → DFA</p><p>正则表达式  → NFA → DFA → 化简</p><p>词法分析器将分析得到的token存到符号表中</p><p>语法分析器更新符号表中的token值</p><p>语义分析器</p>]]></content>
    
    
    <categories>
      
      <category>编译原理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编译原理</tag>
      
      <tag>第二章</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/02/27/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%861/"/>
    <url>/2023/02/27/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%861/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/02/27/computation-theory-1/"/>
    <url>/2023/02/27/computation-theory-1/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>非关系数据库PPT</title>
    <link href="/2023/02/16/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93PPT/"/>
    <url>/2023/02/16/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93PPT/</url>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="非关系型数据库产生的背景"><a href="#非关系型数据库产生的背景" class="headerlink" title="非关系型数据库产生的背景"></a>非关系型数据库产生的背景</h2><h3 id="大数据管理及应用需求"><a href="#大数据管理及应用需求" class="headerlink" title="大数据管理及应用需求"></a>大数据管理及应用需求</h3><h4 id="大数据特征"><a href="#大数据特征" class="headerlink" title="大数据特征"></a>大数据特征</h4><ul><li>Volume（大量）：数据量大TB-&gt;PB</li><li>Velocity（高速）：数据被创建、移动和处理的速度 </li><li>Variety（多样）：文字、图像、图片、地理位置等</li><li>Value（价值）：具有价值，但价值密度低</li></ul><h4 id="新型应用的数据存储与管理需求"><a href="#新型应用的数据存储与管理需求" class="headerlink" title="新型应用的数据存储与管理需求"></a>新型应用的数据存储与管理需求</h4><ul><li><p>全球数据规模不断增大</p></li><li><p>数据类型不断多样：</p><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93PPT/image-20230216133801382.png" alt="image-20230216133801382" style="zoom:50%;" /></li></ul><h2 id="开发数据管理应用考虑的问题"><a href="#开发数据管理应用考虑的问题" class="headerlink" title="开发数据管理应用考虑的问题"></a>开发数据管理应用考虑的问题</h2><ul><li>用户量：用户量预估多少？几百？几万？还是几亿？</li><li>数据量：数据量预估多少？日均增量能有多少？</li><li>数据访问模式：读密集型？还是写密集型？</li><li>数据场景：强事务型？还是分析型需求？</li><li>运行性能：并发量是多少？高峰、平均、低谷分别预估是多少？</li></ul><h2 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h2><h3 id="描述以下信息的工具集合"><a href="#描述以下信息的工具集合" class="headerlink" title="描述以下信息的工具集合"></a>描述以下信息的工具集合</h3><ul><li>数据</li><li>数据之间的关系</li><li>数据语义</li><li>数据约束</li></ul><h3 id="传统的数据模型"><a href="#传统的数据模型" class="headerlink" title="传统的数据模型"></a>传统的数据模型</h3><ul><li>关系数据模型</li><li>E-R数据模型</li><li>基于对象的数据模型</li><li>XML&#x2F;JSON</li><li>网状模型</li><li>层次模型</li></ul><h2 id="关系数据库的特点"><a href="#关系数据库的特点" class="headerlink" title="关系数据库的特点"></a>关系数据库的特点</h2><ul><li><strong>数据模型简单：</strong>二维表结构，数据以行为单位，每行表示一个记录，每行数据的属性都相同。</li><li><strong>事务管理机制完善：</strong>支持 ACID 特性，维护数据的一致性，关系数据库非常重要的特性。</li><li><strong>SQL 语言使用方便，</strong>支持 join 等复杂操作</li><li><strong>成熟的产品提供良好的服务</strong>：MySql、Oracle、SQL Server、PostgreSQL等</li><li><strong>高并发下数据库存在瓶颈</strong>：数据按行存储，针对某一列的运算，IO代价较高；</li><li><strong>维护数据一致性代价大：</strong>为了保证事务ACID特性，数据库提供并发控制与故障恢复机制，事务的隔离级别越高，读写性能会受影响。</li><li><strong>维护索引代价大</strong>：数据更新必然导致索引更新，降低了关系型数据库的读写能力；索引占存储的空间。</li><li><strong>水平扩展带来的问题</strong>：应对业务规模扩大，数据库分库是常用的方法，分库之后，数据迁移、跨库 join、分布式事务处理都是需要考虑的问题。</li><li><strong>数据库schema结构不易扩展</strong>：如果需要修改表结构，需要执行 DDL语句，修改期间会锁表，部分服务不可用。</li></ul><h2 id="单节点关系数据库的性能压力"><a href="#单节点关系数据库的性能压力" class="headerlink" title="单节点关系数据库的性能压力"></a>单节点关系数据库的性能压力</h2><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93PPT/image-20230216134627605.png" alt="image-20230216134627605" style="zoom:50%;" /><h2 id="传统数据管理方法存在的问题及解决方法"><a href="#传统数据管理方法存在的问题及解决方法" class="headerlink" title="传统数据管理方法存在的问题及解决方法"></a>传统数据管理方法存在的问题及解决方法</h2><ul><li><p>不擅长<strong>：大量数据的写入操作</strong></p><ol><li><p>solution1：读写分离&#x3D;&gt;问题:更新的数据在两台服务器上，出现数据一致性问题<img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93PPT/image-20230216134829315.png" alt="image-20230216134829315" style="zoom:50%;" /></p></li><li><p>solution2：读写分离且写操作分配；不同表的写操作分配给不同的数据库服务器</p></li><li><p>solution3：不同的表分配给不同的数据库服务器&#x3D;&gt;问题：跨服务器实现join非常困难</p><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93PPT/image-20230216135027732.png" alt="image-20230216135027732" style="zoom:50%;" /></li></ol></li><li><p>不擅长：<strong>有数据更新时需要更新索引，甚至更新表结构</strong></p><ol><li>更新时需要加锁，数据访问受限制，高并发应用的性能受影响</li></ol></li><li><p>不擅长：表结构不固定的应用</p><ol><li>更新表结构困难</li></ol></li></ul><h2 id="计算机系统scale-up和scale-out"><a href="#计算机系统scale-up和scale-out" class="headerlink" title="计算机系统scale up和scale out"></a>计算机系统scale up和scale out</h2><ul><li>scale up:使独立的CPU运行得更快；提高时钟频率；增加RAM；提高磁盘IO性能</li><li>scale out:多个CPU一起工作，将问题分解成独立的线程</li></ul><h2 id="计算机体系结构"><a href="#计算机体系结构" class="headerlink" title="计算机体系结构"></a>计算机体系结构</h2><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93PPT/image-20230216135728120.png" alt="image-20230216135728120" style="zoom:67%;" /><h2 id="非关系数据库之后"><a href="#非关系数据库之后" class="headerlink" title="非关系数据库之后"></a>非关系数据库之后</h2><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93PPT/image-20230216140857129.png" alt="image-20230216140857129" style="zoom:50%;" /><h2 id="非关系数据库与NoSQL"><a href="#非关系数据库与NoSQL" class="headerlink" title="非关系数据库与NoSQL"></a>非关系数据库与NoSQL</h2><h3 id="NoSQL定义-not-only-SQL"><a href="#NoSQL定义-not-only-SQL" class="headerlink" title="NoSQL定义 not-only SQL"></a>NoSQL定义 not-only SQL</h3><p>符合非关系型、分布式、开源和具有水平可扩展能力的下一代数据库。</p><p>NoSQL数据库的诞生定位于非结构化的数据。相对于结构化数据而言，不方便使用数据库二维逻辑来表现的数据称为非结构化数据，包括所有格式的办公文档、文本、图片、XML、HTML、各类报表、图像和音频视频信息等</p><p><strong>和结构化数据相比，非结构化的数据最本质的区别包括三个方面：</strong></p><ul><li>非结构化数据的容量比结构化数据大</li><li>产生的速度比结构化数据最快</li><li>数据来源具有多样性</li><li>不提供JOIN操作</li><li>schemaless：allows data to have <strong>arbitrary structures</strong> as they are not explicitly defined by a data definition language (schema-on-write). Instead, they are implicitly <strong>encoded by the application logic</strong> (schema-on-read).</li><li>运行于shared-nothing的商用计算机构成的集群上</li><li>具有横向可扩展性</li></ul><h6 id="数据模型包括"><a href="#数据模型包括" class="headerlink" title="数据模型包括:"></a>数据模型包括:</h6><p>key&#x2F;value、gragh(采用图结构存储数据之间的关系)、column family(Bigtable)(类似系数矩阵，行和列作为key，列族由多个列构成)、document-oriented(存储层次结构的数据)</p><h6 id="NoSQL不是"><a href="#NoSQL不是" class="headerlink" title="NoSQL不是"></a>NoSQL不是</h6><ul><li>NoSQL不是关于SQL语言，NoSQL 不是指不使用SQL查询语言的数据库系统。</li><li>NoSQL数据库也提供SQL查询语言。</li><li>既有开源NoSQL数据库产品，也有商用产品。</li><li>NoSQL数据库不仅仅针对大数据中的量大（volume）和高速（velocity）特征，同样注重<strong>多样性</strong></li><li><strong>NoSQL不是云计算：</strong>因为良好的可伸缩性，不少NoSQL系统部署在云中。 NoSQL既可以运行在云环境中，也可以运行在自己的数据中心。</li><li><strong>NoSQL不是基于RAM和SSD的应用，</strong>而是利用RAM和SSD提高性能，NoSQL系统可以运行在标准的硬件上。</li></ul><h6 id="comparison-of-NoSQL-Data-Models"><a href="#comparison-of-NoSQL-Data-Models" class="headerlink" title="comparison of NoSQL Data Models"></a>comparison of NoSQL Data Models</h6><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93PPT/image-20230216142121807.png" alt="image-20230216142121807" style="zoom:80%;" /><h2 id="multi-model-database"><a href="#multi-model-database" class="headerlink" title="multi-model database"></a>multi-model database</h2><p>The data are naturally organized in different formats and models, including <strong>structured, semi-structured and unstructured data.</strong> </p><ul><li><strong>structured data</strong> includes relational, key&#x2F;value, and graph data. </li><li><strong>Semi-structured data</strong> commonly refer to XML and JSON documents. </li><li><strong>Unstructured data</strong> are typically text files, containing dates, numbers and facts.</li></ul><h1 id="相关基础知识及概念"><a href="#相关基础知识及概念" class="headerlink" title="相关基础知识及概念"></a>相关基础知识及概念</h1><h2 id="单机的局限性"><a href="#单机的局限性" class="headerlink" title="单机的局限性"></a>单机的局限性</h2><ul><li>数据读写速度受单机硬件组成的影响</li><li>物理硬盘的性能是影响数据读写速度的重要因素</li></ul><h3 id="解决单机局限性的方案"><a href="#解决单机局限性的方案" class="headerlink" title="解决单机局限性的方案"></a>解决单机局限性的方案</h3><ul><li>提高单机的物理配置(PC服务器-&gt;小型机-&gt;大型机)  <strong>纵向扩展</strong></li><li>添加更多的节点，节点之间用高速网络连接，当需要更高的性能或更大的容量时，可迅速向集群中添加节点，而不会导致任何宕机。   <strong>横向扩展</strong></li></ul><h2 id="计算平台分类"><a href="#计算平台分类" class="headerlink" title="计算平台分类"></a>计算平台分类</h2><p>Flynn分类法按照指令流和数据流进行分类</p><ol><li>SISD：单指令流单数据流(传统的串行计算机，硬件不支持任何形式的并行计算，所有的指令都是串行执行)</li><li>SIMD：单指令流多数据流(在单个时钟周期内处理多个数据单元，数据级别的并行处理；例GPU的应用，图像处理、矩阵计算)</li><li>MIMD：多指令流多数据流(紧耦合MIMD和松耦合MIMD；多核、多CPU共享内存)</li><li>MISD：多指令流单数据流(理论模型，没有实际实现)</li></ol><h2 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h2><p><strong>集群</strong>是紧密耦合的一些<strong>服务器或节点</strong>，这些服务器通过高速网络连接在一起作为一个工作单元。</p><p>集群中每个节点都有自己的专属资源：<strong>CPU、内存和硬盘</strong></p><p>通过将任务分解成若干个小任务分配给集群中的节点服务器上，协同完成任务。</p><h2 id="IO并行"><a href="#IO并行" class="headerlink" title="IO并行"></a>IO并行</h2><p>通过在多个节点（计算机）上对多个磁盘上的数据集进行分区，减少从磁盘检索数据所需的时间</p><ul><li><strong>跨节点</strong>并行</li><li><strong>一个节点跨磁盘</strong>并行</li></ul><p>水平分区——数据记录被划分在多个节点上，即每个节点上存储一个数据子集</p><ul><li>垂直分区：例如 r(A,B,C,D)，主键为A ，划分为r1(A,B)和r2(A,C,D)</li><li>默认是水平分区</li></ul><h3 id="IO并行技术"><a href="#IO并行技术" class="headerlink" title="IO并行技术"></a>IO并行技术</h3><ul><li><p>轮询方法：第i条记录存储到的节点为 i mod n</p></li><li><p>Hash分区：选择一个或多个属性作为分区属性；选择取值范围为0…n-1的哈希函数h；设i 为哈希函数h应用于记录属性的计算结果，然后将记录存储在节点i</p></li><li><p>范围分区：选择分区的属性；选定分区向量vector [vo, v1, …, vn-2] ；设v是一个记录分区属性的值，那么vi &lt; vi+1 的记录分配到节点 i + 1；v &lt; v0 的记录分配到节点0；v &gt;&#x3D; vn-2 的记录分配到节点n-1.</p><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93PPT/image-20230216143634341.png" alt="image-20230216143634341" style="zoom:67%;" /></li></ul><h2 id="分片-sharding"><a href="#分片-sharding" class="headerlink" title="分片(sharding)"></a>分片(sharding)</h2><p>分片：<strong>水平</strong>地将大的数据集划分成较小的、易于管理的数据集的过程。</p><p>每个小数据集可以<strong>独立</strong>地为所负责的数据提供<strong>读写服务</strong>；某个查询的数据可能来自两个小数据集；数据分片要考虑<strong>查询模式</strong>以便小数据集本身不会成为<strong>性能瓶颈</strong></p><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93PPT/image-20230216143828768.png" alt="image-20230216143828768" style="zoom:50%;" /><h2 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h2><p>复制：多个节点上存储数据集的多个拷贝，称作副本。</p><p>相同的数据在不同的节点上存在多个副本，提供了<strong>可伸缩性、可用性和容错性</strong>。</p><h3 id="复制实现方法"><a href="#复制实现方法" class="headerlink" title="复制实现方法"></a>复制实现方法</h3><ol><li><p><strong>主从复制</strong></p><p>系统配置是主从配置环境；所有数据写入主节点，<strong>持久化后</strong>复制到多个从节点；数据的写（增删改）操作访问<strong>主节点</strong>的数据，读（查询）操作访问<strong>任意节点</strong>；<strong>适用于读密集型应用</strong>；需要考虑<strong>读一致性</strong>的问题；</p><ul><li>投票机制：大多数<strong>从节点</strong>包含相同版本的记录，则声明读操作是一致的</li><li>实现投票机制需要从节点之间建立可靠、快速的沟通机制</li></ul><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93PPT/image-20230216144316280.png" alt="image-20230216144316280" style="zoom:50%;" /></li><li><p><strong>对等复制</strong></p><p>节点之间不分主从，每个节点是对等的，每个<strong>写操作</strong>数据复制到所有对等的节点上。</p><p>每个节点都可以处理读请求和写请求；</p><p>对等复制容易导致<strong>写不一致问题</strong>：同时更新多个节点的同一个数据</p><ul><li>悲观并发策略：基于锁机制</li><li>乐观并发策略：不用锁，最终一致性</li></ul><p><strong>读不一致问题</strong>：投票机制</p><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93PPT/image-20230216144458438.png" alt="image-20230216144458438" style="zoom:67%;" /></li></ol><h2 id="数据分布倾斜-data-distribution-skew"><a href="#数据分布倾斜-data-distribution-skew" class="headerlink" title="数据分布倾斜(data-distribution skew)"></a>数据分布倾斜(data-distribution skew)</h2><p>数据分布倾斜含义: 一些节点拥有较多记录，而其他节点则拥有的记录数很少。</p><ul><li><strong>属性-值倾斜：</strong>一些分区属性值出现在多个记录中；分区属性值相同的所有记录最终都在同一个分区中；范围分区和hash分区都会出现这个问题。</li><li><strong>分区倾斜：</strong>选择不当的范围分区向量可能会将太多记录分配给某些分区，而将太少记录分配给其他分区</li></ul><p><strong>执行倾斜：</strong>某些运算符运行的时间比其他运算符长，执行时间的差异可能会导致一些处理器空闲，而其他处理器仍然计算查询的一部分。</p><h3 id="处理范围分区内的倾斜"><a href="#处理范围分区内的倾斜" class="headerlink" title="处理范围分区内的倾斜"></a>处理范围分区内的倾斜</h3><ul><li><strong>创建平衡的分区向量</strong><ol><li>基于<strong>分区属性</strong>对数据进行排序；</li><li>按照如下顺序扫描数据来构造分区向量<ul><li>每读取1&#x2F;n的数据之后，下一个记录的分区属性值被添加到分区向量中（n表示分区数量）</li></ul></li><li>如果分区属性中存在重复项，则可能导致不平衡</li></ol></li><li><strong>减少代价</strong><ol><li>分区向量可以使用记录的随机样本创建</li><li>另外一种方法：采用直方图创建分区向量</li></ol></li></ul><h3 id="采用直方图方法创建分区向量"><a href="#采用直方图方法创建分区向量" class="headerlink" title="采用直方图方法创建分区向量"></a>采用直方图方法创建分区向量</h3><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93PPT/image-20230216145226985.png" alt="image-20230216145226985" style="zoom:67%;" /><h2 id="虚拟节点分区"><a href="#虚拟节点分区" class="headerlink" title="虚拟节点分区"></a>虚拟节点分区</h2><h3 id="核心思想"><a href="#核心思想" class="headerlink" title="核心思想"></a>核心思想</h3><p>引入虚拟节点，假设虚拟节点的数量是实际节点倍数：</p><ul><li>虚拟节点映射到真实节点</li><li>使用范围分区向量跨虚拟节点划分记录(也可以使用Hash分区)</li></ul><h3 id="虚拟节点映射到真实节点"><a href="#虚拟节点映射到真实节点" class="headerlink" title="虚拟节点映射到真实节点"></a>虚拟节点映射到真实节点</h3><ul><li><strong>轮询：</strong>虚拟节点i 映射到真实节点 (i mod n)+1</li><li><strong>映射表：</strong>用一个映射表记录虚拟节点和真实节点的对应关系<ol><li>通过将虚拟节点从加载较多的节点移动到加载较少的节点来<strong>处理倾斜</strong></li><li>可以解决<strong>数据倾斜和执行倾斜</strong></li></ol></li></ul><h2 id="并行VS分布式"><a href="#并行VS分布式" class="headerlink" title="并行VS分布式"></a>并行VS分布式</h2><ul><li><p><strong>并行计算</strong></p><p>单指令流多数据流计算机：SIMD；多台计算机中多个CPU，多指令流多数据流MIMD</p></li><li><p><strong>分布式计算</strong></p><p>多台计算机中多个CPU—<strong>MIMD</strong>；CPU间<strong>高通信延迟</strong>；不同节点可以是<strong>异构</strong>的系统，可靠性维护困难</p></li></ul><h2 id="分布式系统的可靠性要求"><a href="#分布式系统的可靠性要求" class="headerlink" title="分布式系统的可靠性要求"></a>分布式系统的可靠性要求</h2><ol><li>允许部分节点失效</li><li>如果某节点失效，<strong>其负载应由其他节点承担</strong>，确保数据可恢复</li><li>某节点失效重启后应能加入原来的计算机组，而<strong>不必重启所有的节点</strong></li><li><strong>并发操作</strong>或<strong>部分内部失效</strong>不应导致外部可见的不确定性，应确保<strong>一致性</strong></li><li>新增节点应提升系统的性能</li><li>整个系统应阻止<strong>非授权访问</strong>，要比单机系统更多考虑攻击，以确保<strong>安全</strong></li></ol><h2 id="事物及其事物的特性"><a href="#事物及其事物的特性" class="headerlink" title="事物及其事物的特性"></a>事物及其事物的特性</h2><p>事务是描述完成数据处理的完整逻辑工作单元的操作集合。</p><p>在关系数据库管理系统中，为了保证数据一致性，数据库系统中事务必须具有ACID特性：（原子性（Atomicity）一致性（Consistency）隔离性（Isolation）持久性（Durability））</p><ul><li>Atomicity.  事务的所有操作或者全部执行，或者全不执行，是一个不可分割的整体。</li><li>Consistency.  在并发环境中，不同事务访问相同数据时，事务执行保证数据的一致性，即事务必须在任何时候满足系统定义的协议和原则，<strong>数据库在事务开始和结束时必须保持一致状态。</strong></li><li>Isolation.  多个事务并发访问同一个数据库时，每个事务都有自己的数据空间，<strong>对其他事务的执行不知情</strong>；事务无法访问处于中间状态或未完成状态的任何其他事务的数据，每个事务自身是<strong>独立的</strong>。</li><li>Durability.一旦事务完成（成功提交），所有对数据的更新是<strong>持久的</strong>，即使数据库发生故障。</li></ul><h2 id="事物的状态"><a href="#事物的状态" class="headerlink" title="事物的状态"></a>事物的状态</h2><ol><li>Active ：事务执行对数据库的读写操作</li><li>Partially committed ：事务的最后一个语句执行之后进入部分提交状态，数据在<strong>缓冲区</strong>中</li><li>Failed ：事务无法继续正常地执行</li><li>Aborted ：事务回滚且数据库恢复到事务执行之前的状态<ul><li>重新启动事务</li><li>杀掉事务</li></ul></li><li>committed：成功执行后的状态</li></ol><h3 id="事物状态图"><a href="#事物状态图" class="headerlink" title="事物状态图"></a>事物状态图<img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93PPT/image-20230216150303919.png" alt="image-20230216150303919" style="zoom:50%;" /></h3><h2 id="事务并发地执行"><a href="#事务并发地执行" class="headerlink" title="事务并发地执行"></a>事务并发地执行</h2><p>在系统中允许多个事务并发地执行：</p><ul><li>提高CPU和磁盘的利用率（例如：一个事务利用CPU的同时<strong>另一个事务在读或者写磁盘</strong>）</li><li>减少事务的<strong>平均响应时间</strong>（例如：短事务不需要等待长事务提交后再得到响应）</li></ul><h2 id="并行操作引起的问题"><a href="#并行操作引起的问题" class="headerlink" title="并行操作引起的问题"></a>并行操作引起的问题</h2><ol><li><strong>丢失修改：</strong>事务T1与事务T2从数据库中读入数据A并修改，事务T2的写操作破坏了事务T1的结果，导致事务T1的修改被丢失</li><li><strong>读脏数据：</strong>事务1修改数据A，并将其写回数据库，事务2读取数据A后，事务1由于某种原因被撤消，这时事务1已修改过的数据恢复原值  ；事务2读到的数据与数据库中的数据不一致，是不正确的数据，又称为<strong>“脏”数据。</strong></li><li><strong>不可重复读问题</strong>：事务1读取数据后，事务2执行更新操作，使事务1无法再现前一次读取结果。</li></ol><h2 id="事务并发控制"><a href="#事务并发控制" class="headerlink" title="事务并发控制"></a>事务并发控制</h2><p><strong>并发控制模式</strong>：达到<strong>事务隔离</strong>目的的机制</p><ul><li>控制并发事务间的交互，避免破坏数据库的一致性</li></ul><h2 id="并发控制机制的任务"><a href="#并发控制机制的任务" class="headerlink" title="并发控制机制的任务"></a>并发控制机制的任务</h2><ol><li>并发控制机制协调事务的执行，确保事务的<strong>隔离性</strong></li><li>对并发操作进行正确调度</li><li>保证事务的<strong>隔离性</strong></li><li>保证数据库的<strong>一致性</strong>（用户A修改数据是某个事务的一部分，当事务成功完成后，用户B和C请求相同记录时，数据库提供修改后的数据）</li></ol><h2 id="事务的4中隔离级别"><a href="#事务的4中隔离级别" class="headerlink" title="事务的4中隔离级别"></a>事务的4中隔离级别</h2><p><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93PPT/image-20230216151630821.png" alt="image-20230216151630821"></p><h2 id="并发控制机制"><a href="#并发控制机制" class="headerlink" title="并发控制机制"></a>并发控制机制</h2><ol><li>基于锁的并发控制机制：2PL<ul><li>锁是一种控制并发访问数据的机制</li><li>事务必须在读和写数据前获得锁</li><li>使用锁必须恰当<ul><li>事务必须在读&#x2F;写数据前拥有锁，之后必须释放锁</li><li>不存在两个事务同时对同一数据加锁</li></ul></li></ul></li><li>基于时间戳的并发控制机制</li><li>基于多版本的并发控制机制MVCC</li></ol><h2 id="NoSQL数据库中的数据一致性"><a href="#NoSQL数据库中的数据一致性" class="headerlink" title="NoSQL数据库中的数据一致性"></a>NoSQL数据库中的数据一致性</h2><p>主流非关系型数据库是 <strong>分布式系统</strong></p><p>CAP是<strong>分布式环境</strong>中设计和部署系统要考虑的三个重要的系统需求</p><ol><li><strong>Consistency（强一致性）</strong>：更新操作执行成功后所有的用户都应该读到最新的值</li><li><strong>Availability（可用性）</strong>：每一个操作总能在一定的时间返回结果，不会发生错误和超时</li><li><strong>Partition Tolerance（分区容忍性）</strong>：当网络发生故障时，系统仍能保持响应客户的请求</li></ol><p>CAP理论是NoSQL数据库的基础。根据CAP理论，数据共享系统只能满足三个特性中的其中两个（RDBMS满足CA，分布式数据库满足CP，QQ头像更新满足AP）</p><ul><li>如果一致性和可用性是必需的，可用节点之间需要通信确保一致性，分区<strong>容忍性</strong>达不到</li><li>如果一致性和分区容忍性是必需的，为了实现一致性节点将变得不可用，<strong>可用性</strong>达不到</li><li>如果可用性和分区容忍性是必需的，考虑节点之间的通信需要，<strong>一致性</strong>做出让步，不考虑ACID。</li></ul><p><strong><u>分布式数据库始终支持分区容忍性</u></strong><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93PPT/image-20230216152051075.png" alt="image-20230216152051075" style="zoom:50%;" /></p><h2 id="数据一致性模型"><a href="#数据一致性模型" class="headerlink" title="数据一致性模型"></a>数据一致性模型</h2><p>对于数据不断增长的系统，尤其是OLAP应用，对<strong>可用性A和分区容忍性P</strong>的要求高于<strong>强一致性C</strong>。一些分布式系统通过复制数据的方法来提高系统的<strong>可靠性和容错性</strong>，将数据的不同副本存放在不同的机器上。</p><ol><li><p><strong>强一致性</strong></p><p>不论针对哪一个副本进行数据更新，之后所有的读操作都能读到最新的数据</p></li><li><p><strong>弱一致性</strong></p><p>数据更新后，用户可以在<strong>某个时间后</strong>读到更新后的数据——<strong>不一致性窗口</strong></p></li><li><p><strong>最终一致性</strong></p><p>弱一致性的特例，系统中的副本经过一段时间后<strong>最终能够达到一致</strong>，保证用户最终可以读到数据的更新</p></li></ol><h2 id="BASE：根据CAP定理的分布式数据库设计原则"><a href="#BASE：根据CAP定理的分布式数据库设计原则" class="headerlink" title="BASE：根据CAP定理的分布式数据库设计原则"></a>BASE：根据CAP定理的分布式数据库设计原则</h2><p>对于面向大数据的分布式系统，可用性和分区容忍性要求高，但对于一些应用，<strong>完全牺牲一致性会导致数据混乱</strong>。</p><ol><li><strong>Basically Available</strong>：基本可用，容忍部分失败而不导致系统整体不可用</li><li><strong>Soft-state</strong>：不要求系统一直保持<strong>强一致状态</strong>，系统状态可能随时间的推移有变化</li><li><strong>Eventual Consistency</strong>：一旦系统停止接受输入，系统中的副本经过一段时间后<strong>最终能够达到一致</strong>，保证用户最终可以读到数据的更新</li></ol><h1 id="数据模型-1"><a href="#数据模型-1" class="headerlink" title="数据模型"></a>数据模型</h1><h3 id="数据类型的演化"><a href="#数据类型的演化" class="headerlink" title="数据类型的演化"></a>数据类型的演化</h3><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93PPT/image-20230216154220679.png" alt="image-20230216154220679" style="zoom:67%;" /><h3 id="主流的4种非关系数据模型"><a href="#主流的4种非关系数据模型" class="headerlink" title="主流的4种非关系数据模型"></a>主流的4种非关系数据模型</h3><p><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93PPT/image-20230216154330503.png" alt="image-20230216154330503"></p><h4 id="key-x2F-value数据模型"><a href="#key-x2F-value数据模型" class="headerlink" title="key&#x2F;value数据模型"></a>key&#x2F;value数据模型</h4><p>Data are managed and represented as (key, value) pairs stored in <strong>efficient, highly scalable, key-based lookup</strong> structures such as <strong>Distributed Hash Tables (DHTs)</strong> and <strong>Log-Structured Merge-trees</strong> </p><h5 id="key"><a href="#key" class="headerlink" title="key"></a>key</h5><ul><li>key的内容可以有实际含义，而且可以是复杂的自定义结构，但要保证key的唯一性</li><li>key不是越长越好，否则内存开销大，增加查询代价</li><li>key太短也不可取，否则可能含义不清</li></ul><h5 id="value"><a href="#value" class="headerlink" title="value"></a>value</h5><ul><li>可以存放任何类型的数据</li><li>编码为BLOB形式存储</li><li>无需预先定义数据类型</li></ul><h5 id="key-value"><a href="#key-value" class="headerlink" title="key-value"></a>key-value</h5><ul><li>key和value形成一对一的对应关系</li></ul><h5 id="namespace"><a href="#namespace" class="headerlink" title="namespace"></a>namespace</h5><ul><li>由key-value对构成的集合，通常一类key-value对构成一个集合</li><li>在key-value的基础上加NameSpace目的是在内存中访问该数据集时，<strong>该数据集具有唯一名称</strong>。类似表的名称</li><li><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93PPT/image-20230216154758778.png" alt="image-20230216154758778" style="zoom: 80%;" /></li></ul><h5 id="示例：分布式web内容服务"><a href="#示例：分布式web内容服务" class="headerlink" title="示例：分布式web内容服务"></a>示例：分布式web内容服务</h5><ul><li>key表示URL</li><li>value表示任何形式的文件如PDFs，JPEGs，JSON或XML documents</li></ul><p>这样的设计可以在集群环境中管理大量的请求和web内容</p><h5 id="key-value存储类型"><a href="#key-value存储类型" class="headerlink" title="key-value存储类型"></a>key-value存储类型</h5><p>根据数据的持久性，key-value存储分为以下三类：</p><ul><li><strong>内存（In-memory）key-value存储：</strong>例如Memcached，数据存储在内存中，提供非常快速的数据访问，通常用做云中应用的的缓存层，处理密集型的请求，如 <strong>API调用、数据库查询、页面呈现</strong>等</li><li><strong>持久（Persistent） key-value存储：</strong>例如Riak KV and Oracle NoSQL, 提供对存储在HDD&#x2F;SSD中的信息高可用性访问</li><li><strong>混合（Hybrid）key-value存储：</strong>例如<strong>Redis</strong>和Aerospike，<strong>数据首先保存在内存中，当满足一定条件后数据持久存储</strong>。</li></ul><h5 id="基于key的查询操作"><a href="#基于key的查询操作" class="headerlink" title="基于key的查询操作"></a>基于key的查询操作</h5><ul><li>**get(key):**检索与key关联的value（或具有不同版本的value的列表）</li><li>**put(key,value):**仅当key不在数据库中时，将key-value对添加到数据库中。否则，将使用新版本更新存储的value。注意，即使更新存储的value中的一部分也需要替换整个value</li><li><strong>delete(key)</strong>: 删除key 及其关联的value(s)</li></ul><p>这些操作依赖<strong>一致性模型和索引</strong>，执行可通过REST或Lucene接口访问</p><h5 id="代表"><a href="#代表" class="headerlink" title="代表"></a>代表</h5><p>Redis    Dynamo    Scalaris    Spinnaker    Scatter    Walter    COPS</p><h4 id="Column-family-数据模型"><a href="#Column-family-数据模型" class="headerlink" title="Column family 数据模型"></a>Column family 数据模型</h4><ul><li>以表的形式存储数据，表有行和列<ul><li><strong>column</strong>是数据库中最小的存储单元，它是一个<strong>带时间戳的key-value对</strong></li></ul></li><li>每一个row 也是一个key-value 对 ， 表示一个高度结构化的数据项，<strong>row key是该row数据的唯一标示，value 是一个column的集合</strong>。</li><li>column family由<strong>任意数量的column</strong>构成，这些column在逻辑上相互关联，通常<strong>一起访问</strong><ul><li>Row和column确定为一个<strong>cell</strong>，每个cell存储同一份数据的多个版本，用<strong>时间戳</strong>来区分</li><li>时间戳：用于区分数据版本的索引</li></ul></li><li>访问控制、磁盘和内存使用统计在<strong>column family层面</strong>, column family的模式灵活，可以在运行时<strong>添加或删除其中的列</strong></li></ul><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93PPT/image-20230216155930387.png" alt="image-20230216155930387" style="zoom:67%;" /><h5 id="column存储实例"><a href="#column存储实例" class="headerlink" title="column存储实例"></a>column存储实例</h5><p>通过三元组**&lt;row-key, column-key,timestamp&gt;**检索cell的value</p><p>Column family数据库中的数据可以<strong>有效地进行水平（按行）和垂直（按列族）分区</strong>，使得它们适合存储大数据集</p><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93PPT/image-20230216160354950.png" alt="image-20230216160354950" style="zoom:80%;" /><h5 id="column-family嵌套结构"><a href="#column-family嵌套结构" class="headerlink" title="column family嵌套结构"></a>column family嵌套结构</h5><ul><li>一些column family数据库提供aggregate (或embedded&#x2F;nested）数据结构，允许<strong>一个column-family嵌套在其他column-families中</strong>(Apache Cassandra)</li><li>column family数据库支持不同的建模结构，例如<strong>row、 column family和nested column-families</strong> 。这些结构可用于根据查询工作负载<strong>创建aggregate层次结构</strong>，从而通过<strong>访问collocated数据</strong>来<strong>提高查询性能</strong>。</li></ul><h5 id="基于column-family存储的查询案例"><a href="#基于column-family存储的查询案例" class="headerlink" title="基于column family存储的查询案例"></a>基于column family存储的查询案例</h5><p>Facebook针对收件箱搜索服务，采用Column family数据模型组织数据（包含aggregate）</p><ul><li>提供服务：用户基于关键字或发件人&#x2F;收件人的名字查询发送和接收的邮件</li></ul><p><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93PPT/image-20230216161404872.png" alt="image-20230216161404872"></p><h5 id="具有存储和分析大数据的优势"><a href="#具有存储和分析大数据的优势" class="headerlink" title="具有存储和分析大数据的优势"></a>具有存储和分析大数据的优势</h5><p>Column family数据库中的数据可以<strong>有效地水平划分（by rows ）和垂直划分（by column-families）</strong>，适于存储大数据集</p><p><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93PPT/image-20230216163720905.png" alt="image-20230216163720905"></p><h6 id="为什么要用LSM树？"><a href="#为什么要用LSM树？" class="headerlink" title="为什么要用LSM树？"></a>为什么要用LSM树？</h6><p><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93PPT/image-20230216163819950.png" alt="image-20230216163819950"></p><h6 id="LSM树的结构"><a href="#LSM树的结构" class="headerlink" title="LSM树的结构"></a>LSM树的结构</h6><p><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93PPT/image-20230216163837412.png" alt="image-20230216163837412"></p><h6 id="LSM树的insert操作"><a href="#LSM树的insert操作" class="headerlink" title="LSM树的insert操作"></a>LSM树的insert操作</h6><p><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93PPT/image-20230216163852921.png" alt="image-20230216163852921"></p><h6 id="LSM树的merge操作"><a href="#LSM树的merge操作" class="headerlink" title="LSM树的merge操作"></a>LSM树的merge操作</h6><p><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93PPT/image-20230216163909299.png" alt="image-20230216163909299"></p><h6 id="LSM树的查找与删除"><a href="#LSM树的查找与删除" class="headerlink" title="LSM树的查找与删除"></a>LSM树的查找与删除</h6><p><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93PPT/image-20230216163927831.png" alt="image-20230216163927831"></p><h6 id="以Hbase为例的LSM树读写文件"><a href="#以Hbase为例的LSM树读写文件" class="headerlink" title="以Hbase为例的LSM树读写文件"></a>以Hbase为例的LSM树读写文件</h6><p><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93PPT/image-20230216163947386.png" alt="image-20230216163947386"></p><p>Hbase的一个column family本质上是一棵<strong>LSM树(Log-Structured Merge Tree)</strong></p><p>LSM树分为内存部分和磁盘部分。</p><ul><li><p>内存部分是一个维护有序数据集合的数据结构。一般来讲，内存数据结构可以选择平衡二叉树、红黑树、跳跃表（SkipList）等维护有序集的数据结构，由于考虑并发性能，HBase选择了表现更优秀的跳跃表。</p></li><li><p>磁盘部分是由一个个独立的文件组成，每一个文件又是由一个个数据块组成。对于数据存储在磁盘上的数据库系统来说，磁盘寻道以及数据读取都是非常耗时的操作（简称IO耗时）。<strong>为了避免不必要的IO耗时，可以在磁盘中存储一些额外的二进制数据，这些数据用来判断对于给定的key是否有可能存储在这个数据块中，这个数据结构称为布隆过滤器（BloomFilter）。</strong><strong>(利用布隆过滤器进行IO优化)</strong>:star:</p></li><li><p>跳跃表（SkipList）是一种能高效实现插入、删除、查找的内存数据结构，复杂度都是O(logN）。与红黑树以及其他的二分查找树相比，跳跃表的优势在于实现简单，而且在并发场景下加锁粒度更小，从而可以实现更高的并发性。</p></li><li><p>LSM树是一种磁盘数据的索引结构。LSM树的索引对写入请求更友好。因为无论是何种写入请求，LSM树都会将写入操作处理为一次顺序写，而HDFS擅长的正是顺序写（且HDFS不支持随机写）。</p></li><li><p>一个LSM树的索引主要由两部分构成：内存部分和磁盘部分。内存部分是一个ConcurrentSkipListMap，Key是rowkey、<strong>column family</strong>、qualifier、type以及timestamp， Value是<strong>字节数组</strong>。</p></li><li><p>随着数据不断写入MemStore，一旦内存超过阈值会将数据flush到磁盘，生产HFile；多个小HFile文件会compact成一个大HFile。</p><p>compact操作分成两种类型。</p><ul><li>major compact，是将所有的hfile一次合并成一个文件。<strong>好处是</strong>，合并之后只有一个文件，读取的性能好；<strong>但它的问题是</strong>，合并所有的文件可能需要很长的时间并消耗大量的IO带宽，所以major compact不宜使用太频繁，适合周期性地跑。</li><li>minor compact，即选中少数几个hfile 合并成一个文件。<strong>优点是</strong>，可以进行局部的compact，通过少量的IO减少文件数量，提升读取操作的性能，适合较高频率地跑；但它的<strong>缺点是</strong>，只合并了局部的数据，对于那些全局删除操作，无法在合并过程中完全删除。</li><li>minor compact虽然能减少文件，但却无法彻底清除那些delete操作。而major compact能完全清理那些delete操作，保证数据的最小化。</li></ul></li></ul><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93PPT/image-20230216162600345.png" alt="image-20230216162600345" style="zoom:80%;" /><h5 id="布隆过滤器"><a href="#布隆过滤器" class="headerlink" title="布隆过滤器"></a>布隆过滤器</h5><p>布隆过滤器对任意给定w，给出的存在性结果为两种：</p><ul><li>w可能存在于集合A中</li><li>w肯定不在集合A中</li></ul><p>布隆过滤器由一个长度为N的01数组array组成。首先将数组array每个元素初始设为0。<br>对集合A中的每个元素w，做K次哈希，第i次哈希值对N取模得到一个 index(i)，即 index(i) &#x3D; HASH_i(w) % N，将array数组中的array[index(i)]置为1。最终array变成一个某些元素为1的01数组。</p><h6 id="布隆过滤器算法示例"><a href="#布隆过滤器算法示例" class="headerlink" title="布隆过滤器算法示例"></a>布隆过滤器算法示例</h6><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">A=&#123;x，y，z&#125;，N=<span class="hljs-number">18</span>，K=<span class="hljs-number">3</span>。<br>初始化<span class="hljs-built_in">array</span> = <span class="hljs-number">000000000000000000</span><br>对元素x，<span class="hljs-constructor">HASH_0(<span class="hljs-params">x</span>)</span> % N=<span class="hljs-number">1</span>，<span class="hljs-constructor">HASH_1(<span class="hljs-params">x</span>)</span> % N=<span class="hljs-number">5</span>，<span class="hljs-constructor">HASH_2(<span class="hljs-params">x</span>)</span> % N=<span class="hljs-number">13</span>。因此<span class="hljs-built_in">array</span>=<span class="hljs-number">010001000000010000</span>;<br>对元素y，<span class="hljs-constructor">HASH_0(<span class="hljs-params">y</span>)</span> % N=<span class="hljs-number">4</span>，<span class="hljs-constructor">HASH_1(<span class="hljs-params">y</span>)</span> % N=<span class="hljs-number">11</span>，<span class="hljs-constructor">HASH_2(<span class="hljs-params">y</span>)</span> % N=<span class="hljs-number">16</span>。因此<span class="hljs-built_in">array</span>=<span class="hljs-number">010011000001010010</span>;<br>对元素z，<span class="hljs-constructor">HASH_0(<span class="hljs-params">z</span>)</span> % N=<span class="hljs-number">3</span>，<span class="hljs-constructor">HASH_1(<span class="hljs-params">y</span>)</span> % N=<span class="hljs-number">5</span>，<span class="hljs-constructor">HASH_2(<span class="hljs-params">y</span>)</span> % N=<span class="hljs-number">11</span>。因此<span class="hljs-built_in">array</span>=<span class="hljs-number">010111000001010010</span>;<br>最终得到的布隆过滤器串为：<span class="hljs-number">010111000001010010</span>。<br></code></pre></td></tr></table></figure><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93PPT/image-20230216163205801.png" alt="image-20230216163205801" style="zoom:67%;" /><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">对于元素w，K次哈希值分别为：<br><span class="hljs-constructor">HASH_0(<span class="hljs-params">w</span>)</span> %N=<span class="hljs-number">4</span><br><span class="hljs-constructor">HASH_1(<span class="hljs-params">w</span>)</span> %N=<span class="hljs-number">13</span><br><span class="hljs-constructor">HASH_2(<span class="hljs-params">w</span>)</span> %N=<span class="hljs-number">15</span><br>可以发现，布隆过滤器串中的第<span class="hljs-number">15</span>位为<span class="hljs-number">0</span>，因此可以确认w肯定不在集合A中。因为若w在A中，则第<span class="hljs-number">15</span>位必定为<span class="hljs-number">1</span>。<br><br>如果有另外一个元素t，K次哈希值分别为：<br><span class="hljs-constructor">HASH_0(<span class="hljs-params">t</span>)</span> %N=<span class="hljs-number">5</span><br><span class="hljs-constructor">HASH_1(<span class="hljs-params">t</span>)</span> %N=<span class="hljs-number">11</span><br><span class="hljs-constructor">HASH_2(<span class="hljs-params">t</span>)</span> %N=<span class="hljs-number">13</span><br>发现布隆过滤器串中的第<span class="hljs-number">5</span>、<span class="hljs-number">11</span>、<span class="hljs-number">13</span>位都为<span class="hljs-number">1</span>，但是却没法肯定t一定在集合A中。<br></code></pre></td></tr></table></figure><h6 id="Hbase与布隆过滤器"><a href="#Hbase与布隆过滤器" class="headerlink" title="Hbase与布隆过滤器"></a>Hbase与布隆过滤器</h6><p>由于布隆过滤器只需占用极小的空间，便可给出“可能存在”和“肯定不存在”的存在性判断，可以提前过滤掉很多不必要的数据块，<strong>从而节省了大量的磁盘IO</strong>。HBase的<strong>Get操作</strong>就是通过<strong>运用低成本高效率的布隆过滤器来过滤大量无效数据块的</strong>，从而节省大量磁盘IO。</p><h6 id="LSM树存储引擎"><a href="#LSM树存储引擎" class="headerlink" title="LSM树存储引擎"></a>LSM树存储引擎</h6><p>LSM-Tree主题思想为划分不同等级的数。可以想象一份索引由两棵树组成：一个存在于内存（可以使用其他树结构），一个存在于磁盘（如下图）。</p><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93PPT/image-20230216163533367.png" alt="image-20230216163533367" style="zoom:67%;" /><p>LSM树的设计思想非常朴素：将对数据的修改增量保持在内存中，达到指定的大小限制后将这些修改操作批量写入磁盘，不过读取的时候稍微麻烦，需要合并磁盘中历史数据和内存中最近修改操作，所以写入性能大大提升，读取时可能需要先看是否命中内存，否则需要访问较多的磁盘文件。极端的来说，基于LSM树实现的HBase的写性能比Mysql高了一个数量级，读性能低了一个数量级。</p><p>数据首先会插入到内存中的树，为了防止数据丢失，写内存的同时需要暂时持久化到磁盘，即输入数据时数据会以完全有序的形式先存储在日志文件中（对应HBase的MemStore和HLog）。当日志文件被修改时，对应的更新会被先保存在内存中来加速查询。</p><p>当内存中树的数据达到阀值时，会进行合并操作。合并操作会从左至右遍历内存中的叶子节点与磁盘中树的叶子节点进行合并，当合并的数据量达到磁盘的存储页的大小时，会将合并的数据持久化到磁盘。同时更新父亲节点对叶子节点的指针（如下图）。</p><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93PPT/image-20230216163556696.png" alt="image-20230216163556696" style="zoom:67%;" /><p>查找通过合并的方式完成，首先搜索内存存储结构，接下来是磁盘存储结构。</p><p>LSM树所有节点都是满的并按页存储，经过多次的flush会创建很多数据存储文件，后台线程会将小文件聚合成大文件，因此磁盘的寻道操作就会被限制在一定数目的数据存储文件中，以优化读性能。磁盘上的树结构也可以分割成多个存储文件，因为所有的存储数据都是按照Key有序排列的，因此在现有节点中插入新的关键字不需要重新排序。</p><p>LSM-Tree属于传输型，在磁盘传输速率上进行文件的排序和合并以及日志操作，可以更好的拓展到更大的数据规模上，因为它会使用日志文件和一个内存存储结构把随机写操作转化为顺序写，读写独立，不会产生两种操作的竞争。</p><h6 id="LSM树在Hbase中的应用"><a href="#LSM树在Hbase中的应用" class="headerlink" title="LSM树在Hbase中的应用"></a>LSM树在Hbase中的应用</h6><p>LSM树可以看成n层合并树。在HBase中，它把随机写转换成对MemStore和HFile的连续写。下图展示了LSM树数据写的过程。</p><p><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93PPT/image-20230216163619959.png" alt="image-20230216163619959"></p><ul><li><p><strong>数据写（插入，更新）：</strong>数据首先顺序写如HLog（WAL），然后写到MemStore，在MemStore中，数据是一个2层B+树（上图中的C0树）。MemStore满了之后，数据会被刷到StoreFile（HFile），在StoreFile中，数据是3层B+树（图2中的C1树），并针对顺序磁盘操作进行优化。</p></li><li><p><strong>数据读：</strong>首先搜索MemStore，如果不在MemStore中，则到StoreFile中寻找。</p></li><li><p><strong>数据删除：</strong>不会去删除磁盘上的数据，而是为数据添加一个删除标记。在随后的major compaction中，被删除的数据和删除标记才会真的被删除。</p><p>LSM数据更新只在内存中操作，没有磁盘访问，因此比B+树要快。对于数据读来说，如果读取的是最近访问过的数据，LSM树能减少磁盘访问，提高性能。</p></li></ul><h4 id="document-oriented数据模型"><a href="#document-oriented数据模型" class="headerlink" title="document-oriented数据模型"></a>document-oriented数据模型</h4><ul><li>key&#x2F;value的扩展形式，value表示为document，以标准半结构化格式，如XML&#x2F;JSON或BSON</li><li>采用Key-Value结构组织document，value部分即document</li><li><strong>Document：是document-oriented数据库的基本概念</strong>，是自包含的的数据单元，<strong>是一系列数据项的集合</strong><ol><li>每个数据项有名字与对应的值，值既可以是简单的数据类型，也可以是复杂的类型。</li><li>每个document有全局唯一的ID和版本号</li><li>document是半结构化数据类型的数据</li><li>document具有灵活的模式，可以<strong>在运行时添加或删除属性</strong>（属性具有名称和一个或多个值）</li></ol></li><li>同一个document中数据的属性数量喝类型都不同</li><li>document的格式已知，适合在key和value上<strong>建立索引和实现查询性能</strong></li></ul><h5 id="Document-oriented数据库基本存储结构"><a href="#Document-oriented数据库基本存储结构" class="headerlink" title="Document-oriented数据库基本存储结构"></a>Document-oriented数据库基本存储结构</h5><ul><li>适用于数据可以表达为<strong>document格式</strong>的应用，例如<strong>内容管理、博客</strong>等，数据包含各种属性，存在<strong>嵌套</strong>的情况。</li><li><strong>key&#x2F;value pair形式：</strong><ol><li>基本的key&#x2F;value pair</li><li>带结构的key&#x2F;value pair<ul><li>value有数组或嵌入的文档</li></ul></li><li>多结构的key&#x2F;value pair<ul><li>value的结构不同</li></ul></li></ol></li></ul><ol><li>Document<ul><li>key&#x2F;value pair构成的有序集</li><li>JSON、XML、BSON格式</li></ul></li><li>collection<ul><li>由若干个document构成的对象，通常这些document具有相关性</li><li><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93PPT/image-20230216170249457.png" alt="image-20230216170249457" style="zoom:67%;" /></li></ul></li><li>database<ul><li>包含多个集合</li><li>Database&#x3D;{collection}</li></ul></li></ol><h5 id="数据查询"><a href="#数据查询" class="headerlink" title="数据查询"></a>数据查询</h5><ul><li><p>允许查询document中的数据，而不必检索整个document</p></li><li><p>CouchBase 中的SQL-like 查询语言 (N1QL)</p><p>例如：查找title&#x3D;“Vince Shields”的文档，返回属性 url 和categories的值：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> c.url, c.categories <span class="hljs-keyword">FROM</span> Content_MetaData c <span class="hljs-keyword">WHERE</span> title <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Vince Shields&#x27;</span><br></code></pre></td></tr></table></figure></li></ul><h5 id="document-oriented数据模型的代表"><a href="#document-oriented数据模型的代表" class="headerlink" title="document-oriented数据模型的代表"></a>document-oriented数据模型的代表</h5><p>MongoDB    couchbase   Apache CouchDB    ArangoDB</p><h4 id="图数据模型"><a href="#图数据模型" class="headerlink" title="图数据模型"></a>图数据模型</h4><h5 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h5><p>语义Web、Web数据挖掘、知识图谱、生物系统中蛋白质的相互作用、社交网络应用等产生了大量面向图的数据，催生了图数据管理的需求。</p><ul><li>有效地存储图数据，提供查询和分析图数据的操作</li><li>图论作为数据存储的理论基础：顶点表示实体、边表示实体间的关系</li></ul><p>由结点、结点间关系和属性表达和存储数据</p><ol><li>节点存储数据</li><li>边存储节点之间的关系</li><li>属性表达数据的特征</li></ol><p>用Traversal进行数据查询<img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93PPT/image-20230216170846694.png" alt="image-20230216170846694" style="zoom:67%;" /></p><h5 id="图模型种类"><a href="#图模型种类" class="headerlink" title="图模型种类"></a>图模型种类</h5><p>属性图（Property Gragh）、资源描述框架（RDF）三元组和超图（HyperGragh）</p><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93PPT/image-20230216170958612.png" alt="image-20230216170958612" style="zoom:67%;" /><h5 id="图模型的应用场景"><a href="#图模型的应用场景" class="headerlink" title="图模型的应用场景"></a>图模型的应用场景</h5><p>社交网络、交通物流、推荐引擎、欺诈检测、知识图谱、生命科学和 IT&#x2F;网络游戏开发等</p><h5 id="图数据模型应用案例"><a href="#图数据模型应用案例" class="headerlink" title="图数据模型应用案例"></a>图数据模型应用案例</h5><p>Facebook的社交网络采用了图数据模型；Facebook实现了一个分布式的图数据库TAO，TAO采用分片的NoSQL数据库持久化存储社交网络图</p><h5 id="图数据存储"><a href="#图数据存储" class="headerlink" title="图数据存储"></a>图数据存储</h5><ol><li>Nonnative<ul><li>基于非图数据存储，如document-oriented存储或者关系数据库系统，通常需要<strong>索引技术</strong>提高图遍历的效率</li><li>例如，OrientDB、ArangoDB采用文档方式存储，Titan有两种存储选择： wide-column和 key-value).</li><li>分区策略基于底层的存储</li></ul></li><li>Native<ul><li>存储基于图数据模型</li><li>例如Neo4j</li></ul></li><li>三种著名的图优化存储技术<ul><li>Compressed Sparse Row (CSR)</li><li>adjacency list</li><li>edge list</li></ul></li></ol><h5 id="图数据访问"><a href="#图数据访问" class="headerlink" title="图数据访问"></a>图数据访问</h5><ol><li><p>online gragh navigations</p><ul><li><p>a basic path query </p><p><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93PPT/image-20230216172218794.png" alt="image-20230216172218794"></p></li><li><p>a pattern matching query</p><p><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93PPT/image-20230216172234107.png" alt="image-20230216172234107"></p></li></ul></li><li><p>offline analytical gragh computations</p><ul><li>需访问整个图的顶点和边的有效部分（例如，研究图的拓扑结构和寻找连通的组件），需要考虑高吞吐量的需求</li></ul></li></ol><h5 id="图数据库代表"><a href="#图数据库代表" class="headerlink" title="图数据库代表"></a>图数据库代表</h5><p>Neo4j    Titan    OrientDB    GraghDB</p><h1 id="Bigtable"><a href="#Bigtable" class="headerlink" title="Bigtable"></a>Bigtable</h1><h2 id="Bigtable出现的背景"><a href="#Bigtable出现的背景" class="headerlink" title="Bigtable出现的背景"></a>Bigtable出现的背景</h2><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93PPT/image-20230216172637127.png" alt="image-20230216172637127" style="zoom:67%;" /><h2 id="Bigtable设计的动机与目标"><a href="#Bigtable设计的动机与目标" class="headerlink" title="Bigtable设计的动机与目标"></a>Bigtable设计的动机与目标</h2><h3 id="动机-1"><a href="#动机-1" class="headerlink" title="动机"></a>动机</h3><ul><li>需要存储的数据种类繁多、类型多样<ul><li>URL、图片、文字、视频、html文件、用户设置数据等</li></ul></li><li>需要处理海量的 <strong>服务请求</strong></li><li>商用数据库无法满足Google的需求，底层系统技术的掌控便于系统维护和升级</li></ul><h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><ul><li><strong>广泛的适用性：</strong>满足Google的系列产品的需求</li><li><strong>很强的可扩展性：</strong>横向扩展和纵向扩展</li><li><strong>高可用性：</strong>确保系统24×7可用</li><li><strong>简单：</strong>底层系统简单减少出错概率，为上层应用开发提供便利</li></ul><h2 id="Bigtable数据模型"><a href="#Bigtable数据模型" class="headerlink" title="Bigtable数据模型"></a>Bigtable数据模型</h2><ul><li><strong>分布式多维映射表结构</strong></li><li><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93PPT/image-20230216172949303.png" alt="image-20230216172949303"></li><li>存储逻辑表示为（row:string,column:string, item:int64) $\rightarrow$ string<ul><li>Google追溯谁访问过网站：只要用户点击网页，点击行为就被记录下来<ul><li>记录URL、时间戳以及网页，进行统计分析    日志:heart:</li><li><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93PPT/image-20230216173134970.png" alt="image-20230216173134970" style="zoom:67%;" />例如，网页<a href="http://www.cnn.com的数据片段/">www.cnn.com的数据片段</a><ul><li>行名称是倒排的URL<ul><li>便于同一地址域的网页被存储在表中连续的位置</li><li>便于数据压缩，大幅提高压缩率</li></ul></li><li>contents列族包含了网页内容</li><li>anchor列族包含了任何引用这个页面的anchor文本<ul><li>CNN的主页被Sports Illustrated和MY-look主页同时引用，因此，行包含了名称为”anchor:cnnsi.com”和” anchor:my.look.ca”的列。</li></ul></li><li>每个anchor单元格都只一个版本，contents列有三个版本，分别对应于时间戳t3,t5和t6。</li></ul></li></ul></li></ul></li></ul><h3 id="Bigtable的数据模型-Rows"><a href="#Bigtable的数据模型-Rows" class="headerlink" title="Bigtable的数据模型-Rows"></a>Bigtable的数据模型-Rows</h3><ul><li>BigTable的row key是任意的字符串，大小不超过64KB</li><li>对于每行数据的读写操作都是<strong>原子的（atomic）</strong>，不管这个行中所包含的<strong>列族数量</strong>是多少</li><li>Bigtable中的数据按照row key的 <strong>字典顺序</strong>排序</li><li>单个大规模的大表不利于数据的处理与分析，BigTable将一个表划分成多个<strong>子表（Tablet）</strong>，是<strong>负载均衡和数据分发</strong>的基本单位。</li></ul><h3 id="BigTable的数据模型-Column-Families"><a href="#BigTable的数据模型-Column-Families" class="headerlink" title="BigTable的数据模型-Column Families"></a>BigTable的数据模型-Column Families</h3><ul><li>BigTable将<strong>column key</strong>组织成<strong>列族（column family）</strong>，是基本的访问控制单元，每个列族的数据属于同一个类型，同列族数据压缩存储。</li><li>在把数据存放到这个<strong>column family</strong>的某个<strong>column key</strong>下之前，必须首先创建这个<strong>column family</strong> ，创建后，可以使用<strong>column key</strong> <ol><li>表当中所包含的column family的数量尽可能少（至多几百个列族），在操作过程当中， column family很少发生变化；一个表可以包含无限数量的列</li><li>column key命名语法：family:qualifier<ul><li>例: anchor:cnnsi.com</li></ul></li><li><strong>访问控制</strong>以及<strong>磁盘、内存审计</strong>在<strong>column family</strong>级别完成</li></ol></li></ul><h3 id="BigTable的数据模型-timestamps"><a href="#BigTable的数据模型-timestamps" class="headerlink" title="BigTable的数据模型-timestamps"></a>BigTable的数据模型-timestamps</h3><ol><li>在BigTable中，<strong>每个单元都包含相同数据的多个版本</strong>，这些版本采用<strong>时间戳</strong>进行索引。</li><li>时间戳是64位整数，代表真实时间，以微秒来计算。客户应用也可以直接分配时间戳。</li><li>需要避免冲突的应用必须生成唯一的时间戳。</li><li>一个单元的不同版本根据<strong>时间戳降序</strong>顺序存储，最新的版本可以被最先读取。</li><li>为了减轻版本数据的管理负担， BigTable支持<strong>用户设定保存单元中数据的最近n个版本</strong>，或者只保存足够新版本（比如只保存最近7天内的数据版本）</li></ol><h2 id="Bigtable体系结构"><a href="#Bigtable体系结构" class="headerlink" title="Bigtable体系结构"></a>Bigtable体系结构</h2><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93PPT/image-20230216174120767.png" alt="image-20230216174120767" style="zoom:80%;" /><ol><li><p><strong>BigTable基于Google的的三个云计算组件</strong></p><ul><li><p>GFS：Google File System</p><p>基于廉价的商用计算机的大型分布式文件系统</p></li><li><p>Chubby</p><p>基于松耦合分布式系统的<strong>锁服务</strong>；存储元服务的存储系统；名字服务</p></li><li><p>WorkQueue</p><p>分布式任务调度器，用于处理分布式系统队列分组与调度；未公开</p></li></ul></li></ol><h3 id="分布式锁服务Chubby"><a href="#分布式锁服务Chubby" class="headerlink" title="分布式锁服务Chubby"></a>分布式锁服务Chubby</h3><ol><li>提供<strong>存储服务</strong>并为其他基础设施（GFS和Bigtable）提供<strong>协调服务</strong><ul><li><strong>GFS</strong>使用Chubby选取<strong>master服务器</strong></li><li><strong>Bigtable</strong>使用chubby<strong>指定master服务器并发现、控制相关的子表服务器。</strong></li></ul></li><li>提供粗粒度的分布式锁<ul><li>Advisory lock，不是Mandatory lock</li><li>锁持有时间可以长达几天</li></ul></li><li>提供一个文件系统，为小文件提供可靠存储<strong>，补充GFS提供的服务</strong></li><li>做Google内部的 <strong>名字服务</strong></li><li>核心服务： <strong>提供分布式共识解决方案</strong>（其他服务从这一服务衍生）</li><li>通常一个数据中心运行一个chubby cell（服务实例）</li></ol><h3 id="设计chubby的一些考虑"><a href="#设计chubby的一些考虑" class="headerlink" title="设计chubby的一些考虑"></a>设计chubby的一些考虑</h3><ol><li>Google没有直接实现包含Paxos算法的函数库来保持<strong>数据一致性</strong>，而是<strong>设计实现了锁服务Chubby</strong><ul><li>单独的锁服务可以保证原有系统架构不发生改变</li><li>避免因大量系统组件之间的<strong>事件通信</strong>导致的系统性能下降<ul><li>系统中很多事件的发生需要告知其它用户和服务器，使用<strong>基于文件系统的锁服务</strong>可以将变动写入文件，从而需要了解变动的用户和服务器直接访问文件，</li></ul></li><li>相比一致性算法，<strong>基于锁的开发接口</strong>容易被开发者接受</li><li><strong>单独的锁服务</strong>使用<strong>一台服务器</strong>可以保证<strong>高可用性</strong></li><li>实现chubby服务采用<strong>多台服务器</strong>实现高可用性，而<strong>外部用户</strong>则需<strong>一台服务器</strong>保证高可用性。</li><li>Chubby采用<strong>建议性锁</strong>而不是<strong>强制性锁</strong><ul><li>当用户访问拥有锁的文件时，<strong>强制性锁阻止访问，而建议性锁不会阻止</strong>。</li></ul></li></ul></li></ol><h3 id="chubby的体系结构"><a href="#chubby的体系结构" class="headerlink" title="chubby的体系结构"></a>chubby的体系结构</h3><p><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93PPT/image-20230216175257945.png" alt="image-20230216175257945" style="zoom:67%;" /><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93PPT/image-20230216175316227.png" alt="image-20230216175316227"></p><ol><li>两个部分：client和server，通过RPC进行通信<ul><li>客户端每个客户有一个<strong>Chubby library</strong>，客户端应用调用这个库中的函数</li><li>服务端称作Chubby cell，通常由<strong>5个副本</strong>组成，其中一个副本被指定为<strong>主副本(master)</strong>,并且一段时间只有一个master。<ul><li>这段时间被称为master lease</li></ul></li></ul></li><li>每个副本维护一个小型数据库，管理Chubby命名空间中的实体，即<strong>目录和锁</strong></li><li>数据库的一致性使用底层的<strong>共识协议（Paxos算法）</strong>实现<ul><li>基于操作日志</li><li>支持创建快照snapshots(在给定时间点上完整的系统状态)</li></ul></li></ol><h3 id="chubby文件"><a href="#chubby文件" class="headerlink" title="chubby文件"></a>chubby文件</h3><ol><li>Chubby提供基于<strong>文件系统</strong>的抽象，每一个数据对象是一个文件，文件组织成层次的命名空间，采用 <strong>目录结构</strong><ul><li>所有操作<strong>在文件</strong>的基础上完成</li></ul></li><li>Chubby的名字空间结构类似于<strong>文件系统</strong>，这样就使得可以为应用<strong>提供特定的API</strong>，也可以<strong>使用他文件系统的接口</strong>，例如GFS</li><li>文件系统与Unix文件系统类似<ul><li>文件名形式：&#x2F;ls&#x2F;chubby_cell&#x2F;directory_name&#x2F;…&#x2F;file_name<ul><li>ls指锁服务lock service，指明是chubby系统的一部分</li><li>Chubby_cell是chubby系统的一个特定实例的名字</li></ul></li></ul></li><li><strong>名字空间</strong>由文件和目录组成，统称为<strong>node</strong>。每个node在一个Chubby cell单元中只有一个名称与之关联</li><li>实现时，文件系统由多个节点组成，分为<strong>永久型和临时型</strong>，每个节点是一个文件或目录，包含元数据<ul><li><strong>三个访问控制列表(ACLs)：</strong>用于控制读、写操作及修改节点的访问控制列表(ACL)。</li></ul></li><li>每个节点的元数据还包含4个严格递增的64位数字，通过它们<strong>客户端可以很方便的检测出变化</strong><ul><li>实例号</li><li>内容生成号</li><li>锁生成号</li><li>ACL生成号</li></ul></li></ol><h3 id="chubby访问接口"><a href="#chubby访问接口" class="headerlink" title="chubby访问接口"></a>chubby访问接口</h3><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93PPT/image-20230216213320641.png" alt="image-20230216213320641" style="zoom:80%;" /><h3 id="chubby一致性"><a href="#chubby一致性" class="headerlink" title="chubby一致性"></a>chubby一致性</h3><ul><li>Chubby cell有5个副本，通过选举产生<strong>主服务器</strong>（主副本），存在一致性问题<ul><li>采用Paxos算法</li></ul></li><li>客户端所有读写操作由主服务器负责完成，<strong>写操作</strong>面临数据一致性问题<ul><li>采用Paxos算法</li></ul></li></ul><h2 id="Bigtable的基本架构——Master-Server"><a href="#Bigtable的基本架构——Master-Server" class="headerlink" title="Bigtable的基本架构——Master Server"></a>Bigtable的基本架构——Master Server</h2><ul><li><p><strong>Master Server的作用</strong></p><ol><li>新Tablet分配</li><li>Tablet Server状态监控</li><li>Tablet Server之间的负载均衡</li></ol></li><li><p><strong>Master Server启动</strong></p><p>（1）从Chubby中获取一个<strong>独占锁</strong>，确保同一时间只有一个Master Server</p><p>（2）扫描服务器目录，发现目前<strong>活跃的Tablet Server</strong></p><p>（3）与所有活跃Tablet Server建立联系并了解<strong>Tablet的分配情况</strong></p><p>（4）扫描METADATA表，<strong>发现未分配的Tablet并将其分配到合适的Tablet Server</strong>。如果METADATA表未分配，则首先将<strong>Root Tablet</strong>加入未分配的Tablet中<strong>（Root Tablet保存其他Metadata Tablet的信息）</strong> </p></li><li><p>Bigtable中<strong>数据以Tablet的形式保存在Tablet Server上，客户只和Tablet Server通信。</strong></p></li><li><p><strong>SSTable（Sorted String Table）</strong></p><ol><li>Sstable是Google为Bigtable设计的<strong>内部数据存储格式</strong>，所有SSTable文件存储在<strong>GFS</strong>上。</li><li>一个SSTable提供一个<strong>持久化的、排序的、不可变的、从key到value的映射</strong>，其中，key和value都是任意的字节字符串</li><li>用户通过key查询相应的值。</li></ol></li><li><p>SSTable中的数据被分成64KB大小的块，索引 保存块的位置信息</p><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93PPT/image-20230216213958715.png" alt="image-20230216213958715" style="zoom:50%;" /></li><li><p><strong>Tablet的组成</strong></p><ol><li>概念上， Tablet是表中<strong>一系列行的集合</strong></li><li>每个Tablet由多个<strong>SSTable和日志文件</strong>构成，不同Tablet的SSTable可以共享。</li><li>日志是一种共享文件，<strong>每Tablet Server仅保存一个日志文件，日志内容按key值排序</strong></li><li>tablet组成：<img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93PPT/image-20230216214104438.png" alt="image-20230216214104438" style="zoom:67%;" /></li></ol></li><li><p><strong>Tablet Location：类似B+树的三层架构</strong></p><ol><li>第一层是一个存储在Chubby中的文件，包含<strong>root tablet</strong>的位置信息。root tablet包含了所有tablet的位置信息，存储在METADATA表中。</li><li>每个METADATA表都包含一个user tablet集合的位置信息。</li><li>root tablet是METADATA表中第一个Tablet，任何情况下不会被拆分<strong>，保证了tablet的位置层次不会超过三层。</strong></li><li>METADATA表将<strong>每个子表</strong>的位置信息存储在一个<strong>Row key</strong>下， Row key由<strong>tablet所在的表的标识符和tablet的最后一行编码</strong>而成。</li></ol></li><li><p><strong>Bigtable使用Cache和Prefetch技术提高客户访问效率</strong></p><ol><li>子表的地址<strong>缓存</strong>在<strong>客户端</strong></li><li>如果缓存信息过时或为空，客户需要进行<strong>Network Round-trip通信</strong>来寻址</li></ol></li></ul><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93PPT/image-20230216214241187.png" alt="image-20230216214241187" style="zoom:67%;" /><ul><li><p><strong>Tablet Assignment</strong></p><ol><li>每次、每个Tablet最多被分配到一个Tablet Server。<strong>Master Server跟踪运行的Tablet Server的状况，</strong>掌握当前Tablet被分配到Tablet Server的情况，记录哪个Tablet还没有被分配。</li><li>当一个Tablet没有被分配，并且一个Tablet Server空间足够，可以容纳该Tablet且可用时，<strong>Master server</strong>向这个Tablet Server发送一个tablet load请求，<strong>将Tablet分配给这个Tablet Server 。</strong></li><li><strong>Chubby用于跟踪Tablet servers</strong>，Tablet server启动时请求互斥锁</li></ol></li><li><p><strong>Tablet数据存储</strong></p><ol><li><p>较新的数据存储在<strong>Memtable</strong>的有序缓存中</p></li><li><p>较早的数据以<strong>SSTable格式存储在GFS中</strong></p><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93PPT/image-20230216214853631.png" alt="image-20230216214853631" style="zoom:67%;" /></li></ol></li><li><p><strong>Tablet数据读写操作</strong></p><ol><li><p><strong>WriteOp：</strong>需要先访问<strong>Chubby</strong>中保存的访问控制列表，确定用户的写权限，认证后有效的修改操作会记录在提交日志里。当写操作提交后，它的内容被插入到<strong>memtable</strong></p></li><li><p><strong>ReadOp：</strong>需要先通过认证，然后合并<strong>内存表</strong>和<strong>SSTable表</strong>读数据。</p><ul><li>由于<strong>SSTable</strong>和<strong>memtable</strong>是字典排序的数据结构，合并视图的执行非常高效。</li></ul><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93PPT/image-20230216223305130.png" alt="image-20230216223305130" style="zoom:67%;" /></li></ol></li></ul><h2 id="BigTable的性能优化"><a href="#BigTable的性能优化" class="headerlink" title="BigTable的性能优化"></a>BigTable的性能优化</h2><h3 id="局部群组化-locality-groups"><a href="#局部群组化-locality-groups" class="headerlink" title="局部群组化(locality  groups)"></a>局部群组化(locality  groups)</h3><ol><li>多个<strong>column family</strong>一起分组到一个<strong>locality group</strong>中</li><li>为每个<strong>tablet</strong>中的每个<strong>locality group</strong>创建一个单独的<strong>SSTable</strong>。</li><li>通常<strong>不被一起访问的column family分割到不同的locality group</strong>，实现更高效的读</li><li>一些有用的参数，可以针对每个<strong>locality group</strong>来设定<ul><li>例如，一个locality group可以设置成存放在内存中。</li></ul></li></ol><h3 id="压缩-Compression"><a href="#压缩-Compression" class="headerlink" title="压缩(Compression)"></a>压缩(Compression)</h3><ol><li>客户端可以决定是否对相应于某个locality group的SSTable进行<strong>压缩和压缩格式，</strong>自定义的压缩格式可以被应用到每个<strong>SSTable</strong>块中（块的尺寸可以采用与locality group相关的参数来进行控制）。</li><li>许多客户端都使用“<strong>两段自定义压缩模式</strong>”。第一遍使用<strong>Bentley and McIlroy模式</strong>，它对一个大窗口内的长公共字符串进行压缩。第二遍使用一个<strong>快速的压缩算法</strong>，这个压缩算法在一个16KB数据量的窗口内寻找重复数据。</li></ol><h3 id="改进读性能的缓存技术-caching-for-read-performance"><a href="#改进读性能的缓存技术-caching-for-read-performance" class="headerlink" title="改进读性能的缓存技术(caching for read performance)"></a>改进读性能的缓存技术(caching for read performance)</h3><ol><li><strong>tablet服务器使用两级缓存</strong><ul><li><strong>Scan Cache是高层次的缓存</strong>，它缓存了由tablet服务器代码的SSTable接口返回的key-value对。ScanCache对于那些频繁读取相同数据的应用来说非常有用。</li><li><strong>BlockCache是低层次的缓存</strong>，它缓存了从GFS当中读取的SSTable块。Block缓存对于那些倾向于读取与自己最近读取数据临近的数据的应用来说，比较有用。</li></ul></li></ol><h3 id="布隆过滤器-Bloom-Filter"><a href="#布隆过滤器-Bloom-Filter" class="headerlink" title="布隆过滤器(Bloom Filter)"></a>布隆过滤器(Bloom Filter)</h3><ol><li>一个读操作必须从构成一个tablet的当前状态的所有SSTable中读取数据。</li><li>为<strong>减少磁盘访问</strong>，通过bloom过滤器可以查询一个SSTable是否包含了特定行&#x2F;列对的数据。</li><li>对于某些应用程序，只使用了<strong>少量的tablet服务器内存来存储Bloom过滤器</strong>，却大幅度减少了读操作需要的<strong>磁盘访问次数。</strong></li><li>Bloom过滤器的使用也意味着对不存在的行或列的大多数查询不需要访问硬盘。</li></ol><h1 id="HBase"><a href="#HBase" class="headerlink" title="HBase"></a>HBase</h1><h2 id="Hbase数据模型"><a href="#Hbase数据模型" class="headerlink" title="Hbase数据模型"></a>Hbase数据模型</h2><ol><li>在Hbase中, 数据以表的形式存放<ul><li>一个table有若干行，其中每列可以有多个版本</li><li>一行（row）由若干列组成，由<strong>row key</strong>确定存储，具有<strong>唯一性</strong></li><li><strong>Column（列）</strong>是Hbase最基本的单位</li><li>若干列形成<strong>column family（列族）</strong><ol><li>一个列族的所有列存储在同一个底层文件中：<strong>HFile</strong></li></ol></li><li>在每个cell存储不同的值</li><li>每一列的值或cell的值都有<strong>时间戳</strong></li></ul></li><li>所有的行按row key<strong>字典序</strong>排序存储</li><li>行数据的存取操作是<strong>原子的</strong></li></ol><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93PPT/image-20230216225507736.png" alt="image-20230216225507736" style="zoom:80%;" /><h3 id="HBase数据模型术语"><a href="#HBase数据模型术语" class="headerlink" title="HBase数据模型术语"></a>HBase数据模型术语</h3><ol><li>Table：一个Hbase表由多行构成</li><li>Row：每行由一个row key和一个或多个具有值的列组成，并按照row key排序</li><li>Column：列由一个<strong>column family</strong>和 <strong>column qualifier</strong>组成, 用 冒号<strong>（:）</strong>字符分隔。</li><li>Column Family：物理上，<strong>column family所有列及其值存储在一起，具有相同的前缀</strong>，一个column family的所有成员用相同的方式访问。</li><li>Column Qualifier：column qualifier附加到column family，<strong>提供数据的索引</strong>。例如 content:html, content:pdf</li><li>Cell：<strong>cell由row, column family, qualifier,存储的值以及timestamp</strong>表示，其中时间戳表示值的版本。</li></ol><h3 id="表实例"><a href="#表实例" class="headerlink" title="表实例"></a>表实例</h3><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93PPT/image-20230216225716406.png" alt="image-20230216225716406" style="zoom:80%;" /><h3 id="概念视图"><a href="#概念视图" class="headerlink" title="概念视图"></a>概念视图</h3><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93PPT/image-20230216225741320.png" alt="image-20230216225741320" style="zoom:67%;" /><h3 id="HBASE逻辑模型实例"><a href="#HBASE逻辑模型实例" class="headerlink" title="HBASE逻辑模型实例"></a>HBASE逻辑模型实例</h3><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93PPT/image-20230216225759919.png" alt="image-20230216225759919" style="zoom:80%;" /><h2 id="物理视图—面向列族"><a href="#物理视图—面向列族" class="headerlink" title="物理视图—面向列族"></a>物理视图—面向列族</h2><ol><li>HBase按照列族分组，<strong>每个列族在硬盘上有自己的HFile格式文件集合</strong>，每个HFile格式文件都是独立管理，自身是二进制文件</li><li>HBase的记录按照<strong>Key-value对</strong>存储以<strong>HFile</strong>格式存储，一个列族的数据物理上存放在一起</li></ol><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93PPT/image-20230216225858662.png" alt="image-20230216225858662" style="zoom:67%;" /><h2 id="物理存储"><a href="#物理存储" class="headerlink" title="物理存储"></a>物理存储</h2><ol><li>Table中所有行按照<strong>row key</strong>的字典顺序排列</li><li>Table横向分割为多个<strong>Region</strong>，每个Region的大小一定，当新的数据不断添加，会产生新的Region</li><li>Region是HBASE<strong>分布式存储和负载均衡的最小单位</strong>，不同的Region可以分布在<strong>不同的Region Server</strong>上，<strong>但是一个Region不会拆分到多个Server上</strong></li><li>Region由一个或多个Store组成，<strong>每个Store保存一个Column Family</strong>，<strong>每个Store由一个memStore和0到多个StoreFile组成</strong>，<strong>StoreFile以HFile格式存储在HDFS上。</strong></li></ol><h3 id="物理存储示意"><a href="#物理存储示意" class="headerlink" title="物理存储示意"></a>物理存储示意</h3><p><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93PPT/image-20230216230132572.png" alt="image-20230216230132572" style="zoom: 33%;" /><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93PPT/image-20230216230142131.png" alt="image-20230216230142131" style="zoom: 50%;" /></p><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93PPT/image-20230216230229654.png" alt="image-20230216230229654" style="zoom:67%;" /><h2 id="Hfile结构"><a href="#Hfile结构" class="headerlink" title="Hfile结构"></a>Hfile结构</h2><h3 id="Hfile的组成"><a href="#Hfile的组成" class="headerlink" title="Hfile的组成"></a>Hfile的组成</h3><ol><li><strong>Data Block</strong>：保存表中的数据，可以被压缩</li><li><strong>Meta Block</strong>（可选）：保存用户定义的Key-Value对，可以被压缩</li><li><strong>File Info：</strong>HFile的元信息，不压缩。用户可添加自己的元信息</li><li><strong>Data Block Index</strong>：Data Block的索引，每条索引记录的key是被索引block的第一条记录的key。 <ul><li>读HFile时，<strong>DataBlock Index会读到内存</strong>，当检索某个Key时，只需在内存中查找key所在的block，<strong>不必扫描整个HFile</strong>。<strong>即通过一次I&#x2F;O将整个Block读到内存。</strong>:heart:</li></ul></li><li>Meta Block Index（可选）：MetaBlock的索引</li><li>Trailer:定长，保存每一部分的<strong>偏移量</strong>。读HFile时，<strong>首先读Trailer</strong><ul><li>Trailer记录了每个部分的起始位置</li></ul></li></ol><h3 id="Hfile结构示意"><a href="#Hfile结构示意" class="headerlink" title="Hfile结构示意"></a>Hfile结构示意</h3><p><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93PPT/image-20230216230508159.png" alt="image-20230216230508159"></p><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93PPT/image-20230216230520217.png" alt="image-20230216230520217" style="zoom:67%;" /><h2 id="HLog-Write-Ahead-Log"><a href="#HLog-Write-Ahead-Log" class="headerlink" title="HLog(Write Ahead Log)"></a>HLog(Write Ahead Log)</h2><ol><li><p><strong>WAL（Write Ahead Log）</strong>：预写日志，用作系统恢复:star:</p></li><li><p>HLog记录数据的所有修改</p></li><li><p>每个Region Server维护一个HLog</p><ul><li>不是每个Region维护一个HLog。</li></ul></li><li><p>HLog是<strong>Hadoop Sequence File</strong>形式</p><ul><li>Key：<strong>HLogKey对象</strong>，记录数据的所属的table ,Region以及sequence number和timestamp </li><li>Value：Hbase的KeyValue对象，对应HFile的Key-value</li></ul></li><li><p>问题：为什么不是每个Region维护一个HLog，而是每个Region Server维护一个HLog？回放代价大吗？HLog和数据存放在一起吗？:star:</p><p>这样不同region(来自不同table)的日志会混在一起，这样做的目的是不断追加单个文件相对于同时写多个文件而言，可以减少磁盘寻址次数，因此可以提高对table的写性能。带来的麻烦是，如果一台region server下线，为了恢复其上的region，需要将region server上的log进行拆分，然后分发到其它region server上进行恢复</p><p><strong>优点：</strong> 多个Region对象的更新操作所发生的日志修改，只需要不断把日志记录追加到单个日志文件中，不需要同时打开、写入到多个日志文件中。</p><p><strong>缺点：</strong>如果一个Region服务器发生故障，为了恢复其上次的Region对象，需要将Region服务器上的对象，需要将Region服务器上的HLog按照其所属的Region对象进行拆分，然后分发到其他Region服务器上执行恢复操作。</p><p><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93PPT/image-20230216230919967.png" alt="image-20230216230919967"></p><p><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93PPT/image-20230216230934660.png" alt="image-20230216230934660"></p><p><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93PPT/image-20230216230948704.png" alt="image-20230216230948704"></p><p><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93PPT/image-20230216231002847.png" alt="image-20230216231002847" style="zoom: 67%;" /><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93PPT/image-20230216231016433.png" alt="image-20230216231016433" style="zoom:57%;" /></p><p><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93PPT/image-20230216231025516.png" alt="image-20230216231025516"></p><p><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93PPT/image-20230216231036258.png" alt="image-20230216231036258"></p><p><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93PPT/image-20230216231051791.png" alt="image-20230216231051791"></p></li></ol><h2 id="HBASE系统架构"><a href="#HBASE系统架构" class="headerlink" title="HBASE系统架构"></a>HBASE系统架构</h2><ol><li><strong>客户端API</strong><ul><li>包括访问HBASE的接口，维护cache加快对HBASE的访问</li></ul></li><li><strong>Master（主服务器）</strong><ul><li>利用ZooKeeper为RegionServer分配Region</li><li>负责Region Server的负载均衡</li><li>发现失效的Region Server，并重新分配Region Server</li><li>回收HDFS上的垃圾文件</li><li>处理Schema更新</li></ul></li><li><strong>Region Server</strong><ul><li>维护Master分配的Region，处理这些Region的I&#x2F;O请求</li><li>负责切分运行过程中变大的Region</li></ul></li></ol><h2 id="Hbase组成"><a href="#Hbase组成" class="headerlink" title="Hbase组成"></a>Hbase组成</h2><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93PPT/image-20230216231401893.png" alt="image-20230216231401893" style="zoom:67%;" /><h2 id="Hbase系统架构"><a href="#Hbase系统架构" class="headerlink" title="Hbase系统架构"></a>Hbase系统架构</h2><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93PPT/image-20230216231416292.png" alt="image-20230216231416292" style="zoom:67%;" /><h2 id="HBASE存储结构概览"><a href="#HBASE存储结构概览" class="headerlink" title="HBASE存储结构概览"></a>HBASE存储结构概览</h2><p><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93PPT/image-20230216231440204.png" alt="image-20230216231440204"></p><h2 id="HBase与Bigtable的命名差异"><a href="#HBase与Bigtable的命名差异" class="headerlink" title="HBase与Bigtable的命名差异"></a>HBase与Bigtable的命名差异</h2><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93PPT/image-20230216231505542.png" alt="image-20230216231505542" style="zoom:67%;" /><h2 id="Hbase的访问接口"><a href="#Hbase的访问接口" class="headerlink" title="Hbase的访问接口"></a>Hbase的访问接口</h2><ol><li><strong>Native Java API：</strong>最常规和高效的访问方式，适合Hadoop MapReduce Job并行批处理HBase表数据</li><li><strong>HBase Shell：</strong>HBase的命令行工具，最简单的接口，适合HBase管理使用</li><li><strong>Thrift Gateway，</strong>利用Thrift序列化技术，支持C++，PHP，Python等多种语言，适合其他异构系统在线访问HBase表数据</li><li><strong>REST Gateway</strong>：支持REST 风格的Http API访问HBase, 解除了语言限制</li><li><strong>Pig：</strong>可以使用Pig Latin流式编程语言来操作HBase中的数据，和Hive类似，本质最终也是编译成MapReduce Job来处理HBase表数据，适合做数据统计</li><li><strong>Hive：</strong>Hive 支持HBase，可以使用类似SQL语言来访问HBase</li></ol><h2 id="Hbase写路径"><a href="#Hbase写路径" class="headerlink" title="Hbase写路径"></a>Hbase写路径</h2><ol><li>Hbase接收到写请求，会将数据同时写入<strong>WAL和MemStore</strong>。<strong>当WAL和MemStore的写操作都完成，本次写操作完成。</strong></li><li>当MemStore写满之后，其中的数据刷写到磁盘，生成一个新的<strong>HFile</strong></li><li>不写WAL，直接写MemStore，可以吗？会出什么问题吗？:star:<ul><li>HBase的Write Ahead Log (WAL)提供了一种高并发、持久化的日志保存与回放机制。WAL最重要的作用是灾难恢复。和MySQL 的BIN log类似，它记录所有的数据改动。一旦服务器崩溃，通过重放log，我们可以恢复崩溃之前的数据。这也意味如果写入WAL失败，整个操作将认为失败</li></ul></li></ol><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93PPT/image-20230216231941551.png" alt="image-20230216231941551" style="zoom:67%;" /><h2 id="Hbase读路径"><a href="#Hbase读路径" class="headerlink" title="Hbase读路径"></a>Hbase读路径</h2><ol><li>Hbase使用BlockCache优化读性能，采用LRU调度策略</li><li>BlockCache中以block为单位存储数据</li><li>从Hbase表中读一行数据时，首先检查MemStore中等待修改的数据队列，然后检查BlockCache查看包含该数据的block是否最近被访问过，最后访问硬盘上对应的HFile</li></ol><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93PPT/image-20230216231950572.png" alt="image-20230216231950572" style="zoom:50%;" /><h2 id="合并-compaction"><a href="#合并-compaction" class="headerlink" title="合并(compaction)"></a>合并(compaction)</h2><ol><li>随着memStore的刷写，会产生多个HFile，<strong>如果文件数目达到阈值，就将它们合并成数量更少，更大的文件</strong>。这个过程持续进行，直到最大的文件超过配置规定的最大文件大小，触发Region拆分。</li><li>合并的种类，系统决定采用哪种合并：<ul><li><strong>Major compaction：将所有的文件压缩成一个文件</strong></li><li><strong>Minor compaction：将多个小HFile合并成一个大HFile。</strong></li></ul></li></ol><h2 id="Zookeeper"><a href="#Zookeeper" class="headerlink" title="Zookeeper"></a>Zookeeper</h2><p><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93PPT/image-20230216232102170.png" alt="image-20230216232102170"></p><h2 id="Zookeeper数据结构"><a href="#Zookeeper数据结构" class="headerlink" title="Zookeeper数据结构"></a>Zookeeper数据结构</h2><ol><li>Zookeeper维护一个层次的数据结构，类似标准的文件系统。</li><li>层次命名，<strong>例如&#x2F;namespace&#x2F;server1</strong></li><li>树中每个节点znode可以存储数据的多个版本</li></ol><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93PPT/image-20230216232141989.png" alt="image-20230216232141989" style="zoom:50%;" /><h1 id="分布式系统基础"><a href="#分布式系统基础" class="headerlink" title="分布式系统基础"></a>分布式系统基础</h1><h2 id="分布式系统的特征"><a href="#分布式系统的特征" class="headerlink" title="分布式系统的特征"></a>分布式系统的特征</h2><ol><li>分布式系统：<strong>硬件或软件分布在联网的计算机上，组件之间通过消息传递通信和动作协调的系统</strong></li><li>分布式系统的<strong>特征</strong><ul><li>并发性</li><li>缺乏全局时钟</li><li>故障独立性</li></ul></li><li>计算机网络无处不在，<strong>资源共享</strong>是构建分布式系统的主要动机</li><li>分布式系统实例：Web search、Massive Multiplayer Oline Game，MMOG（大型多人在线游戏）、WWW、云服务</li></ol><h2 id="分布式系统面临的挑战"><a href="#分布式系统面临的挑战" class="headerlink" title="分布式系统面临的挑战"></a>分布式系统面临的挑战</h2><p>对共享资源并发执行程序的协调是一个重要的问题:heart:</p><ol><li>**异构性:**多样性和差异<ul><li>网络、计算机硬件、操作系统、编程语言、不同开发者完成的软件实现等</li></ul></li><li><strong>开放性</strong>：增加新的资源共享服务和多种客户程序使用的程度<ul><li>发布系统的关键接口</li><li>基于一致的通信机制和发布的接口访问共享资源</li><li>基于不同开发商提供的异构硬件和软件</li></ul></li><li><strong>安全性</strong></li><li><strong>可伸缩性</strong></li><li><strong>并发性</strong></li><li><strong>透明性</strong>:透明性对用户和应用隐藏了与当前任务无直接关系的资源，并能够匿名使用资源(访问透明性、位置透明性、并发透明性、复制透明性、故障透明性、移动透明性、伸缩透明性)</li><li><strong>故障处理</strong><ul><li>有些组件出现故障，有些组件运行正常</li><li>容错</li><li>故障恢复</li><li>冗余组件</li></ul></li><li><strong>服务质量（QoS）</strong><ul><li>不同服务的质量要求不同<ul><li><strong>SLA（Service-Level Agreement）</strong>，服务等级协议，指的是系统服务提供者对客户的一个承诺,用来衡量一个分布式系统的好坏程度。</li><li>最常用的<strong>SLA指标：可用性、准确性、系统容量和延迟</strong>。:heart:</li></ul></li></ul></li></ol><h2 id="分布式系统模型"><a href="#分布式系统模型" class="headerlink" title="分布式系统模型"></a>分布式系统模型</h2><p>有效描述和讨论分布式系统的设计，一般有三种系统模型描述方式</p><ol><li><strong>物理模型</strong>：描述组成系统的计算机和设备的类型以及它们的互联，不涉及特定的技术细节。</li><li><strong>体系结构模型：</strong>从系统的计算元素执行的计算和通信任务方面描述系统，其中计算元素可以是单个计算机也可以是通过网络互连的计算机集合。<ul><li>例如Client-Server，Peer-to-Peer</li></ul></li><li><strong>基础模型</strong>：采用<strong>抽象</strong>的观点描述大多数分布式系统面临的单个问题的解决方案<ul><li><strong>交互模型</strong>：处理分布式系统的性能问题，并解决设置时间约束的难题（分布式系统没有全局时间）。</li><li><strong>故障模型</strong>：进程和通信通道故障的精确描述，定义可靠的通信和正确的进程。</li><li><strong>安全模型</strong>：描述进程和通信通道的各种可能的威胁。</li></ul></li></ol><h2 id="物理模型"><a href="#物理模型" class="headerlink" title="物理模型"></a>物理模型</h2><ol><li><strong>基线物理模型：</strong>一组可扩展的计算机节点，这些节点通过计算机网络相互连接进行所需的消息传递。</li><li><strong>早期的分布式系统</strong>：通过局域网连接10~100个节点组成，与互联网的连接有限，单个系统是同构的，很少提供服务质量。</li><li><strong>互联网规模的分布式系统</strong>：通过互联网连接，为全球化组织提供分布式系统服务，异构性突出。</li><li><strong>当代的分布式系统</strong>：移动设备、嵌入式设备以及云计算促使异构性增加，节点数成千上万。</li></ol><h2 id="体系结构模型"><a href="#体系结构模型" class="headerlink" title="体系结构模型"></a>体系结构模型</h2><p><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93PPT/image-20230216232950377.png" alt="image-20230216232950377"></p><h3 id="体系结构模型—体系结构元素-角色与责任"><a href="#体系结构模型—体系结构元素-角色与责任" class="headerlink" title="体系结构模型—体系结构元素-角色与责任"></a>体系结构模型—体系结构元素-角色与责任</h3><h4 id="Client-Server"><a href="#Client-Server" class="headerlink" title="Client-Server"></a>Client-Server</h4><p><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93PPT/image-20230216233018177.png" alt="image-20230216233018177"></p><h4 id="Peer-to-Peer"><a href="#Peer-to-Peer" class="headerlink" title="Peer-to-Peer"></a>Peer-to-Peer</h4><ol><li><strong>所有参与的进程运行相同的程序</strong>，并且相互之间提供相同的接口集合。</li><li>进程间通信依赖于对应用的需求。</li><li><strong>共享数据对象</strong>，个体计算机只保存应用数据库的一小部分，存储、处理和通信的负载分布到联网的多个计算机上。</li><li>每个数据对象被复制到<strong>多个计算机</strong>上，一方面分散负载，另一方面提高数据可用性。</li><li>应用案例：Bittorrent</li></ol><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93PPT/image-20230216233102205.png" alt="image-20230216233102205" style="zoom:67%;" /><h3 id="体系结构模型—体系结构元素-放置"><a href="#体系结构模型—体系结构元素-放置" class="headerlink" title="体系结构模型—体系结构元素-放置"></a>体系结构模型—体系结构元素-放置</h3><ol><li>放置：解决对象和服务等实体与底层物理基础设施的映射问题。</li><li>从性能的角度考虑<ul><li>实体间的通信模式</li><li>给定计算机的可靠性和当前的负载</li><li>不同计算机之间的通信质量</li></ul></li><li>放置策略<ul><li>服务映射到多个服务器</li><li>缓存</li><li>移动代码</li><li>移动代理</li></ul></li></ol><h3 id="体系结构模型—体系结构模式"><a href="#体系结构模型—体系结构模式" class="headerlink" title="体系结构模型—体系结构模式"></a>体系结构模型—体系结构模式</h3><ol><li><p>体系结构模式提供<strong>组合的、重复出现的结构</strong>，这些结构在一些给定的场景下表现良好。</p></li><li><p>几个重要的分布式系统体系结构模式</p><ul><li>Layering</li><li>Tiered architecture</li><li>Thin client</li></ul></li><li><p><strong>Layering：</strong>与抽象紧密相关:star:</p><ul><li>复杂系统被分成若干层，每层利用下层提供的服务</li><li>一个给定的层提供一个软件抽象，高层不了解其底层的实现细节以及其他更低的层</li></ul></li><li><p><strong>platform：</strong>由最底层的硬件和软件层构成，这些层为上层提供服务，在每个计算机独立实现，提供系统API，便于进程间通信及协调。:star:</p></li><li><p><strong>middleware</strong>：一个软件层，表示成一组计算机上的进程或对象，这些进程或对象相互交互，实现分布式应用的通信和资源共享支持，目的是屏蔽异构性，给程序员提供方便的编程接口:star:</p><ul><li>通过对抽象的支持，提升应用程序活动的层次。一些抽象包括远程方法调用、进程组织间的通信、事件的通知、共享数据的分区、放置和检索、共享数据的复制等。</li></ul><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93PPT/image-20230216233354153.png" alt="image-20230216233354153" style="zoom: 67%;" /></li><li><p><strong>Tiered architecture：</strong>对layering的补充，是在特定层组织功能、放置功能至合适的服务或物理节点的技术，与layering上层的应用和服务的组织最相关。:star2:</p><p><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93PPT/image-20230216233509200.png" alt="image-20230216233509200"></p></li></ol><h3 id="体系结构模型—体系结构模式-分层模式"><a href="#体系结构模型—体系结构模式-分层模式" class="headerlink" title="体系结构模型—体系结构模式-分层模式"></a>体系结构模型—体系结构模式-分层模式</h3><ol><li><strong>两层模式：</strong>表示逻辑、应用逻辑和数据逻辑被分到<strong>客户进程和服务器进程</strong>，通常通过分割应用逻辑来完成划分。<ul><li>一部分业务逻辑放在客户端，一部分放在服务器端</li><li>交互延迟低</li><li>应用逻辑分布到不同进程，导致有些功能不能直接被调用</li></ul></li><li><strong>三层模式</strong>：逻辑元素与物理服务器一一对应，每层都定义了明确的角色<ul><li>软件可维护性高</li><li>增加了管理三个服务器的复杂性</li><li>可推广至多层方案</li></ul></li></ol><h3 id="体系结构模型—体系结构模式-瘦客户"><a href="#体系结构模型—体系结构模式-瘦客户" class="headerlink" title="体系结构模型—体系结构模式-瘦客户"></a>体系结构模型—体系结构模式-瘦客户</h3><ol><li><p>瘦客户：一个提供了基于窗口的本地用户界面的软件层，提供访问远程计算机的服务。</p><ul><li>客户设备的假设和需求小，可以访问复杂的网络服务</li><li>复杂性从最终用户设备移到互联网服务云计算</li></ul><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93PPT/image-20230216233652433.png" alt="image-20230216233652433" style="zoom:67%;" /></li></ol><h2 id="基础模型"><a href="#基础模型" class="headerlink" title="基础模型"></a>基础模型</h2><ol><li><strong>物理模型和体系结构模型</strong>共享一些基础特征<ul><li>都由进程组成，这些进程在计算机网络上通过发送消息进行通信</li><li>共享设计需求：实现进程及网络性能的可靠性，确保系统资源的安全性</li></ul></li><li><strong>基础模型包含分布式系统的基本组成</strong>，以便理解和推理系统的行为，目的是<ul><li>显式地表达所建模的系统的相关假设</li><li>给定假设，归纳出哪些可能，那些不可能，比如了解设计依赖什么，不依赖什么</li></ul></li><li>分布式系统基础模型包含以下需要解决的问题<ul><li>交互</li><li>保障</li><li>安全</li></ul></li></ol><h3 id="基础模型—交互模型"><a href="#基础模型—交互模型" class="headerlink" title="基础模型—交互模型"></a>基础模型—交互模型</h3><ol><li><p>分布式系统中影响<strong>进程交互</strong>的两个重要因素</p><ul><li><strong>通信性能</strong>通常是一限制特性</li><li>不可能维护单一的<strong>全局时间</strong></li></ul></li><li><p>通信通道的<strong>性能</strong></p><ul><li>通道的实现方式：可以是流或消息传递</li><li>计算机网络上的通信性能<ul><li>延迟、带宽和抖动（jitter）</li></ul></li></ul></li><li><p><strong>计算机时钟和时序时间</strong></p><ul><li>分布式系统中每台计算机有自己的时钟，本地进程获取当前的时间值</li><li>不同计算机上运行的两个进程将时戳与时间关联，即使同时读时钟，各自本地时钟也提供不同的时间值</li><li>时钟漂移率：计算机时钟偏离绝对参考时钟的比率</li></ul></li><li><p>交互模型的两个变体：同步分布式系统和异步分布式系统</p></li><li><p>同步分布式系统:heart:</p><ul><li>满足的约束</li><li>进程执行每一步的时间有一个上下限</li><li>通过通道传递的每个消息在一个已知的时间范围内接收到</li><li>每个进程有一个本地时钟，时钟偏移率在一个已知的范围内</li></ul><p>实际应用时，可以采用超时检测进程的故障</p></li><li><p>异步分布式系统:heart:</p><ul><li>对以下因素没有限制<ul><li>进程执行速度</li><li>消息传递延迟</li><li>时钟漂移率</li></ul></li><li>实际的分布式系统大多是异步的，如互联网</li></ul></li></ol><h3 id="基础模型—故障模型"><a href="#基础模型—故障模型" class="headerlink" title="基础模型—故障模型"></a>基础模型—故障模型</h3><ol><li><p>分布式系统中，进程和通信通道都有可能出现故障</p></li><li><p>故障模型定义了故障可能发生的模式，从而理解故障的影响</p></li><li><p>故障分类</p><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93PPT/image-20230216234136714.png" alt="image-20230216234136714" style="zoom:60%;" /><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93PPT/image-20230216234156953.png" alt="image-20230216234156953" style="zoom:67%;" /></li></ol><h3 id="基础模型—安全模型"><a href="#基础模型—安全模型" class="headerlink" title="基础模型—安全模型"></a>基础模型—安全模型</h3><ol><li>分布式系统安全可以通过保证进程和用于进程交互的通道的安全，以及保护所封装的对象免遭未授权访问来实现。</li></ol><h1 id="分布式文件系统"><a href="#分布式文件系统" class="headerlink" title="分布式文件系统"></a>分布式文件系统</h1><ol><li>文件系统最初是为集中式计算机系统和台式机开发的，作为操作系统设施提供方便的磁盘存储访问接口，通过访问控制机制和文件锁机制实现数据和程序的共享。</li><li>分布式文件系统支持程序像对本地文件一样对远程文件进行存储和访问，而且能获得与访问本地磁盘文件类似的性能和可靠性。</li><li>分布式文件系统以文件形式支持信息共享，以持久存储的形式支持硬件资源的共享</li><li>大规模广域可读写文件存储系统会产生<strong>负载均衡、一致性、可靠性、可用性和安全性问题</strong>:star:</li></ol><h2 id="存储系统及其性质"><a href="#存储系统及其性质" class="headerlink" title="存储系统及其性质"></a>存储系统及其性质</h2><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93PPT/image-20230216234332100.png" alt="image-20230216234332100" style="zoom:67%;" /><h2 id="文件系统的特点"><a href="#文件系统的特点" class="headerlink" title="文件系统的特点"></a>文件系统的特点</h2><ol><li>文件系统负责文件的组织、存储、检索、命名、访问控制、共享和保护，提供描述文件抽象的程序接口。</li><li>文件包括数据和属性<ul><li><strong>数据</strong>包括一系列数据项，读写操作可访问这些数据项的任何部分</li><li><strong>属性</strong>包括文件长度、时间戳、文件类型、拥有者身份、访问控制列表</li></ul></li><li><strong>目录：</strong>是一类特殊类型的文件，提供从文件名字到内部文件标识符的映射，可以包括其他目录的名字，形成层次化的文件命名方案</li><li><strong>元数据：</strong>文件系统用于管理文件而存储的所有关于文件的信息，包括文件属性、目录和其他文件系统使用的持久信息</li></ol><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93PPT/image-20230216234513903.png" alt="image-20230216234513903" style="zoom:67%;" /><h2 id="文件系统操作"><a href="#文件系统操作" class="headerlink" title="文件系统操作"></a>文件系统操作</h2><p>以Unix文件系统为例，主要的文件操作如下，由操作系统内核实现</p><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93PPT/image-20230216234547171.png" alt="image-20230216234547171" style="zoom:67%;" /><h2 id="分布式文件系统的需求"><a href="#分布式文件系统的需求" class="headerlink" title="分布式文件系统的需求"></a>分布式文件系统的需求</h2><ol><li><strong>透明性</strong><ul><li><strong>访问透明性：</strong>客户程序不需要了解文件的分布性，只需通过文件访问操作访问本地或远程文件。</li><li><strong>位置透明性：</strong>客户程序使用统一的文件命名空间，在不改变路径名的情况下，文件或文件组可以被重定位。</li><li><strong>移动透明性：</strong>移动文件时，客户程序和客户节点上的系统管理表不必修改</li><li><strong>性能透明性：</strong>服务的负载在一定范围变化时，客户程序的性能不受影响</li><li><strong>伸缩透明性：</strong>文件服务可以不断扩充，以应对负载和网络规模的增长</li></ul></li><li><strong>并发文件更新</strong>：一个客户对文件的修改的操作不影响同时访问同一个文件的其他客户，即并发控制</li><li><strong>文件复制：</strong>一个文件可以表示为其内容在多个位置的多个备份</li><li><strong>硬件和操作系统异构性</strong>：文件访问接口定义明确，不受操作系统和计算机异构性的影响、这是开放性的一个重要方面。</li><li><strong>容错</strong>：文件服务在客户和服务器出现故障时可以继续提供服务</li><li><strong>一致性：</strong>多个拷贝在多个节点上存储或缓存时，会因为网络延迟导致一个拷贝的修改延迟反映到其他拷贝,需要确定一致性原则</li><li><strong>安全性</strong>：提供访问控制机制</li><li><strong>效率：</strong>应提供至少和传统文件系统相同的能力，且达到一定的性能要求。</li></ol><h2 id="文件服务体系结构"><a href="#文件服务体系结构" class="headerlink" title="文件服务体系结构"></a>文件服务体系结构</h2><p>文件系统三个组件:</p><ol><li><strong>Flat file service</strong>：实现文件内容上的操作，唯一文件标识符UFID表示文件</li><li><strong>Directory service：</strong>提供文件名字到UFID的映射，生成目录以及为目录增加新的文件名等功能</li><li><strong>Client service</strong>：运行在客户机上，在应用程序接口上集成和扩展flat file service和directory service，提供用户级程序使用。</li></ol><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93PPT/image-20230216234752641.png" alt="image-20230216234752641" style="zoom:67%;" /><h2 id="Flat-file-service接口"><a href="#Flat-file-service接口" class="headerlink" title="Flat file service接口"></a>Flat file service接口</h2><p><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93PPT/image-20230216234820700.png" alt="image-20230216234820700"></p><h2 id="Directory-service接口"><a href="#Directory-service接口" class="headerlink" title="Directory service接口"></a>Directory service接口</h2><p><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93PPT/image-20230216234835007.png" alt="image-20230216234835007"></p><h2 id="层次文件系统"><a href="#层次文件系统" class="headerlink" title="层次文件系统"></a>层次文件系统</h2><ol><li>层次文件系统由组织成树形结构的目录组成，每一个目录包含文件和其他可以从此目录访问的目录名字。例如，Unix文件系统</li><li>可以使用路径名来访问任何一个文件或目录</li><li>客户模块提供函数，用来获得给定路径文件的UFID</li></ol><h2 id="分布式文件系统案例"><a href="#分布式文件系统案例" class="headerlink" title="分布式文件系统案例"></a>分布式文件系统案例</h2><ol><li>通用的分布式文件系统<ul><li>SUN Microsystem 的网络文件系统NFS</li><li>CMU的Andrew文件系统AFS</li><li>DFS</li><li>FastDFS</li><li>Coda</li></ul></li><li>定制的分布式文件系统<ul><li>Google File System（GFS）</li><li>Hadoop File System（HDFS）</li></ul></li></ol><h2 id="GFS"><a href="#GFS" class="headerlink" title="GFS"></a>GFS</h2><h3 id="研发GFS的动机"><a href="#研发GFS的动机" class="headerlink" title="研发GFS的动机"></a>研发GFS的动机</h3><ol><li>满足Google搜索引擎和其他web应用程序迅速增长的需求<ul><li>在廉价、不可靠计算机上存储大量的数据</li><li>针对Google的应用，对存储的文件类型和访问模式进行优化<ul><li>例如，文件数量不多，但文件大小很大，106个100MB的文件，甚至GB</li><li>大文件的顺序读和对文件的追加操作的顺序写——数据分析应用</li><li>并发访问多，大量并发追加写操作</li></ul></li><li>GFS整体上满足Google基础设施的所有需求<ul><li>从数据和客户数量的角度必须可伸缩</li><li>基础设施发生故障时是可靠的</li><li>是开放的，以支持新的应用</li><li>对高吞吐量进行了优化，而不是优先考虑延迟</li></ul></li></ul></li></ol><h3 id="一些假设"><a href="#一些假设" class="headerlink" title="一些假设"></a>一些假设</h3><ol><li>组件失效率高<ul><li>廉价的商用机器容易出现故障</li></ul></li><li>大文件数量较多<ul><li>基本上每个文件 100MB或更大，大部分是GB级文件</li></ul></li><li>文件访问模式是写一次，大多数是添加操作<ul><li>并发操作</li></ul></li><li>大量流数据读操作</li><li>持久的高吞吐量、低延迟</li></ol><h3 id="GFS体系结构"><a href="#GFS体系结构" class="headerlink" title="GFS体系结构"></a>GFS体系结构</h3><ol><li>GFS提供从文件到块的映射，然后将文件的操作映射为各个块的操作。</li><li>一个master节点，多个chunkservers（数百个）</li></ol><p><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93PPT/image-20230216235235490.png" alt="image-20230216235235490"></p><h3 id="GFS设计决策"><a href="#GFS设计决策" class="headerlink" title="GFS设计决策"></a>GFS设计决策</h3><ol><li>文件以chunk为单位存储<ul><li>大小为固定的64MB</li></ul></li><li>通过复制提高可靠性<ul><li>每个chunk有3个以上的副本存储在不同的chunkservers</li></ul></li><li>单一master负责协调访问以及保存元数据<ul><li>简单的集中式管理</li></ul></li><li>没有数据缓存<ul><li>​大数据集合、流数据读操作获益</li></ul></li><li>API接口常用，但是定制的<ul><li>简化问题，针对Google应用</li><li>添加了snapshot和record append操作</li></ul></li></ol><h3 id="Master节点"><a href="#Master节点" class="headerlink" title="Master节点"></a>Master节点</h3><ol><li>管理有关文件系统的元数据</li><li>维护多个数据副本的位置信息</li><li>全局元数据<ul><li>文件和chunk命名空间</li><li>文件名与chunks的映射表</li><li>每个chunk副本的地址</li><li>访问控制信息</li></ul></li><li>元数据持久存储在操作日志中，记录关键的元数据修改，恢复系统用<ul><li>在本地磁盘持久存储</li><li>有副本</li><li>快速恢复目的的checkpoint机制</li></ul></li></ol><h3 id="Chunkserver"><a href="#Chunkserver" class="headerlink" title="Chunkserver"></a>Chunkserver</h3><ol><li>Chunkserver存储数据</li><li>客户端和Master节点的通信只获取元数据，所有的数据操作都是由客户端直接和Chunkserver进行交互。<ul><li>Client可以同时访问多个chunkserver，提高系统的I&#x2F;O性能</li></ul></li><li>Chunk服务器不需要缓存文件数据<ul><li>Chunk以本地文件的方式保存，Linux操作系统的文件系统缓存会把经常访问的数据缓存在内存中。</li></ul></li></ol><h3 id="GFS的一致性管理"><a href="#GFS的一致性管理" class="headerlink" title="GFS的一致性管理"></a>GFS的一致性管理</h3><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93PPT/image-20230216235544574.png" alt="image-20230216235544574" style="zoom:80%;" /><h3 id="GFS的一致性管理步骤"><a href="#GFS的一致性管理步骤" class="headerlink" title="GFS的一致性管理步骤"></a>GFS的一致性管理步骤</h3><ol><li>当master收到来自client的修改操作请求时，master授予其中一个副本lease，然后将primary副本和其他secondary副本的标示返回给client</li><li>client将所有数据发送到多个副本，数据暂存在缓存（可以任意顺序），直到收到进一步的指示才进行写操作</li><li>一旦所有的副本确认收到数据，client向primary副本发送写请求，然后primary副本确定并发请求的顺序，按照顺序在primary副本节点进行更新</li><li>Primary副本请求在secondary副本上以同样的顺序执行同样的修改操作，直到所有的修改成功执行后，其他副本发送确认消息</li><li>如果primary副本收到了所有secondary副本写数据的确认消息后，向客户报告成功消息，否则报告失败消息。失败表明副本处于不一致的状态。</li></ol><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93PPT/image-20230216235625229.png" alt="image-20230216235625229" style="zoom:55%;" /><h2 id="Hadoop-Distributed-File-System-HDFS"><a href="#Hadoop-Distributed-File-System-HDFS" class="headerlink" title="Hadoop Distributed File System(HDFS)"></a>Hadoop Distributed File System(HDFS)</h2><h3 id="HDFS概述"><a href="#HDFS概述" class="headerlink" title="HDFS概述"></a>HDFS概述</h3><ol><li>Hadoop分布式文件系统(HDFS)的设计目标是针对适合运行在通用硬件(commodity hardware)上的分布式文件系统。</li><li>HDFS是一个高度容错性的分布式文件系统，适合部署在廉价的机器上。</li><li>HDFS能提供高吞吐量的数据访问，非常适合大规模数据集上的应用。</li><li>HDFS放宽了一部分POSIX（ Portable Operating System Interface of UNIX， POSIX  ）约束，来实现流式读取文件系统数据的目的。</li></ol><h3 id="前提和设计目标（1）"><a href="#前提和设计目标（1）" class="headerlink" title="前提和设计目标（1）"></a>前提和设计目标（1）</h3><ol><li>硬件错误<ul><li>硬件错误是常态而不是异常。HDFS可能由成百上千的服务器所构成，每个服务器上存储着文件系统的部分数据。构成系统的组件数目巨大，任一组件都有可能失效，错误检测和快速、自动的恢复是HDFS最核心的架构目标。</li></ul></li><li>流式数据访问<ul><li>HDFS的设计中更多考虑到了数据批处理，而不是用户交互处理。比之数据访问的低延迟问题，关注高吞吐量。</li></ul></li><li>大规模数据集<ul><li>运行在HDFS上的应用具有很大的数据集。HDFS上的一个典型文件大小一般都在GB至TB，支持大文件存储。它应该能提供整体上高的数据传输带宽，能在一个集群里扩展到数百个节点。一个单一的HDFS实例应该能支撑数以千万计的文件。</li></ul></li></ol><h3 id="前提和设计目标（2）"><a href="#前提和设计目标（2）" class="headerlink" title="前提和设计目标（2）"></a>前提和设计目标（2）</h3><ol><li>简单的一致性模型<ul><li>支持“一次写入多次读取”的文件访问模型，简化了数据一致性问题，并且使高吞吐量的数据访问成为可能。</li></ul></li><li>“移动计算比移动数据更划算”<ul><li>一个应用请求的计算，离它操作的数据越近就越高效，当数据达到海量级别的时就能降低网络阻塞的影响，提高系统数据的吞吐量。HDFS为应用提供了将计算移动到数据附近的接口。</li></ul></li><li>异构软硬件平台间的可移植性<ul><li>考虑到平台的可移植性，方便了HDFS作为大规模数据应用平台的推广。</li></ul></li></ol><h3 id="HDFS体系结构"><a href="#HDFS体系结构" class="headerlink" title="HDFS体系结构"></a>HDFS体系结构</h3><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93PPT/image-20230216235843665.png" alt="image-20230216235843665" style="zoom:67%;" /><h3 id="GFS和HDFS术语对照"><a href="#GFS和HDFS术语对照" class="headerlink" title="GFS和HDFS术语对照"></a>GFS和HDFS术语对照</h3><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93PPT/image-20230216235859538.png" alt="image-20230216235859538" style="zoom:67%;" /><h3 id="Namenode-和-Datanode"><a href="#Namenode-和-Datanode" class="headerlink" title="Namenode 和 Datanode"></a>Namenode 和 Datanode</h3><ol><li>HDFS采用master&#x2F;slave架构<ul><li>一个HDFS集群是由一个Namenode和一定数目的Datanodes组成。</li><li>Namenode是一个中心服务器，负责管理文件系统的名字空间(namespace)以及客户端对文件的访问。Namenode执行文件系统的名字空间操作，比如打开、关闭、重命名文件或目录。它也负责确定数据块到具体Datanode节点的映射。</li><li>集群中的Datanode一般是一个节点一个，负责管理它所在节点上的存储，负责处理文件系统客户端的读写请求。在Namenode的统一调度下进行数据块的创建、删除和复制。</li><li>一个文件被分成一个或多个数据块，这些块存储在一组Datanode上。</li></ul></li></ol><h3 id="文件系统的名字空间-namespace"><a href="#文件系统的名字空间-namespace" class="headerlink" title="文件系统的名字空间 (namespace)"></a>文件系统的名字空间 (namespace)</h3><ol><li>HDFS支持传统的层次型文件组织结构。用户或者应用程序可以创建目录，然后将文件保存在这些目录里。</li><li>文件系统名字空间的层次结构和大多数现有的文件系统类似，用户可以创建、删除、移动或重命名文件。</li><li>Namenode负责维护文件系统的名字空间，任何对文件系统名字空间或属性的修改都将被Namenode记录下来。应用程序可以设置HDFS保存的文件的副本数目。文件副本的数目称为文件的复制因子，这个信息也是由Namenode保存。</li></ol><h3 id="数据复制"><a href="#数据复制" class="headerlink" title="数据复制"></a>数据复制</h3><ol><li>HDFS被设计成能够在一个大集群中跨节点可靠地存储超大文件的文件系统。它将每个文件存储成一系列的数据块，除了最后一个，所有的数据块都同样大小。</li><li>为了容错，文件的所有数据块都会有副本。每个文件的数据块大小和复制因子都是可配置的。应用程序可以指定某个文件的副本数目。副本系数可以在文件创建的时候指定，也可以在之后改变。HDFS中的文件是write-one，并且严格要求在任何时候只能有一个writer。</li><li>Namenode全权管理数据块的复制，它周期性地从集群中的每个Datanode接收心跳信号和块状态报告(Blockreport)。接收到心跳信号意味着该Datanode节点工作正常。块状态报告包含了一个该Datanode上所有数据块的列表。</li></ol><h3 id="复制-1"><a href="#复制-1" class="headerlink" title="复制"></a>复制</h3><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93PPT/image-20230217000033263.png" alt="image-20230217000033263" style="zoom:67%;" /><h3 id="复制-副本存放"><a href="#复制-副本存放" class="headerlink" title="复制-副本存放"></a>复制-副本存放</h3><ol><li>副本的存放是HDFS可靠性和性能的关键。</li><li>HDFS采用机架感知(rack-aware)的策略来改进数据的可靠性、可用性和网络带宽的利用率。</li><li>大型HDFS实例一般运行在跨越多个机架的PC集群上，不同机架上的两台机器之间的通讯需要经过交换机。在大多数情况下，同一个机架内的两台机器间的带宽会比不同机架的两台机器间的带宽大。</li><li>通过rack-aware过程，Namenode可以确定每个Datanode所属的机架id。简单但没有优化的策略就是将副本存放在不同的机架上。这种策略设置可以将副本均匀分布在集群中，有利于当组件失效情况下的负载均衡。但是写操作需要传输数据块到多个机架，这增加了写的代价。</li><li>在大多数情况下，复制因子是3，将一个副本存放在本地机架的节点上，一个副本放在同一机架的另一个节点上，最后一个副本放在不同机架的节点上。</li></ol><h3 id="复制-副本选择"><a href="#复制-副本选择" class="headerlink" title="复制-副本选择"></a>复制-副本选择</h3><ol><li>为了降低整体的带宽消耗和读取延时，HDFS会尽量让读操作进程 读取离它最近的副本。如果与读进程在同一个机架上有一个副本，那么就读取该副本。</li><li>如果一个HDFS集群跨越多个数据中心，那么客户端也将首先读本地数据中心的副本。</li></ol><h3 id="文件系统元数据的持久化"><a href="#文件系统元数据的持久化" class="headerlink" title="文件系统元数据的持久化"></a>文件系统元数据的持久化</h3><ol><li>Namenode上保存着HDFS的名字空间。对于任何对文件系统元数据产生修改的操作，Namenode都会使用称为<strong>EditLog</strong>的<strong>事务日志记录下来。</strong><ul><li>例如，在HDFS中创建一个文件，Namenode就会在Editlog中插入一条记录来表示；</li><li>同样地，修改文件的复制因子也将往Editlog插入一条记录。Namenode在本地操作系统的文件系统中存储这个Editlog。</li></ul></li><li>整个文件系统的名字空间，包括数据块到文件的映射、文件的属性等，都存储在<strong>FsImage</strong>的文件中，这个文件放在Namenode所在的本地文件系统上。</li><li>DataNode不知道关于文件的任何信息，只存储文件的数据块。</li></ol><h3 id="通讯协议"><a href="#通讯协议" class="headerlink" title="通讯协议"></a>通讯协议</h3><ol><li>所有的HDFS通讯协议都建立在TCP&#x2F;IP协议之上。</li><li>客户端通过一个可配置的TCP端口连接到Namenode，通过ClientProtocol协议与Namenode交互。</li><li>Datanode使用DatanodeProtocol协议与Namenode交互。</li><li>ClientProtocol和Datanodeprotocol协议被抽象封装为远程过程调用(RPC)模型，Namenode不会主动发起RPC，而是响应来自客户端或 Datanode 的RPC请求。</li></ol><h3 id="健壮性"><a href="#健壮性" class="headerlink" title="健壮性"></a>健壮性</h3><ol><li>HDFS的主要目标就是即使在出错的情况下也要保证数据存储的可靠性。常见的三种出错情况是：Namenode出错, Datanode出错和网络割裂(network partitions)。<ul><li>磁盘数据错误，心跳检测和重新复制<ul><li>每个Datanode节点周期性地向Namenode发送心跳信号。网络割裂可能导致一部分Datanode跟Namenode失去联系。Namenode通过心跳信号的缺失来检测这一情况，并将这些近期不再发送心跳信号Datanode标记为宕机，不会再将新的IO请求发给它们。</li><li>任何存储在宕机Datanode上的数据将不再有效。Datanode的宕机可能会引起一些数据块的复制因子低于指定值，Namenode不断地检测这些需要复制的数据块，一旦发现就启动复制操作。</li><li>在下列情况下，可能需要重新复制：某个Datanode节点失效、某个副本遭到损坏、Datanode上的硬盘错误、文件的复制因子增大。</li></ul></li><li>集群均衡<ul><li>如果某个Datanode节点上的空闲空间低于特定的临界点，按照均衡策略系统就会自动地将数据从这个Datanode移动到其他空闲的Datanode。</li><li>当对某个文件的请求突然增加，那么也可能启动一个计划创建该文件新的副本，并且同时重新平衡集群中的其他数据。</li></ul></li><li>数据完整性<ul><li>从某个Datanode获取的数据块有可能因为Datanode的存储设备错误、网络错误或者软件bug造成出错。</li><li>HDFS客户端软件实现了对HDFS文件内容的校验和(checksum)检查<ul><li>当客户端创建一个新的HDFS文件，计算这个文件每个数据块的校验和，并将校验和作为一个单独的隐藏文件保存在同一个HDFS名字空间下。</li><li>当客户端获取文件内容后，它会检验从Datanode获取的数据跟相应的校验和文件中的校验和是否匹配，如果不匹配，客户端可以选择从其他Datanode获取该数据块的副本。</li></ul></li></ul></li><li>元数据磁盘错误<ul><li><strong>FsImage和Editlog</strong>是HDFS的核心数据结构，如果损坏了，整个HDFS实例都将失效。</li><li>Namenode可以配置成支持维护多个FsImage和Editlog的副本。任何对FsImage或者Editlog的修改，都将同步到它们的副本上。<ul><li>这种多副本的同步操作可能会降低Namenode每秒处理的名字空间事务数量。即使HDFS的应用是数据密集的，但不是元数据密集的。当Namenode重启的时候，它会选取最近的完整的FsImage和Editlog来使用。</li></ul></li><li>Namenode是HDFS集群中的单点故障(single point of failure)所在。如果Namenode机器故障，需要手工干预。可以尝试自动重启或在另一台机器上做Namenode故障转移。</li></ul></li><li>快照<ul><li>快照支持某一特定时刻的数据的复制备份。利用快照，可以让HDFS在数据损坏时恢复到过去一个已知正确的时间点。</li></ul></li></ul></li></ol><h3 id="数据组织"><a href="#数据组织" class="headerlink" title="数据组织"></a>数据组织</h3><ol><li>数据块<ul><li>HDFS适用于处理大数据集应用，这些应用都具有数据“写一次，读多次”特点，并且读取速度应能满足流式读取的需要。典型的数据块大小是64MB，HDFS中的文件总是按照64M被切分成不同的块，每个块尽可能地存储于不同的Datanode中。</li></ul></li><li>复制流水线<ul><li>当客户端以复制因子3向HDFS文件写入数据的时候，客户端会从Namenode获取一个Datanode列表用于存放副本。然后客户端开始向第一个Datanode传输数据，第一个Datanode以4 KB大小接收数据，将每一部分写入本地存储，并同时传输该部分到列表中第二个Datanode节点。第二个Datanode也是这样的操作，并同时传给第三个Datanode。最后，第三个Datanode接收数据并存储在本地。</li><li>Datanode能流水线式地从前一个节点接收数据，并同时转发给下一个节点，数据以流水线的方式从前一个Datanode复制到下一个。</li></ul></li></ol><h3 id="HDFS的访问"><a href="#HDFS的访问" class="headerlink" title="HDFS的访问"></a>HDFS的访问</h3><ol><li>DFShell</li><li>Java API</li></ol><h3 id="MapReduce-star"><a href="#MapReduce-star" class="headerlink" title="MapReduce:star:"></a>MapReduce:star:</h3><ol><li>由Google提出，基于函数式编程模型思想</li><li>动机：在成千上百CPU上方便地并行处理大规模数据</li><li>思想：分而治之</li><li>自动并行和分布</li><li>容错，提供状态监控工具</li><li>程序员接口清晰，两个函数map（）和reduce（）</li></ol><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93PPT/image-20230217000548509.png" alt="image-20230217000548509" style="zoom:67%;" /><h3 id="编程模型"><a href="#编程模型" class="headerlink" title="编程模型"></a>编程模型</h3><ol><li><p>基于函数式编程思想。</p></li><li><p>用户实现两个函数接口：</p><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93PPT/image-20230217000619603.png" alt="image-20230217000619603" style="zoom:70%;" /></li></ol><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93PPT/image-20230217000636607.png" alt="image-20230217000636607" style="zoom:80%;" /><h3 id="并行化"><a href="#并行化" class="headerlink" title="并行化"></a>并行化</h3><ol><li>map()函数并行执行，给定数据集，按照key生成 不同的中间结果</li><li>reduce() 函数针对不同的out-key并行执行</li><li>所有值的处理是独立的。</li><li>瓶颈：直到所有的map函数执行结束后，reduce阶段才开始。</li></ol>]]></content>
    
    
    <categories>
      
      <category>非关系数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>非关系数据库</tag>
      
      <tag>PPT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>非关系数据库期末复习</title>
    <link href="/2023/02/15/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/"/>
    <url>/2023/02/15/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="I-x2F-O-Optimization"><a href="#I-x2F-O-Optimization" class="headerlink" title="I&#x2F;O Optimization"></a>I&#x2F;O Optimization</h1><h2 id="Hbase读取性能优化"><a href="#Hbase读取性能优化" class="headerlink" title="Hbase读取性能优化"></a>Hbase读取性能优化</h2><p>读请求延迟较大通常存在三种场景，分别为：</p><ul><li>仅有某业务延迟较大，集群其他业务都正常</li><li>整个集群所有业务都反映延迟较大</li><li>某个业务起来之后集群其他部分业务延迟较大</li></ul><p>这三种场景是表象，通常某业务反应延迟异常，首先需要明确具体是哪种场景，然后针对性解决问题。</p><p>主要分为四个方面: 客户端优化、服务器端优化、列族设计优化以及 HDFS 相关优化</p><h3 id="客户端优化"><a href="#客户端优化" class="headerlink" title="客户端优化"></a>客户端优化</h3><p>客户端作为业务读写的入口，姿势使用不正确通常会导致本业务读延迟较高实际上存在一些使用姿势的推荐用法</p><h5 id="scan-缓存是否设置合理？"><a href="#scan-缓存是否设置合理？" class="headerlink" title="scan 缓存是否设置合理？"></a>scan 缓存是否设置合理？</h5><p><strong>优化原理:</strong> HBase业务通常一次 scan 就会返回大量数据，因此客户端发起一次 scan 请求，实际并不会一次就将所有数据加载到本地，而是分成多次 RPC 请求进行加载，这样设计一方面因为大量数据请求可能会导致网络带宽严重消耗进而影响其他业务，另一方面因为数据量太大可能导致本地客户端发生OOM。在这样的设计体系下，用户会首先加载一部分数据到本地，然后遍历处理，再加载下一部分数据到本地处理，如此往复，直至所有数据都加载完成。数据加载到本地就存放在scan缓存中，默认为100条数据。</p><p>通常情况下，默认的scan缓存设置是可以正常工作的。但是对于一些大scan（一次scan可能需要查询几万甚至几十万行数据），每次请求100条数据意味着一次scan需要几百甚至几千次RPC请求，这种交互的代价无疑是很大的。因此可以考虑将scan缓存设置增大，比如设为500或者1000条可能更加合适。《HBase原理与实践》作者之前做过一次试验，在一次scan 10w+条数据量的条件下，将scan缓存从100增加到1000条，可以有效降低scan请求的总体延迟，延迟降低了25%左右。</p><p><strong>优化建议:</strong> 大scan场景下将scan缓存从100增大到500或者1000，用以减少RPC次数。</p><h5 id="get-是否使用批量请求？"><a href="#get-是否使用批量请求？" class="headerlink" title="get 是否使用批量请求？"></a>get 是否使用批量请求？</h5><p><strong>优化原理:</strong> HBase分别提供了单条get以及批量get的API接口，使用批量get接口可以减少客户端到RegionServer之间的RPC连接数，提高读取吞吐量。另外需要注意的是，批量get请求要么成功返回所有请求数据，要么抛出异常。</p><p><strong>优化建议:</strong> 使用批量get进行读取请求。需要注意的是，对读取延迟非常敏感的业务，批量请求时每次批量数不能太大，最好进行测试。</p><h5 id="请求是否可以显式指定列簇或者列？"><a href="#请求是否可以显式指定列簇或者列？" class="headerlink" title="请求是否可以显式指定列簇或者列？"></a>请求是否可以显式指定列簇或者列？</h5><p><strong>优化原理:</strong> HBase是典型的列簇数据库，意味着同一列簇的数据存储在一起，不同列簇的数据分开存储在不同的目录下。一个表有多个列簇，如果只是根据rowkey而不指定列簇进行检索，不同列簇的数据需要独立进行检索，性能必然会比指定列簇的查询差很多，很多情况下甚至会有2～3倍的性能损失。</p><p><strong>优化建议：</strong>尽量指定列簇或者列进行精确查找。</p><h5 id="离线批量读取请求是否设置禁止缓存？"><a href="#离线批量读取请求是否设置禁止缓存？" class="headerlink" title="离线批量读取请求是否设置禁止缓存？"></a>离线批量读取请求是否设置禁止缓存？</h5><p><strong>优化原理:</strong> 通常在离线批量读取数据时会进行一次性全表扫描，一方面数据量很大，另一方面请求只会执行一次。这种场景下如果使用scan默认设置，就会将数据从HDFS加载出来放到缓存。可想而知，大量数据进入缓存必将其他实时业务热点数据挤出，其他业务不得不从HDFS加载，进而造成明显的读延迟毛刺。</p><p><strong>优化建议:</strong> 离线批量读取请求设置禁用缓存，scan.setCacheBlocks (false)。</p><h3 id="服务器端优化"><a href="#服务器端优化" class="headerlink" title="服务器端优化"></a>服务器端优化</h3><p>一般服务端端问题一旦导致业务读请求延迟较大的话，通常是集群级别的，即整个集群的业务都会反映读延迟较大。</p><h5 id="读请求是否均衡？"><a href="#读请求是否均衡？" class="headerlink" title="读请求是否均衡？"></a>读请求是否均衡？</h5><p><strong>优化原理:</strong> 假如业务所有读请求都落在集群某一台RegionServer上的某几个Region上，很显然，这一方面不能发挥整个集群的并发处理能力，另一方面势必造成此台 RegionServer 资源严重消耗（比如IO耗尽、handler耗尽等），导致落在该台 RegionServer 上的其他业务受到波及。也就是说读请求不均衡不仅会造成本身业务性能很差，还会严重影响其他业务。</p><p><strong>观察确认:</strong> 观察所有RegionServer的读请求QPS曲线，确认是否存在读请求不均衡现象。</p><p><strong>优化建议:</strong> Rowkey必须进行散列化处理（比如MD5散列），同时建表必须进行预分区处理。</p><h5 id="BlockCache设置是否合理？"><a href="#BlockCache设置是否合理？" class="headerlink" title="BlockCache设置是否合理？"></a>BlockCache设置是否合理？</h5><p><strong>优化原理:</strong> BlockCache作为读缓存，对于读性能至关重要。默认情况下BlockCache和MemStore的配置相对比较均衡（各占40%），可以根据集群业务进行修正，比如读多写少业务可以将BlockCache占比调大。另一方面，BlockCache的策略选择也很重要，不同策略对读性能来说影响并不是很大，但是对GC的影响却相当显著，尤其在BucketCache的offheap模式下GC表现非常优秀。</p><p><strong>观察确认:</strong> 观察所有 RegionServer 的缓存未命中率、配置文件相关配置项以及GC日志，确认 BlockCache 是否可以优化。</p><p><strong>优化建议:</strong> 如果JVM内存配置量小于20G，BlockCache策略选择LRUBlockCache；否则选择BucketCache策略的 offheap 模式。</p><h5 id="HFile文件是否太多？"><a href="#HFile文件是否太多？" class="headerlink" title="HFile文件是否太多？"></a>HFile文件是否太多？</h5><p><strong>优化原理:</strong> HBase在读取数据时通常先到MemStore和BlockCache中检索（读取最近写入数据和热点数据），如果查找不到则到文件中检索。HBase的类LSM树结构导致每个store包含多个HFile文件，文件越多，检索所需的IO次数越多，读取延迟也就越高。文件数量通常取决于Compaction的执行策略，一般和两个配置参数有关：hbase.hstore. compactionThreshold和hbase.hstore.compaction.max.size，前者表示一个store中的文件数超过阈值就应该进行合并，后者表示参与合并的文件大小最大是多少，超过此大小的文件不能参与合并。这两个参数需要谨慎设置，如果前者设置太大，后者设置太小，就会导致Compaction合并文件的实际效果不明显，很多文件得不到合并，进而导致HFile文件数变多。</p><p><strong>观察确认:</strong> 观察RegionServer级别以及Region级别的HFile数，确认HFile文件是否过多。</p><p><strong>优化建议:</strong> hbase.hstore.compactionThreshold设置不能太大，默认为3个。</p><h5 id="Compaction是否消耗系统资源过多？"><a href="#Compaction是否消耗系统资源过多？" class="headerlink" title="Compaction是否消耗系统资源过多？"></a>Compaction是否消耗系统资源过多？</h5><p><strong>优化原理:</strong> Compaction是将小文件合并为大文件，提高后续业务随机读性能，但是也会带来IO放大以及带宽消耗问题（数据远程读取以及三副本写入都会消耗系统带宽）。正常配置情况下，Minor Compaction并不会带来很大的系统资源消耗，除非因为配置不合理导致MinorCompaction太过频繁，或者Region设置太大发生Major Compaction。</p><p><strong>观察确认:</strong> 观察系统IO资源以及带宽资源使用情况，再观察Compaction队列长度，确认是否由于Compaction导致系统资源消耗过多。</p><p><strong>优化建议:</strong> 对于大Region读延迟敏感的业务（100G以上）通常不建议开启自动MajorCompaction，手动低峰期触发。小Region或者延迟不敏感的业务可以开启MajorCompaction，但建议限制流量。</p><h3 id="列族设计优化"><a href="#列族设计优化" class="headerlink" title="列族设计优化"></a>列族设计优化</h3><h5 id="布隆过滤器是否设置？"><a href="#布隆过滤器是否设置？" class="headerlink" title="布隆过滤器是否设置？"></a>布隆过滤器是否设置？</h5><p><strong>优化原理:</strong> 布隆过滤器主要用来过滤不存在待检索rowkey的HFile文件，避免无用的IO操作。</p><p>布隆过滤器取值有两个——row以及rowcol，需要根据业务来确定具体使用哪种。如果业务中大多数随机查询仅仅使用row作为查询条件，布隆过滤器一定要设置为row；如果大多数随机查询使用row+column作为查询条件，布隆过滤器需要设置为rowcol。如果不确定业务查询类型，则设置为row。</p><p><strong>优化建议:</strong> 任何业务都应该设置布隆过滤器，通常设置为row，除非确认业务随机查询类型为row+column，则设置为rowcol。<strong>默认为 row</strong></p><h5 id="TTL-是否设置合理？"><a href="#TTL-是否设置合理？" class="headerlink" title="TTL 是否设置合理？"></a>TTL 是否设置合理？</h5><p><strong>优化原理:</strong> TTL(Time to Live) 用于限定数据的超时时间，HBase cell 超过时间后会被自动删除，对某些数据不是永久保存，并大量写入的场景下非常适用，减少数据规模</p><p><strong>优化建议:</strong> CF 默认的 TTL 值是 FOREVER，也就是永不过期，可以根据具体的业务场景设置超时时间</p><h3 id="HDFS相关优化"><a href="#HDFS相关优化" class="headerlink" title="HDFS相关优化"></a>HDFS相关优化</h3><h5 id="数据本地率是不是很低？"><a href="#数据本地率是不是很低？" class="headerlink" title="数据本地率是不是很低？"></a>数据本地率是不是很低？</h5><p><strong>优化原理:</strong> 如果数据本地率很低，数据读取时会产生大量网络IO请求，导致读延迟较高。</p><p><strong>观察确认:</strong> 观察所有RegionServer的数据本地率（见jmx中指标PercentFileLocal，在TableWeb UI可以看到各个Region的Locality）。</p><p><strong>优化建议:</strong> 尽量避免Region无故迁移。对于本地率较低的节点，可以在业务低峰期执行major_compact。</p><blockquote><p>执行major_compact提升数据本地率的理论依据是，major_compact本质上是将Region中的所有文件读取出来然后写到一个大文件，写大文件必然会在本地DataNode生成一个副本，这样Region的数据本地率就会提升到100%。</p></blockquote><h5 id="Short-Circuit-Local-Read功能是否开启？"><a href="#Short-Circuit-Local-Read功能是否开启？" class="headerlink" title="Short-Circuit Local Read功能是否开启？"></a>Short-Circuit Local Read功能是否开启？</h5><p><strong>优化原理:</strong> 当前HDFS读取数据都需要经过 DataNode，客户端会向DataNode发送读取数据的请求，DataNode接受到请求之后从硬盘中将文件读出来，再通过TCP发送给客户端。Short Circuit策略允许客户端绕过DataNode直接读取本地数据。</p><p><strong>优化建议:</strong> 开启Short Circuit Local Read 功能，需要在<code>hbase-site.xml</code>或者<code>hdfs-site.xml</code>配置文件中增加如下配置项</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.client.read.shortcircuit<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.domain.socket.path<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>/var/lib/hadoop-hdfs/dn_socket<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.client.read.shortcircuit.buffer.size<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>131072<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>需要注意的是，dfs.client.read.shortcircuit.buffer.size参数默认是1M，对于HBase系统来说有可能会造成OOM，详见HBASE-8143 HBase on Hadoop 2 with local short circuit reads(ssr) causes OOM</p></blockquote><h5 id="Hedged-Read功能是否开启？"><a href="#Hedged-Read功能是否开启？" class="headerlink" title="Hedged Read功能是否开启？"></a>Hedged Read功能是否开启？</h5><p><strong>优化原理:</strong> HBase数据在HDFS中默认存储三个副本，通常情况下HBase会根据一定算法优先选择一个DataNode进行数据读取。然而在某些情况下，有可能因为磁盘问题或者网络问题等引起读取超时，根据Hedged Read策略，如果在指定时间内读取请求没有返回，HDFS客户端将会向第二个副本发送第二次数据请求，并且谁先返回就使用谁，之后返回的将会被丢弃。</p><p><strong>优化建议:</strong> 开启Hedged Read功能，需要在<code>hbase-site.xml</code>配置文件中增加如下配置项</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.client.hedged.read.threadpool.size<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>20<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><span class="hljs-comment">&lt;!-- 20 threads --&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.client.hedged.read.threshold.millis<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>10<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><span class="hljs-comment">&lt;!-- 10 milliseconds --&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>参数dfs.client.hedged.read.threadpool.size表示用于hedged read的线程池线程数量，默认为0，表示关闭hedged read功能；参数dfs.client.hedged.read.threshold.millis表示HDFS数据读取超时时间，超过这个阈值，HDFS客户端将会再发起一次读取请求。</p></blockquote><h3 id="读性能优化归纳"><a href="#读性能优化归纳" class="headerlink" title="读性能优化归纳"></a>读性能优化归纳</h3><p>提到读延迟较大无非三种常见的表象，<strong>单个业务慢、集群随机读慢以及某个业务随机读之后其他业务受到影响导致随机读延迟很大。</strong></p><p>了解完常见的可能导致读延迟较大的一些问题之后，我们将这些问题进行如下归类，读者可以在看到现象之后在对应的问题列表中进行具体定位</p><p><a href="https://lihuimintu.github.io/images/blog/2020-03-05-3.png"><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/2020-03-05-3.png" alt="img"></a></p><h2 id="Hbase写入性能优化"><a href="#Hbase写入性能优化" class="headerlink" title="Hbase写入性能优化"></a>Hbase写入性能优化</h2><h3 id="客户端优化-1"><a href="#客户端优化-1" class="headerlink" title="客户端优化"></a>客户端优化</h3><h5 id="是否可以使用-Bulkload-方案写入？"><a href="#是否可以使用-Bulkload-方案写入？" class="headerlink" title="是否可以使用 Bulkload 方案写入？"></a>是否可以使用 Bulkload 方案写入？</h5><p>Bulkload 是一个 MapReduce 程序（当然，也可以自行改成 Spark 程序）运行在Hadoop集群。程序的输入是指定数据源，输出是 HFile 文件。HFile 文件生成之后再通过 LoadIncrementalHFiles 工具将 HFile 中相关元数据加载到 HBase 中。</p><p>Bulkload 方案适合将已经存在于 HDFS 上的数据批量导入 HBase 集群。相比调用API的写入方案，Bulkload 方案可以更加高效、快速地导入数据，而且对 HBase 集群几乎不产生任何影响。</p><p>关于 Bulkload 可以阅读《HBase原理与实践》6.2 章</p><h5 id="是否需要写-WAL-WAL-是否需要同步写入？"><a href="#是否需要写-WAL-WAL-是否需要同步写入？" class="headerlink" title="是否需要写 WAL? WAL 是否需要同步写入？"></a>是否需要写 WAL? WAL 是否需要同步写入？</h5><p><strong>优化原理:</strong> 数据写入流程可以理解为一次顺序写WAL+一次写缓存，通常情况下写缓存延迟很低，因此提升写性能只能从WAL入手。HBase中可以通过设置WAL的持久化等级决定是否开启WAL机制以及HLog的落盘方式。WAL的持久化分为四个等级：SKIP_WAL，ASYNC_WAL，SYNC_WAL以及FSYNC_WAL。如果用户没有指定持久化等级，HBase默认使用SYNC_WAL等级持久化数据。</p><p>在实际生产线环境中，部分业务可能并不特别关心异常情况下少量数据的丢失，而更关心数据写入吞吐量。比如某些推荐业务，这类业务即使丢失一部分用户行为数据可能对推荐结果也不会构成很大影响，但是对于写入吞吐量要求很高，不能造成队列阻塞。这种场景下可以考虑关闭WAL写入。退而求其次，有些业务必须写WAL，但可以接受WAL异步写入，这是可以考虑优化的，通常也会带来一定的性能提升。</p><p><strong>优化推荐:</strong> 根据业务关注点在WAL机制与写入吞吐量之间做出选择，用户可以通过客户端设置WAL持久化等级。</p><h5 id="Put-是否可以同步批量提交？"><a href="#Put-是否可以同步批量提交？" class="headerlink" title="Put 是否可以同步批量提交？"></a>Put 是否可以同步批量提交？</h5><p><strong>优化原理:</strong> HBase分别提供了单条put以及批量put的API接口，使用批量put接口可以减少客户端到RegionServer之间的RPC连接数，提高写入吞吐量。另外需要注意的是，批量put请求要么全部成功返回，要么抛出异常。</p><p><strong>优化建议:</strong> 使用批量put写入请求。</p><h5 id="Put-是否可以异步批量提交？"><a href="#Put-是否可以异步批量提交？" class="headerlink" title="Put 是否可以异步批量提交？"></a>Put 是否可以异步批量提交？</h5><p><strong>优化原理:</strong> 如果业务可以接受异常情况下少量数据丢失，可以使用异步批量提交的方式提交请求。提交分两阶段执行：用户提交写请求，数据写入客户端缓存，并返回用户写入成功；当客户端缓存达到阈值（默认2M）后批量提交给RegionServer。需要注意的是，在某些客户端异常的情况下，缓存数据有可能丢失。</p><p><strong>优化建议:</strong> 在业务可以接受的情况下开启异步批量提交，用户可以设置setAutoFlush (false)</p><h6 id="写入-KeyValue-数据是否太大？"><a href="#写入-KeyValue-数据是否太大？" class="headerlink" title="写入 KeyValue 数据是否太大？"></a>写入 KeyValue 数据是否太大？</h6><p>KeyValue大小对写入性能的影响巨大。一旦遇到写入性能比较差的情况，需要分析写入性能下降是否因为写入KeyValue的数据太大。</p><p>KeyValue大小对写入性能影响曲线如下</p><p><a href="https://lihuimintu.github.io/images/blog/2020-03-11-1.png"><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/2020-03-11-1.png" alt="img"></a></p><p>横坐标是写入的一行数据（每行数据10列）大小，左纵坐标是写入吞吐量，右纵坐标是写入平均延迟（ms）。可以看出，随着单行数据不断变大，写入吞吐量急剧下降，写入延迟在100K之后急剧增大。</p><h3 id="服务端优化"><a href="#服务端优化" class="headerlink" title="服务端优化"></a>服务端优化</h3><h5 id="Region-是否太少？"><a href="#Region-是否太少？" class="headerlink" title="Region 是否太少？"></a>Region 是否太少？</h5><p><strong>优化原理:</strong> 当前集群中表的Region个数如果小于RegionServer个数，即Num (Region of Table)&lt; Num (RegionServer)，可以考虑切分Region并尽可能分布到不同的RegionServer上以提高系统请求并发度。</p><h5 id="写入请求是否均衡？"><a href="#写入请求是否均衡？" class="headerlink" title="写入请求是否均衡？"></a>写入请求是否均衡？</h5><p><strong>优化原理:</strong> 写入请求如果不均衡，会导致系统并发度较低，还有可能造成部分节点负载很高，进而影响其他业务。分布式系统中特别需要注意单个节点负载很高的情况，单个节点负载很高可能会拖慢整个集群，这是因为很多业务会使用Mutli批量提交读写请求，一旦其中一部分请求落到慢节点无法得到及时响应，会导致整个批量请求超时。</p><p><strong>优化建议:</strong> 检查Rowkey设计以及预分区策略，保证写入请求均衡。</p><h5 id="Utilize-Flash-storage-for-WAL"><a href="#Utilize-Flash-storage-for-WAL" class="headerlink" title="Utilize Flash storage for WAL"></a>Utilize Flash storage for WAL</h5><p>该特性会将WAL文件写到SSD上，对于写性能会有非常大的提升。需要注意的是，该特性建立在HDFS 2.6.0+以及HBase 1.1.0+版本基础上，以前的版本并不支持该特性。</p><p>使用该特性需要两个配置步骤:</p><ol><li>使用HDFS Archival Storage机制，在确保物理机有SSD硬盘的前提下配置HDFS的部分文件目录为SSD介质</li><li>在hbase-site.xml中添加如下配置</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hbase.wal.storage.policy<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>ONE_SSD<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p>hbase.wal.storage.policy默认为none，用户可以指定ONE_SSD或者ALL_SSD</p><ul><li>ONE_SSD: WAL在HDFS上的一个副本文件写入SSD介质，另两个副本写入默认存储介质</li><li>ALL_SSD: WAL的三个副本文件全部写入SSD介质</li></ul><h3 id="写入问题"><a href="#写入问题" class="headerlink" title="写入问题"></a>写入问题</h3><ul><li>写阻塞<ul><li>MemStore 占用内存超过 RegionServer 级别高水位阈值导致阻塞 (hbase.regionserver.global.memstore.size)</li><li>RegionServer Active Handler 资源被耗尽 (可能跟KeyValue太大有关)</li><li>Store 中 HFile 文件数量达到阈值就会阻塞写入 (hbase.hstore.blockingStoreFiles)</li></ul></li><li>写延迟<ul><li>WAL 写入延迟，IO 资源是否争抢 (Utilize Flash storage for WAL)</li><li>JVM young gc (CCSMap)</li></ul></li></ul><h2 id="LSM树"><a href="#LSM树" class="headerlink" title="LSM树"></a>LSM树</h2><blockquote><p>存储引擎和B树存储引擎一样，同样支持增、删、读、改、顺序扫描操作。而且通过批量存储技术规避磁盘随机写入问题</p></blockquote><h3 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h3><blockquote><p>把一棵大树拆分成N棵小树，它首先写入内存中，随着小树越来越大，内存中的小树会flush到磁盘中，磁盘中的树定期可以做merge操作，合并成一棵大树，以优化读性能。</p></blockquote><h3 id="读写性能"><a href="#读写性能" class="headerlink" title="读写性能"></a>读写性能</h3><blockquote><p>LSM树与B树相比，牺牲了部分的读性能，大幅提高写性能。<br> LSM Tree，对于最简单的二层LSM Tree而言，内存中的数据和磁盘你中的数据merge操作，如下图：</p><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230216000156616.png" alt="image-20230216000156616" style="zoom:80%;" /></blockquote><h2 id="hbase与LSM树"><a href="#hbase与LSM树" class="headerlink" title="hbase与LSM树"></a>hbase与LSM树</h2><p><strong>原理：</strong></p><blockquote><p>数据会先写到内存中，为了防止内存数据丢失，写内存的同时需要持久化到磁盘，对应了HBase的MemStore和HLog；</p><p>MemStore中的数据达到一定的阈值之后，需要将数据刷写到磁盘，即生成HFile（也是一颗小的B+树）文件；</p><p>hbase中的minor（少量HFile小文件合并）major（一个region的所有HFile文件合并）执行compact操作，同时删除无效数据（过期及删除的数据），多棵小树在这个时机合并成大树，来增强读性能。</p></blockquote><p><strong>针对LSM树读性能hbase的优化：</strong></p><blockquote><p>Bloom-filter:就是个带随机概率的bitmap,可以快速的告诉你，某一个小的有序结构里有没有指定数据的。于是就可以不用二分查找，而只需简单的计算几次就能知道数据是否在某个小集合里啦。效率得到了提升，但付出的是空间代价。</p><p>compact:小树合并为大树:因为小树性能有问题，所以要有个进程不断地将小树合并到大树上，这样大部分的老数据查询也可以直接使用log2N的方式找到，不需要再进行(N&#x2F;m)*log2n的查询了。</p></blockquote><p><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230216000356549.png" alt="image-20230216000356549"></p><p><strong>LSM-Tree的初衷是想通过空间放大和读放大来换取写放大的降低，从而达到极致的写性能</strong>，但也需要做好三方面因素的权衡。EDBT 2016的一篇论文首先提出RUM猜想（R为read，U为update，M为memory usage，RUM为三者缩写）。该论文认为，三者之间存在权衡关系，无法使得三个方面的性能都达到最优，因此必须在三者之间进行有效权衡。</p><p>以compaction操作为例，其目的是保证数据的局部有序和清理数据旧值，即一个sorted run内部的多个SST文件中的数据是有序的，从而降低读放大。对一个查询而言，在一个sorted run中至多只需要读取一个SST中的一个数据块。</p><p><strong>如果完全不做compaction操作</strong>，即一直顺序写，LSM-Tree就会退化为log文件，这时<strong>写性能达到最佳</strong>。因为只需要顺序写log即可，不需要做任何操作。但读性能将会处于最差状态，因为在没有任何索引、无法保证有序性的情况下，每次想读到固定的数据项，就需要扫描所有的SST件。</p><p><strong>如果compaction操作做到极致</strong>，实现所有数据全局有序，此时<strong>读性能最优</strong>。查询时只需要通过索引和二分法即可迅速找到要读的键值的位置，一次IO操作即可完成，但代价是需要频繁进行compaction操作来维持全局有序状态，从而造成严重的写放大，即写性能变差。</p><p><strong>这就延伸出两种compaction策略：</strong></p><ul><li>Tiering compaction：较少做compaction操作，有序性较弱，每一层允许有多个sorted run。</li><li>Leveling compaction：更频繁的compaction操作，尽可能增强有序性，限制每一层最多只有1个sorted run（L0层除外）。</li></ul><h3 id="优化策略与分析"><a href="#优化策略与分析" class="headerlink" title="优化策略与分析"></a><strong>优化策略与分析</strong></h3><p><strong>Leveling compaction策略</strong>中，每层只有一个sorted run，sorted run内部的数据保持物理有序。具体实现上我们以RocksDB为例。一个sorted run可以由多个key不重叠且有序的SSTable files组成。当第L层满时，L层会选取部分数据即部分SSTable，与L+1层有重叠的SSTable进行合并，该合并操作即compaction操作。</p><p><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230216000600765.png" alt="image-20230216000600765"></p><p><strong>Tiering compaction策略</strong>中，每层可以有至多T个sorted run，sorted run内部有序但每层不完全有序。当第L层满时，L层的T个sorted run会合并为L+1层的1个sorted run。因为每层允许有多个sorted run，因此SST文件间可能会存在数据范围的重叠，compaction操作的频率会更低，<strong>写性能也会更强</strong>。</p><p><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230216000618106.png" alt="image-20230216000618106"></p><p>两种compaction策略各有优劣。Tiering compaction因为compation操作频率低，过期版本的数据未能得到及时清除，因此空间利用率低，由此带来的查询操作的代价比较高。在极端情况log file即完全不做compaction操作时，<strong>写入性能</strong>最优。Leveling compaction则会更频繁地做compaction操作，因此数据趋向更有序。<strong>极端情况sorted array即数据达到全局有序时，此时查询性能和空间利用率最优。</strong></p><p><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230216000724570.png" alt="image-20230216000724570"></p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><ul><li>Tiering compaction的写放大低，compaction频率低，其缺陷为空间放大高、查询效率低，更利于update频繁的workload；Leveling compaction的写放大高，compaction操作更频繁，但空间放大低，查询效率高。</li><li>尽管Tiering  compaction和Leveling  compaction的空间放大不同，但导致空间放大的主要原因相同，即受最下层的过期版本数据影响。</li><li>越往下的层，做一次compaction的I&#x2F;O代价越高，但发生的频率也更低，不同层之间做compaction的期望代价大致相同。</li><li>点查、空间放大、长范围查询的性能瓶颈在LST-tree的最下层，而更新操作则更加均匀地分布在每一层。因此，减少非最后一层的compaction频率可以有效降低更新操作的代价，且对点查、空间放大、长范围查询的性能影响较小。</li></ul><h3 id="降低写放大"><a href="#降低写放大" class="headerlink" title="降低写放大"></a><strong>降低写放大</strong></h3><p><strong>基于上述理论分析，该论文提出混合compaction策略即Lazy Leveling。</strong>它将Leveling与Tiering进行结合，在最后一层使用Leveling策略，其他层使用Tiering策略，即最后一层只能存在唯一的sorted run，其他层允许存在多个sorted run，从而有效降低非最后一层做compaction的频率。</p><p>下表是采取Lazy Leveling策略后的性能汇总表，其中，绿色部分表示效果较好，红色部分表示较差，黄色部分代表适中。从下表可以看出，Lazy Leveling的更新操作（update）性能优于Leveling，接近于Tiering。这是由于在前L-1层维持Tiering策略，做compaction的频率更低，写放大低。但Lazy Leveling的空间放大接近于Leveling，远好于Tiering。这相当于结合了两种策略的优势。</p><p>对于点查（point lookup），论文中分别分析了查找不存在kv和kv在最后一层两种情况，并基于论文Monkey的思路对每层的bloom filter bit进行了优化，可以达到与Leveling+Monkey策略相匹配的点查性能。对于长范围查询，Lazy Leveling可以做到与Leveling一致的性能，而短范围查询则退化至接近Tiering的水平。</p><p><strong>论文对此进行总结：</strong>使用一种单一compaction策略，不可能在上述所有操作中做到性能最优。<strong>Lazy Leveling本质上是Tiering与Leveling策略的折衷加调优，在侧重于更新操作、点查和长范围查询的workload上性能较好</strong>；Leveling适用于查询为主的workload；Tiering则适用于更新操作为主的workload</p><h1 id="GFS"><a href="#GFS" class="headerlink" title="GFS"></a>GFS</h1><h2 id="1-什么是-GFS"><a href="#1-什么是-GFS" class="headerlink" title="1. 什么是 GFS"></a>1. 什么是 GFS</h2><p>GFS，全称 Google File System，谷歌文件系统。</p><p>这篇论文是 2003 年发表的，在这之前，GFS 已经大规模应用在了 Google 内部。</p><p>GFS 是 Google 提出的一个文件系统，其是分布式的，主要用于处理越来越庞大的数据。因为当数据量大到一定程度时，传统的数据存储与处理方式就显得很笨重了，不适用了（比如你很难很快地读取数百 TB 的数据）。</p><h2 id="2-设计概述"><a href="#2-设计概述" class="headerlink" title="2. 设计概述"></a>2. 设计概述</h2><h3 id="2-1-假想（目标）"><a href="#2-1-假想（目标）" class="headerlink" title="2.1. 假想（目标）"></a>2.1. 假想（目标）</h3><p>GFS 在设计的时候有一些假想，即预期要实现的目标。</p><ol><li>这个系统由很多廉价的、经常会故障的商用组件构建，所以在日常使用中，这个系统必须持续地监控自身，以检测、容忍组件故障，并迅速从组件故障中恢复。</li><li>这个系统存储数量适中的大文件。Google 期望是几百万个文件，每个一般是 100MB 或者更大。数 GB 大小的文件在这个系统中也是很常见的，需要高效管理。而小文件肯定也要支持，但是不需要为了这些小文件专门优化。</li><li>工作负载主要包括两类读：大文件流的读（流只能顺序读）和小文件的随机读。<ul><li>大文件流的读：单个读操作一般读几百 KB，更常见的是读 1MB 或者更多。来自同一个客户端连续的读操作经常是从一个文件连续的位置读。</li><li>小文件的随机读：一般是在文件的任意位置读几 KB 大小。注重性能的应用程序通常对它们的小读取进行批处理和排序，以逐渐地浏览文件，而不是来回的读（文件指针来回移动）。</li></ul></li><li>这个系统也会有很多大的、连续的写操作，将数据追加到文件末尾。一般这种操作的大小和读差不多。一旦写入操作完成，这个文件很少会再次修改。小的随机写也支持，但是不太高效。</li><li>这个系统必须高效地实现定义明确的语义，以支持多客户端并发写入（追加写入）同一个文件。GFS 中的文件通常用作生产者消费者队列或多路合并。系统中有数百个生产者，每个机器上运行一个，这些生产者并发地追加修改一个文件，因此以最小的同步开销来实现原子性是必不可少的。这些文件可能随后被读取，也可能有一个消费者在写的同时读。</li><li>高的持续的带宽比低的延迟更重要。GFS 的大多数目标应用程序都重视以高速率批量处理数据，而很少有应用程序对单个读或写有严格的响应时间要求。</li></ol><h3 id="2-2-接口"><a href="#2-2-接口" class="headerlink" title="2.2. 接口"></a>2.2. 接口</h3><p>GFS 提供了一个常见的文件系统接口，尽管 GFS 没有实现像 POSIX 这样的标准 API。</p><p>GFS 中文件在目录中以层次结构组织，通过路径名区分。</p><p>GFS 支持常用操作以创建(create)、删除(delete)、打开(open)、关闭(close)、读(read)和写(write)文件。</p><p>此外，GFS 中还有 <em>snapshot</em> 和 <em>record append</em> 操作。Snapshot 以一个很低的开销创建一个文件的或者一个目录树的拷贝。Record append 允许多个客户端并发地追加写入同一个文件，且确保每个客户端的写入操作都是原子的。Record append 对实现多路合并结果、生产者消费者队列很有用，因为很多客户端可以同时追加写入，而不需要额外的锁。Google 发现在构建大型分布式应用时，这些类型的文件是非常有用的。</p><p>Snapshot 和 record append 会在后面进一步讨论。</p><h3 id="2-3-架构"><a href="#2-3-架构" class="headerlink" title="2.3. 架构"></a>2.3. 架构</h3><p>一个 GFS 集群包含单个 <em>master</em> 和多个 <em>chunkservers</em>，允许多个 <em>client</em> 访问。如图 1 所示。</p><p><img src="https://gukaifeng.cn/posts/gfs-lun-wen-yue-du-bi-ji/GFS_Figure_1.png" alt="图 1: GFS 架构"></p><p>图 1: GFS 架构</p><p>每个 master 或 chunkserver 一般都是一个商品 Linux 机器中运行着的一个用户级服务进程。在同一个机器上同时运行一个 chunkserver 和一个 client 是很容易，但前提是机器资源允许，并且你可以接受运行不稳定的应用程序代码导致的更低的可靠性。</p><p>GFS 系统中的文件会被划分为固定大小的 chunks。每个 chunk 使用一个不可变的、全局唯一的 64 位 chunk 句柄来标识，这个 chunk 句柄是在 chunk 创建时由 master 指定的。Chunkservers 在本地磁盘中以 Linux 文件的形式存储 chunks，并读取或写入由 chunk 句柄和字节范围指定的块数据。为了可靠性，每个 chunk 都在多个 chunkservers 上有复制。默认是 3 个复制，但用户可以为文件命名空间的不同部分指定不同的复制级别。</p><p>master 维护所有文件系统元数据，包括命名空间、访问控制信息、从文件到 chunk 的映射以及 chunks 当前的位置。master 也会控制系统范围内的活动，比如 chunk 租用管理，孤儿 chunks 的垃圾回收，以及在 chunkservers 之间迁移 chunks。master 会定期在 HeartBeat 消息中与每个 chunkservers 通信，以给 chunkservers 指令并收集其状态信息。</p><p>链接到每个应用程序的 GFS 客户端代码中实现了文件系统 API，这个 GFS 客户端代表应用程序与 master 和 chunkservers 通信以读写数据。客户端与 master 交互以进行元数据操作，但所有数据承载通信直接进入 chunkservers。GFS 没有提供 POSIX API，因此不需要连接到 Linux 的 vnode 层。</p><p>客户端和 chunkserver 都不缓存文件数据。客户端缓存文件数据几乎没什么好处，因为大多数应用程序通过巨大的文件进行流式传输，或者工作集太大而无法缓存。不缓存文件数据使得客户端代码和总体系统的代码得以简化，因为无需编写代码解决缓存一致性的问题（不过客户端是缓存元数据的）。Chunkservers 不需要缓存文件数据是因为 chunks 是作为本地文件存储的，所以 Linux buffer 缓存已经把频繁访问的数据放在内存中了。</p><h3 id="2-4-单个-Master"><a href="#2-4-单个-Master" class="headerlink" title="2.4. 单个 Master"></a>2.4. 单个 Master</h3><p>GFS 中只有一个 master，这大大简化了其设计，并且使得 master 能够根据全局知识做出复杂的 chunk 放置和复制决策。不过必须最小化在读写中 master 的调用次数，防止 master 成为 GFS 系统的性能瓶颈。客户端永远都不会通过 master 读写文件数据，而是向 master 询问该联系哪些 chunkservers，当客户端会在有限的时间内缓存此信息，且直接和 chunkservers 互动，以进行一系列的操作。</p><hr><p>现在我们通过一个简单的读操作来解释 GFS 的工作流程（就如图 1 中的那样）。</p><p>首先，要使用固定的 chunk 大小，客户端把应用程序指定的文件名和字节偏移翻译成这个文件中的一个 chunk 索引。然后客户端向 master 发送一个包含文件名和 chunk 索引的请求，master 给客户端回复相应的 chunk 句柄和 chunk 副本的位置。客户端以文件名和 chunk 索引作为 key 缓存这些信息。</p><p>客户端随后给副本之一发送一个请求（大部分情况是最近的一个副本），这个请求中指定了 chunk 句柄和一个 chunk 中的字节范围。同一个 chunk 的读就不再需要 client-master 互动了，直到客户端缓存的信息到期（前文说过在有限的时间内缓存这些信息，也就是说这些信息是有时效性的）或这个文件被重新打开。事实上，客户端往往在一个请求中询问多个 chunks，master 也可以在回复的信息中心包含这些请求的 chunks 信息，这些额外的信息几乎不需要什么额外的开销，就可以避免未来几次的 client-master 交互。</p><h3 id="2-5-Chunk-大小"><a href="#2-5-Chunk-大小" class="headerlink" title="2.5. Chunk 大小"></a>2.5. Chunk 大小</h3><p>Chunk 的大小是关键的设计参数之一。GFS 中将 chunk 的大小设定为 64MB，远远大于一般文件系统的块大小。每个 chunk 副本都以一个普通的 Linux 文件存储在一个 chunkserver 上，只要需要的时候才会扩展 chunk 的数量。延迟空间分配避免了由于内部碎片造成的空间浪费，这可能是对如此大 chunk 大小的最大反对。</p><p>将 chunk 设置为 64MB 这么大，可以提供一个重要的优势。<strong>首先</strong>，减少了客户端与 master 的交互次数，因为在同一个 chunk 上的读和写只需要在最初的请求中向 master 询问一次 chunk 的位置信息。减少客户端与 master 交互次数对于我们的工作负载而言格外重要，因为应用程序往往是连续读写大文件的。即便是对于小的随机读，客户端也可以轻松缓存一个数 TB 工作集的所有 chunk 的位置信息。<strong>第二</strong>，由于一个 chunk 比较大，使得一个客户端更可能在一个给定的 chunk 上执行很多操作，这样就可以在很长的一段时间内，通过保持一个持续的客户端与 chunkserver 之间的 TCP 连接来减少网络开销。<strong>第三</strong>，减少了 master 上存储的元数据大小。这允许我们把元数据放在内存中，把元数据放在内存中又反过来带给我们一些其他的优势，这些优势我们在 2.6.1 中讨论。</p><p>另一方面，一个很大的 chunk 大小，即便有延迟空间分配策略，也还是有缺点的。一个小文件可能包含很少数量的 chunks，甚至可能只有一个。这样如果有很多客户端都要访问这同一个文件，那么存储这些 chunks 的 chunkservers 就会成为热点。不过在实践中，热点问题不是主要问题，因为我们的应用程序大多是顺序读多 chunk 的大文件。</p><p>然而，当 GFS 首次被批处理队列系统使用时，热点确实出现了：一个可执行文件作为单个 chunk 文件写入 GFS，然后同时在数百台机器上启动。存储此可执行文件的少数 chunkservers 被数百个同时请求过载。Google 通过以更高的复制因子存储此类可执行文件以及使批处理队列系统错开应用程序启动时间来解决此问题。一个潜在的长期解决方案是允许客户端在这种情况下从其他客户端读取数据。</p><h3 id="2-6-元数据"><a href="#2-6-元数据" class="headerlink" title="2.6. 元数据"></a>2.6. 元数据</h3><p>master 中主要存储三种类型的元数据：</p><ol><li>文件和 chunk 的命名空间；</li><li>从文件到 chunks 的映射；</li><li>每个 chunk 的副本的位置。</li></ol><p>所有的元数据都存储在 master 的内存里。前两种类型也会通过在操作日志(operation log)上记录修改来持久化，操作日志存储在 master 的本地磁盘上，并且会在远程机器上复制。使用日志使得我们可以容易地、可靠地更新 master 状态信息，而不用承受 master 崩溃导致的不一致性的风险。master 不会持久的存储 chunk 位置信息，而是会在 master 启动时或一个 chunkserver 加入集群时向 chunkserver 询问其 chunks 信息。</p><h4 id="2-6-1-内存中的数据结构"><a href="#2-6-1-内存中的数据结构" class="headerlink" title="2.6.1. 内存中的数据结构"></a>2.6.1. 内存中的数据结构</h4><p>因为元数据存储在内存中，所以 master 的操作是非常快速的。进一步地说，master 定期在后台扫描其整个状态信息是非常简单且高效的。定期扫描是用来实现 chunk 垃圾回收、chunkserver 故障时的重新复制，以及为了负载均衡和跨 chunkserver 使用磁盘空间进行的 chunk 迁移的。4.3 和 4.4 小节会进一步讨论这些内容。</p><p>仅在内存访问这些，有一个潜在的问题是，chunks 的数量和整个 GFS 系统的容量受 master 拥有多少内存限制。在实践中这不是一个很严重的限制。对于每个 64MB 的 chunk，master 维护小于 64 字节的元数据。大部分 chunks 是满的，因为大部分文件包含很多个 chunks，只有最后一个可能是不满的。类似地，对于每个文件，master 存储的文件命名空间数据通常少于 64 个字节，因为它使用前缀压缩紧凑地存储文件名。</p><p>如果确有必要支持更大的文件系统，只需要给 master 增加额外的内存，这个开销相对于我们在内存中存储元数据获得的简单性、可靠性、性能与灵活性而言，是很小的。</p><h4 id="2-6-2-Chunk-的位置"><a href="#2-6-2-Chunk-的位置" class="headerlink" title="2.6.2. Chunk 的位置"></a>2.6.2. Chunk 的位置</h4><p>master 不会持有一个持久的关于哪些 chunkservers 有一个给定 chunk 的副本的记录，而是在 master 启动时简单地轮询 chunkservers 来获取这些信息。启动后 master 可以保持最新，因为 master 控制着所有 chunk 的放置，以及通过常规心跳(HearBeat)消息监控着 chunkserver 的状态。</p><p>Google 起初尝试在 master 中持久存储 chunk 的位置信息，但是后来决定在 master 启动时（以及启动后定期）从 chunkmasters 请求数据，这简单的多。并且这样做也排除了在有 chunkservsers 加入或离开集群、修改名字，故障、重启时等等保持 master 和 chunkservers 同步的问题。在一个有着数百个服务器的集群上，这些情况常常发生。</p><p>另一个理解这样设计决策的思路是这样想，一个 chunkserver 有决定存储哪些 chunks 在其本地磁盘上的最终话语权。在 master 上尝试维护一个这种信息的一致性视图是没有意义的，因为一个 chunkserver 上的错误可能导致 chunk 自发消失（比如磁盘损坏或不可用），或操作员可能修改 chunkserver 的名字。</p><h4 id="2-6-3-操作日志-Operation-Log"><a href="#2-6-3-操作日志-Operation-Log" class="headerlink" title="2.6.3. 操作日志(Operation Log)"></a>2.6.3. 操作日志(Operation Log)</h4><p>操作日志包含至关重要的元数据修改历史记录。</p><p>操作日志是 GFS 的核心。操作日志不仅仅是元数据唯一的持久化记录，也是一个逻辑时间线（充当定义并发操作的次序）。文件和 chunks 还有它们的版本(versions，详见 4.5. 小节)，全部由他们被创建时的逻辑时间唯一且永久标识。</p><p>由于操作日志是非常重要的，我们必须将其可靠存储，并在在元数据修改持久化之前不让修改对客户端可见。否则，我们会在事实上丢失整个文件系统或最近的客户端操作（即便 chunks 本身还在）（这里原文翻译过来就是这样的。我的理解是客户端对 chunks 的操作依赖其缓存的元数据，如果元数据的改动在持久化前就对客户端可见的话，客户端就会依赖改动后的元数据对 chunks 操作，而此时这些元数据的改动还没有持久化，客户端的操作可能无法执行，导致操作丢失）。因此 GFS 将操作日志在多个远程机器上复制，并且仅在相应的日志记录已经被 flush 到本地和远程磁盘上后才会响应一个客户端的操作。Master 在 flush 前一起批处理几个 log 记录，从而减少 flush 和复制对整个系统吞吐量的影响。</p><p>Master 通过重放操作日志来恢复其文件系统状态信息。为了使 master 启动时间最短，就要保持日志小。每当日志超过一个特定的大小时，master 就会生成一个包含其此时状态的检查点(check point)，这样 master 恢复的时候，只需要从本地磁盘加载最近的检查点，然后重放在这个检查点之后的有限数量的日志记录。检查点采用类似 B 树的紧凑形式，可以直接映射到内存中，用于命名空间查找，无需额外解析。 这进一步加快了恢复速度并提高了可用性</p><p>因为构建一个检查点需要一些时间，所以 master 的内部状态通过这样的一种方式构造：创建一个新的检查点时不推迟即将到来的修改，master 会切换到一个新的日志文件，并且在一个单独的线程中创建新的检查点。换句话说，新的检查点中包含了切换前的所有修改，切换后的修改会被记录到 master 切换过去的新的日志文件中。对于一个有几百万文件的集群来说，可以在一分钟左右创建完一个新的检查点。当检查点创建完成时，检查点会被写入本地和远程的磁盘。</p><p>恢复操作只需要最近的检查点和日志文件序列。更旧的检查点和日志文件就可以随便删了，尽管一般来说会保留一些以抵御灾难。在创建检查点时发生的故障不会影响正确性，因为恢复代码会检查并跳过不完整的检查点。</p><h3 id="2-7-一致性模式"><a href="#2-7-一致性模式" class="headerlink" title="2.7. 一致性模式"></a>2.7. 一致性模式</h3><p>GFS 有一个宽松的一致性模型，很好地支持我们的高度分布式应用程序，但是实现起来依然简单且高效。</p><p>我们现在讨论 GFS 如何保证一致性，以及这对应用程序来说有何意义。我们也会强调 GFS 如何维护这些保证，但是更详细的内容将在本文的其他部分来说。</p><h4 id="2-7-1-GFS-如何保证一致性"><a href="#2-7-1-GFS-如何保证一致性" class="headerlink" title="2.7.1. GFS 如何保证一致性"></a>2.7.1. GFS 如何保证一致性</h4><p>文件命名空间的修改（例如，文件创建）是原子的，且只能由 master 来操作：命名空间锁确保原子性和正确性（详见 4.1）；master 的操作日志定义了一个这些操作的全局的总的次序（详见 2.6.3）。</p><p>在数据修改后，文件区域的状态依赖于修改的类型，修改成功还是失败，以及这些是否是并发的修改。表 1 总结了在数据修改后的文件区域的状态。</p><p><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/GFS_Table_1.png" alt="表 1 : 发生修改后文件区域的状态"></p><p>表 1 : 发生修改后文件区域的状态</p><ul><li>对于一个文件区域，如果所有的客户端总是看到相同的数据（不论看的是哪个副本），那这个文件区域是一致的 <em>consistent</em>。</li><li>对于一个文件区域，在文件数据修改后，如果这个修改是一致的，并且客户端将看到这个修改写入的全部内容，那么这个文件区域就是 <em>defined</em>。</li></ul><p>（个人理解：对于一个文件区域，只要所有客户端看到的数据都是一样的，那这个区域就是 consistent 的。在 consistent 的前提下，如果所有修改都已经被写入，就是 defined 的。consistent 是 defined 的子集。即 defined 的一定是 consistent 的，但 consistent 的不一定是 defined 的（上表中的 Recored Append 在后面单独说）。）</p><p>当一个修改成功，且没有受到并发写者的干预（即串行的修改），那么受影响的区域是 <em>defined</em> 的（且含义一致）：即所有的客户端将总是能看到这个修改写入了什么。</p><p>并发的成功的修改使得受影响的区域是 <em>undefined</em> 但 <em>consistent</em>：即所有的客户端看到的数据是一样的，但这并不意味着每个修改都已经被写入。一般来说，写入的内容由多个修改的混合片段组成。</p><p>一个失败的修改会使得文件区域 inconsistent（因此也是 undefined）：不同的客户端在不同的时间可能看到不同的数据。我们在下面描述我们的应用程序如何辨别 defined 的区域和 undefined 的区域。另外，应用程序不需要进一步区分不同种类的 undefined 的区域。</p><p>数据修改可能是 <em>write</em> 或 <em>record appends</em>。</p><ul><li><em>write</em> 使数据被写入在一个由应用程序指定的文件偏移处。</li><li><em>record append</em> 使数据（即 <em>record</em>）被<strong>原子地</strong>的追加至少一次（即便是并发修改），但数据写入的文件偏移由 GFS 选择（详见 3.3）。</li></ul><p>作为对比，一个普通的 append 仅仅是一个在客户端认为是当前文件末尾的偏移处的 write。</p><p>标志着包含写入 record 的 <em>defined</em> 的区域的开始的偏移会被返回给客户端。此外，GFS 可能会在写入的内容之间插入填充或 record 的复制。我们认为 GFS 插入内容占据的区域是 <em>inconsistent</em> 的（即表 1 中的 <em>defined</em> interspersed with <em>inconsistent</em>，即 <em>defined</em> 区域中穿插了 <em>inconsistent</em> 区域，但这些区域不会影响读取数据的结果，因为读者会过滤掉这些），且占用的空间比起用户数据的总量而言微不足道。</p><p>在连续的成功的修改后，GFS 会保证被修改的文件区域是 <em>defined</em> 的，并且包含最后一次修改写入的数据。GFS 实现这一点，通过 (a) 以相同的顺序应用修改到 chunk 以及其所有的拷贝上（详见 3.1），(b) 使用 chunk 版本号检测某个拷贝是否过期（即在其对应的 chunkserver 挂掉时，错过了修改。详见 4.5）。过期的 chunk 拷贝永远都不会被再应用修改，其位置也不会再由 master 提供给客户端，这些过期的 chunk 将尽快被垃圾回收。</p><p>由于客户端缓存了 chunk 的位置信息，所以在其缓存的位置信息更新之前，客户端可能会从一个旧的副本中读取数据。只有当缓存条目超时，或文件被重新打开时，这个问题才能解决，因为条目超时或重新打开文件会清除客户端缓存中的所有跟这个文件有关的 chunk 信息。此外，由于我们的文件大多数都是仅 append 的，一个旧的副本通常返回一个最新的 chunk 结束位置之前的位置，而不是过期的数据（也就是说，数据还是有效的数据，只是返回的偏移位置不对）。当一个读者重试并联系 master 时，读者会立即获得现在的 chunk 的位置。</p><p>即便在修改成功后的较长时间后，组件故障仍然可以导致数据被损坏、催毁。GFS 通过 master 与所有 chunkservers 定期握手的方式来找到故障的 chunkservers，通过校验和（详见 5.2）来检测数据是否损坏。一旦发现问题，GFS 会尽快通过相应数据的其他有效副本来恢复数据（详见 4.3）。仅当一个 chunk 的所有副本都丢失了，这个 chunk 的丢失才是不可逆地，即便在这种情况下，chunk 也是无法访问，而不是损坏：应用程序会收到一个明确的错误，而不是损坏的数据。</p><h4 id="2-7-2-对应用程序的影响"><a href="#2-7-2-对应用程序的影响" class="headerlink" title="2.7.2. 对应用程序的影响"></a>2.7.2. 对应用程序的影响</h4><p>GFS 应用程序可以用一些其他目的已经需要的简单技术来适应宽松的一致性模型：依赖 append 而不是覆写、检查点，和写入自验证、自识别的记录。</p><p>实际上，我们应用程序所有的文件修改，都是通过 append 而不是覆写。</p><p>一个典型的用法是，一个写者从头到尾生产一个文件，在数据全部写入完成后，在原子地将文件重命名一个持久化的名字。或者是定期生成检查点，即每成功写入多少数据，就生成一个检查点。检查点也可能包含应用程序级检查和。读者只验证和处理直到最新的检查点的文件区域，即已知的 <em>defined</em> 状态的文件区域。无论一致性和并发问题怎样，这种方法都很好地为我们服务。append 比随机写要高效的多，而且在面对应用程序故障时更有弹性。检查点允许写者递增的重新开始（即可以从更新的检查点处接着写），阻止读者处理已经成功写入，但还未对应用程序可见（即在应用程序认为还不完整）的数据。</p><p>另一个典型的用法，很多写者并发 append 一个文件，以获取合并结果或作为一个生产者-消费者队列。<em>Record append</em> 的 <strong>append 至少一次</strong>语义保留了每个写者的输出。</p><p>读者通过下面的方法来处理偶然的填充或者 record 的复制。每个 record 由写者准备好，包含了诸如校验和这种额外信息，这样 record 的有效性就可以验证。读者使用校验和，可以区分填充和 recored 片段。如果应用程序不能容忍偶尔的重复（例如，如果重复的记录会触发非幂等操作），它可以使用记录中的唯一标识符将它们过滤掉，这通常是命名相应应用程序实体（例如 Web 文档）所必需的。这些 record I&#x2F;O 的功能（除了重复记录的移除）在我们应用程序共享的库代码中，并且也适用其他 Google 的文件接口实现。这样，相同的 record 序列加上极少的重复，总是会被传送给 record 读者。</p><h2 id="3-系统交互"><a href="#3-系统交互" class="headerlink" title="3. 系统交互"></a>3. 系统交互</h2><p>Google 设计 GFS 系统交互要最小化在所有的操作中对 master 的涉及（因为 master 只有一个，必须减轻 master 的压力）。在这个背景下，我们现在来说客户端、master 和 chunkserver 如何互动以实现数据修改、原子记录追加(append)，以及快照(snapshot)。</p><h3 id="3-1-租约和修改顺序"><a href="#3-1-租约和修改顺序" class="headerlink" title="3.1. 租约和修改顺序"></a>3.1. 租约和修改顺序</h3><p>像 write 或 append 的修改操作是会改变 chunk 的内容或者元数据的。每次修改都会应用在 chunk 的所有副本上。我们使用租约来维护一个在副本之间一致的修改顺序。master 授予一个 chunk 租约给副本之一，我们称这个副本为 <em>primary</em>。Primary 为所有修改挑选一个顺序给 chunk。当应用修改时，所有的副本都遵循这个顺序。因此，全局修改顺序先由 master 选择的租约授予顺序定义，在租约内由 priamry 指定的序列号定义。</p><p>租约机制是设计用来最小化 master 的管理开销的。一个租约有一个初始的 60s 的超时时间。然而，只要 chunk 被修改，primary 就可以向 master 请求延时，并且通常会收到延时的许可，并且这不限制次数。这些扩展请求与授权是附带在 master 和所有 chunkservers 之间交换的常规的心跳(<em>HeartBeat</em>)信息中的。master 有时可能会尝试在一个租约到期前将其撤销（例如，master 想要禁用一个正在重命名的文件上的修改）。即便 master 与一个 primary 失去了联系，master 也可以在旧的租约到期后安全地向另一个副本授予租约。</p><p>在图 2 中，我们通过列出 write 控制流描述了这个过程，并且用数字标记了步骤顺序。</p><p><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/GFS_Figure_2.png" alt="图 2: 写控制和数据流"></p><p>图 2: 写控制和数据流</p><ol><li>客户端向 master 询问，哪个 chunkserver 持有要访问的 chunk 当前的租约，以及其他副本的位置。如果目前没有任何一个 chunkserver 持有要访问的 chunk 的租约，master 就会选择一个副本，授予一个租约（没有在图上显示出）。</li><li>master 向客户端回复 primary 的标识和其他副本（图中 <em>secondary</em> 标记，所有除了 primary 的副本都是 secondary）的位置。客户端缓存这个数据，用于将来的修改操作。只有当 primary 变得不可达，或副本不再持有租约时，客户端才需要再次联系 master。</li><li>客户端把数据 push 给所有的副本，客户端可以以任意的顺序 push。每个 chunkserver 将会在一个内部的 LRU buffer 缓存这些数据，直到这些数据被使用或老化。通过将数据流与控制流解耦，我们可以通过基于网络拓扑调度昂贵的数据流来提高性能，而不管哪个 chunkserver 是 primary 的。我们会在 3.2 进一步讨论这一点。</li><li>一旦所有的副本都确认收到了数据，客户端就向 primary 发送一个 write 请求。这个请求标识了早前 push 给所有副本的数据。primary 给其收到的所有修改指定连续的序列号，由于这些修改可能来自多个客户端，所有进行编号是有必要的。primary 按着序号的顺序将修改应用到自己的本地状态。</li><li>primary 把 write 请求传递给所有的 secondary 副本，每个 secondary 副本以由 primary 指定的同样的序列号顺序应用修改。</li><li>所有完成了操作的 secondary 向 primary 回复，表明他们已经完成了操作。</li><li>primary 回复客户端，在任何副本上遇到的任何错误都会报告给客户端。在有错误的情况中，write 可能已经在 primary 和部分 secondary 中成功完成了，（如果操作是在 primary 这里失败了，那么其就不会被指定序列号并向 secondary 传递命令。个人理解：因为是 primary 先成功完成修改后，才会让 secondary 开始应用修改，如果 primary 失败了，secondary 就不会收到序列号以及应用更改的命令。）此时客户端会认为请求已经失败，已经修改完的区域就会处于 <em>inconsistent</em> 的状态。我们的客户端代码通过重试失败的修改来处理这种错误，即将在步骤 3 到 7 进行几次尝试，如果仍然没有成功，就会退回到 write 开始时（从步骤 1 开始）进行重试，直到操作完全成功（有一种最坏的情况是重试的时候客户端挂了，这种情况的数据可能最后就是不一致的了，GFS 毕竟是弱一致性的 ）。（Q：这里有个疑问是，已经完成操作或部分完成操作的副本，接收到重试的数据后，如何处理？A：直接在文件末尾（最后一个 chunk 末尾）继续写入，之前成功的 secondary 会重复写入，去重任务由读取数据的客户端来完成。）</li></ol><p>如果应用程序的 write 很大或者跨过了一个 chunk 的边界，GFS 客户端代码就会把其拆成多个 write 操作。这些新的 write 操作也都遵循上述控制流（图 2），但可能会与来自其他客户端的并发操作交错并被覆盖。因此，共享文件区域最终可能包含来自不同客户端的片段，尽管副本将是相同的，因为单个操作在所有的副本上以相同的顺序成功完成。这就会出现我们在 2.7 中提到过的 <em>consistent</em> 但 <em>undefined</em> 的状态。</p><h3 id="3-2-数据流"><a href="#3-2-数据流" class="headerlink" title="3.2. 数据流"></a>3.2. 数据流</h3><p>我们解耦了控制流和数据流以高效的使用网络。当控制流从客户端到 primary 再到所有的 secondary 时，数据是以流水线的方式沿着精心挑选的 chunkservers 链路线性 push 的。我们的目标是充分利用每个机器的网络带宽，避免网络瓶颈和高延迟链路，同时最小化 push 全部数据的延迟。</p><p>为了充分利用每台机器的带宽，数据是线性地沿着一个 chunkserver 链路 push 的，而不是分布式地 push （例如，树）。因此，每台机器全部的向外的带宽都被用来尽可能快的传输数据，而不是像分布式那样把数据在多个接受者之间分配。</p><p>为了尽可能的避免网络瓶颈和高延迟链路（例如，交换机见链路通常两者都有），每个机器向网络拓扑中“最近的”还没有收到数据的机器传递数据。假设客户端正在 push 数据，要将数据 push 至 chunkserver S1 到 S4。客户端先把数据发送到最近的 chunkserver，这里记为 S1。S1 将数据传递给 S2 到 S4 中离它最近的，这里记为 S2。类似的，S2 再把数据传递给 S3 或 S4，选择离它更近的，等等以此类推。我们的网络拓扑足够简单，因为“距离”可以通过 IP 地址来准确的估算（GFS 没有考虑异地备份这种，GFS 一般是部署在单个机架或者数据中心的。结合现实，同一个数据中心的 IP 地址分配一般是有规律的，所以通过 IP 就能知道大概位置，也就知道了距离）。</p><p>最终，我们通过 TCP 连接流水线式的传输数据最小化了延迟。一旦一个 chunkserver 收到了一些数据，它就会立即向其他 chunkserver 传递传递这些数据。对我们来说，流水线式传输数据是非常有用的，因为我们使用的是全双工链路的交换网络。立即发送数据不会减小接收速率。不考虑网络拥堵的话，把 � 字节数据发送到 � 个副本的理想的时间消耗是 �&#x2F;�+��，� 是网络吞吐量，� 是在两个机器上传输字节的延迟。我们的网络链路通常是 100 Mbps (�)，� 远远小于 1ms。因此，理想情况下，把 1 MB 散布出去需要大约 80ms。</p><h3 id="3-3-原子记录追加-append"><a href="#3-3-原子记录追加-append" class="headerlink" title="3.3. 原子记录追加(append)"></a>3.3. 原子记录追加(append)</h3><p>GFS 提供了一个原子的 append 操作，称为 <em>record append</em>。在传统的 write 操作中，客户端指定写入数据的偏移位置。对同一个区域的并发写不可以串行化，因为这个区域最终可能包含来自多个客户端的数据片段。而在 record apppend 中，客户端仅给出数据，由 GFS 选择偏移并把偏移返回给客户端，GFS 将在这个偏移处原子地 append 数据至少一次（即一个连续的字节序列）。这与在 Unix 中写入一个以 <code>O_APPEND</code> 模式打开的文件类似，多个写者并发写入的时候不会有冲突条件。</p><p>Record append 在我们的一些分布式应用程序（会有在不同的机器上的客户端并发 append 同一个文件的场景的分布式应用程序）中被重度使用。在这种情况下，如果客户端采用传统的 write，那么就额外需要复杂且昂贵的同步，例如通过一个分布式锁管理器。在我们的工作负载中，像这样的文件通常用作多生产者&#x2F;单消费者队列，或包含来自很多不同的客户端的合并后的结果。</p><p>Record append 是修改操作的一种，也适合我们 3.1 中说到的控制流，只是在 primary 中有一点额外的逻辑。客户端将数据 push 给文件的最后一个 chunk 的所有副本，然后给 primary 发送请求。primary 检查如果将这个 record 记录 append 到当前的 chunk 是否会导致 chunk 的大小超过最大值（64 MB）。如果会超过，primary 就会将当前 chunk 填充至最大大小，并告诉所有 secondary 也这么做，然后回复客户端，说明这个操作将在下一个 chunk 上重试。（Record append 单次 append 的数据大小被限制为至多为 chunk 最大大小的 1&#x2F;4，以将最坏情况下的碎片保持在可接受的水平。）如果在当前 chunk 上 append 这个 record 不会使得这个 chunk 的大小超过最大值（这是通常的情况），那么 primary 就会把这个记录 append 到其本地自己的副本，然后告诉 secondary 在精确的偏移处写入这些数据，最后将成功的通知回复给客户端。</p><p>如果一个 record append 在某个副本上失败了，客户端会重试操作。结果就是，同一个 chunk 的副本可能包含不同的数据，同一个 record，有的 chunk 中有完整的，有的只有一部分。GFS 不保证所有副本都完全一样（每个字节都一样），只会保证数据作为一个原子单位被写入至少一次。这个属性很容易从简单的观察中得出，即操作报告成功必须是数据在一些 chunk 的所有副本的同样的偏移处写入完成。进一步说，在操作报告成功后，所有的副本至少与 record 末尾一样长，因此未来的 record 将会被指定一个更高的偏移或一个不同的 chunk，即便后面会有一个不同的副本成为 primary。就我们的一致性保证而言，成功的 record append 操作写入数据的区域是 <em>defined</em>（因此也是 <em>consistent</em>），而没有完全成功写入的区域是 <em>inconsistent</em> 的（因此也是 <em>undefined</em> 的）。 我们在第 2.7.2 中讨论过，我们的应用程序可以处理 <em>inconsistent</em> 的区域。</p><h3 id="3-4-快照-snapshot"><a href="#3-4-快照-snapshot" class="headerlink" title="3.4. 快照(snapshot)"></a>3.4. 快照(snapshot)</h3><p>快照操作几乎瞬间就可以制作一个文件或一个目录树（即，源）的拷贝，同时最大可能的减少中断正在进行中的修改。我们的用户使用快照来快速创建一个大数据集（经常是副本的副本（这段没读懂），递归）的分支副本，或者在试验修改前创建一个当前状态的检查点，稍后的提交或者回滚可以轻松些。</p><p>我们使用标准的**写时复制(copy-on-write) **技术来实现快照。当 master 收到一个快照请求时，先撤销要做快照的文件中的 chunks 的所有未到期的租约。这保证了任何后来的对于这些 chunks 的 write 操作需要和 master 互动以寻找一个租约持有者（找不到就没法写），这会让 master 有机会先去创建这个 chunk 的一个新的副本。</p><p>在租约被撤回或者到期以后，master 将操作记录在磁盘上。master 随后通过复制源文件或目录树的元数据将此日志记录应用于其内存状态。最新创建的快照文件指向与源文件相同的 chunk。（这段没读懂）</p><p>在快照操作后，一个客户端第一次想要 write 一个 chunk <code>C</code>，要给 master 发送一个请求，为了得到当前的租约持有者。master 注意到 chunk <code>C</code> 的引用数大于 1（写时复制方法创建快照时是给这个 chunk 加一个引用计数，没有立刻真的拷贝。一个 chunk 的引用计数大于 1 的话就代表这个 chunk 是某个快照的一部分，要保留原样数据的。当这个 chunk 上有新的写入的时候，这个 chunk 才会真的被复制，客户端在新复制的 chunk 上写入，而原来的旧 chunk 被快照继续引用），于是推迟回复客户端请求并选择一个新的 chunk 句柄 <code>C&#39;</code>。然后 master 让每个有 <code>C</code> 当前副本的 chunkserver 创建一个名为 <code>C&#39;</code> 的新 chunk。通过在和原来相同的 chunkserver 上创建这个新的 chunk，我们可以确保数据可以在本地复制，而不经过网络（我们的磁盘速度大约是我们 100 Mb 以太网链路的三倍快）。从这一点看，对于任何 chunk 来说，请求操作一模一样：master 授予一个新的租约给新的 chunk <code>C&#39;</code>，回复客户端，客户端可以正常 write 这个 chunk，而不知道这个 chunk 其实是刚刚从已存在的 chunk 新创建的。</p><h2 id="4-master-操作"><a href="#4-master-操作" class="headerlink" title="4. master 操作"></a>4. master 操作</h2><p>所有的命名空间操作都由 master 执行。</p><p>此外，master 对 chunk 副本的管理贯穿整个 GFS 系统：</p><ol><li>master 决定在哪放置 chunks 副本；</li><li>创建新的 chunks 和之后的副本；</li><li>协调各种各样的系统范围内的活动以保持 chunks 完全拷贝；</li><li>在所有的 chunkservers 上做复杂均衡；</li><li>回收未使用的存储空间。</li></ol><p>下面我们深入讨论下上述的几点。</p><h3 id="4-1-命名空间管理和锁"><a href="#4-1-命名空间管理和锁" class="headerlink" title="4.1. 命名空间管理和锁"></a>4.1. 命名空间管理和锁</h3><p>很多 master 的操作会花很长的时间。例如，一个快照操作必须撤回快照覆盖的所有 chunks 在 chunkserver 上的租约。在执行快照操作期间，我们不想推迟其他 master 的操作。因此，我们允许同时进行多个操作，并在命名空间的区域上使用锁来确保正确的操作执行顺序。</p><p>与很多传统的文件系统不同，GFS 没有按目录列出该目录中所有文件的数据结构，也不支持等价一个相同文件或目录的别名（即 Unix 术语中的硬链接或符号链接）。GFS 在逻辑上将其命名空间表示为将完整路径名映射到元数据的查找表。通过前缀压缩，这个表可以在内存中高效地表示。命名空间树中的每个结点（即绝对文件名或绝对路径名）都有一个与之相关联的读写锁。</p><p>每个 master 操作在执行前都要获取多个锁。一般来说，如果操作涉及 <code>/d1/d2/.../dn/leaf</code>，则该操作要请求目录名 <code>/d1</code>, <code>/d1/d2</code>, …, <code>/d1/d2/.../dn</code> 上的读锁，以及完整路径名 <code>/d1/d2/.../dn/leaf</code> 的读锁或者写锁。注意 <code>leaf</code> 可能是一个文件，也可能是一个目录，具体取决于操作。</p><p>现在我们通过一个例子来讲解锁机制是如何工作的。在这个例子中，我们要给目录 <code>/home/user</code> 创建快照，快照将存到 <code>/save/user</code>，我们来说在这个过程中，锁机制是如何阻止 <code>/home/user/foo</code> 被创建的。快照操作要获取 <code>/home</code> 和 <code>/save</code> 上的读锁，以及 <code>/home/user</code> 和 <code>/save/user</code> 上的写锁（Q：这里为什么需要 <code>/home/user</code> 上的写锁？A：我的理解是为了和后面创建文件操作需要的读锁互斥。）。文件创建操作要获取 <code>/home</code> 和 <code>/home/user</code> 上的读锁，以及一个 <code>/home/user/foo</code> 上的写锁。这两个操作将会被按正确的顺序执行，因为他们尝试获取 <code>/home/user</code> 上冲突的锁（快照操作要的写锁与文件创建操作要的读锁）。文件创建操作不需要父目录（这里即 <code>/home</code> 和 <code>/home/user</code>）上的写锁，因为没有“目录”或类似 <em>inode</em> 那样的数据结构需要在修改操作中受保护，而命名空间上的读锁可以有效地确保父目录不会被删除（这里即为 <code>/home</code> 和 <code>/home/user</code> 上的读锁可以保护他们不被删除）。</p><p>上述锁策略的一个好处是，允许在同一个目录内的并发修改。举个例子，在同一个目录中可以并发的创建多个文件：每个创建文件操作获取一个目录名字上的读锁和一个文件名字上的写锁。目录名字上的读锁足以阻止目录被删除、重命名或被创建快照（前面说过创建快照需要获取写锁）。文件名字上的写锁会连续两次尝试创建同名的文件（这句话黑人问号脸！）。</p><p>由于命名空间可能会包含很多结点，所以读写锁对象是延迟分配的，并且一旦不用了就会被删除。另外，多个锁要以一个一致的总体顺序被获取，以防死锁：这些锁会先被按照命名空间树的级别排序，同级别之间则按照字典序。</p><h3 id="4-2-副本放置"><a href="#4-2-副本放置" class="headerlink" title="4.2. 副本放置"></a>4.2. 副本放置</h3><p>一个 GFS 集群高度分布在多个级别上。GFS 集群往往在很多个机器机架上含有数百个 chunkservers 。这些 chunkservers 可能轮流被来自相同或不同机架上的数百个客户端连接。在不同机架上的两个机器间通信可能经过一个或多个网络交换机。此外，出入一个机架的带宽可能小于这个机架中所有机器的总带宽。多级分布提出了一个特别的挑战，即在保证可伸缩性、可靠性和可用性的前提下，分发数据。</p><p>chunk 副本的放置策略服务于两个目的：(1) 最大化数据的可靠性和可用性，(2) 最大化网络带宽利用率。为了实现这两个目的，仅仅跨机器传播副本是不够的，因为这只是能抵御磁盘或机器故障，以及能充分利用每个机器的网络带宽。我们必须也跨机架传播 chunk 副本，这可以确保即便整个机架都损坏了或者离线了（例如，由于共享资源故障，如网络开关或电源电路）。这也意味着，关于一个 chunk 的流量，尤其是读，可以充分利用多个机架的总带宽。但另一方面，写流量必须流经多个机架，这是一个我们乐意看到的权衡。</p><h3 id="4-3-创建-Creation-、重新复制-Re-replication-、重新平衡-Rebalancing"><a href="#4-3-创建-Creation-、重新复制-Re-replication-、重新平衡-Rebalancing" class="headerlink" title="4.3. 创建(Creation)、重新复制(Re-replication)、重新平衡(Rebalancing)"></a>4.3. 创建(Creation)、重新复制(Re-replication)、重新平衡(Rebalancing)</h3><p>chunk 副本将在下面三种情况下创建：chunk 创建、重新赋值、重新平衡。</p><p>master 在<strong>创建(*create*)*<em>一个 chunk 时会选择一个位置来放置初始的空的副本。这考虑到了几个因素，*</em>(1)** 我们想把新的副本放在磁盘空间利用率低于平均值的 chunkservers 上。随着时间推移，这个方法会使得各个 chunkservers 上的磁盘利用率相等。</strong>(2)** 我们想限制在每个 chunkserver 上“最近”创建的数量。尽管创建操作本身开销很低，但创建操作会可靠的预测即将到来的大量的写流量，因为 chunk 是在写操作有要求时创建（这里就是说，在一个 chunkserver 上创建一个新的 chunk，创建操作本身开销不大，但是接下来往往会有写操作，如果“最近”创建的 chunk 太多，那么意味着后面会有太多的写流量，这会加重这个 chunkserer 的压力）。在我们的 append 一次读多次(append-once-read-many) 的工作负载中，当 chunk 被完全写入完成以后，通常会变成实际上的只读。**(3)** 像上面讨论的那样，我们想在跨机架传播一个 chunk 的副本。</p><p>当副本的有效数量低于用户指定的值时，master <strong>重新复制(*re-replicates*)*<em>一个 chunk。可能导致重新复制操作发生的原因多种多样：*</em>(1)** 一个 chunkserver 变得不可用，则会给 master 报告它上面的副本可能损坏；</strong>(2)** chunkserver 上的磁盘之一由于错误变得不可用；**(3)** 或者用户指定的副本数量增加了。</p><p>基于下面几个因素需要被重新复制的 chunk 会被优先处理：**(1)** 当前副本数量与目标副本数量相差太多。例如，相比丢失了一个副本的 chunk，我们会更优先处理丢失了两个副本的 chunk 的重新复制操作。**(2)** 我们倾向先处理存在的文件的 chunk 的重新复制操作，而不是最近删除的文件（详见 4.4）。**(3)** 最后，为了最小化故障对正在运行的应用程序带来的影响，我们提高任何使得客户端进程阻塞的 chunk 的优先级。</p><p>master 选择优先级最高的 chunk，通过指示一些 chunkservers 直接从一个现存的有效副本拷贝 chunk 数据来“克隆”这个 chunk。新副本的放置策略的目标和新建 chunk 的放置类似：均衡磁盘空间利用率，限制任一单个 chunkserver 上的活跃的克隆操作数，以及跨机架传播副本。为了防止克隆流量大于客户端流量太多，master 同时在整个集群上和每个 chunkserver 上限制活跃克隆操作的数量。此外，每个 chunkserver 通过减少其向源 chunkserver 的读请求来限制其花在每个克隆操作上的带宽总量。</p><p>最后，master 定期<strong>重新平衡(*rebalances*)</strong> 副本：master 检查当前副本的分布，然后移动一些副本，为了更好的利用磁盘空间，以及更好的负载均衡。通过这个过程，master 也可以逐渐填满一个新的 chunkserver，而不是立即用新的 chunks 和随之而来的大量写流量将其淹没。新副本的放置标准也和上面讨论过的类似。此外，master 也必须选择要移除哪个现存的副本。一般来说，master 倾向于移除那些空闲空间低于平均值的 chunkservers 上的 chunk，以平衡各个 chunkserver 磁盘空间的使用。</p><h3 id="4-4-垃圾回收"><a href="#4-4-垃圾回收" class="headerlink" title="4.4. 垃圾回收"></a>4.4. 垃圾回收</h3><p>在一个文件被删除后，GFS 不会立即回收其有效的物理存储空间。master 只会在文件级别和 chunk 级别的垃圾回收期间，延迟回收物理存储。我们发现这个方法使得 GFS 系统更简单，更可靠。</p><h4 id="4-4-1-机制"><a href="#4-4-1-机制" class="headerlink" title="4.4.1. 机制"></a>4.4.1. 机制</h4><p>当一个文件被应用程序删除，master 和对其他的修改一样，立即记录删除日志。然而，这个文件只是被重命名为一个包含了删除时间戳的隐藏的名字，而不是立即回收了其资源。在 master 对文件系统命名空间的的定期扫描过程中，master 移除任何这样的，已经存在超过 3 天（内部可配置的）的隐藏文件。在这之前，被删除的文件仍然可以通过新的、特殊的名字（即被重命名后的带有删除时间戳的名字）被读取，也可以通过把名字改回正常名字取消删除。当隐藏文件被从命名空间中删除时，其内存中的元数据也会被删除。这有效地切断了它与所有 chunk 的链接。</p><p>类似的，在 master 对 chunk 命名空间的定期扫描中，master 识别孤儿 chunks（即不能从任何文件到达这个 chunk），并删除这些孤儿 chunks 的元数据。在与 master 的定期交换的心跳(<em>HeartBeat</em>)消息中，每个 chunkserver 报告其持有的 chunks 的一个子集，master 向 chunkserver 回复已经不在 master 存储的元数据中的所有 chunks 的身份信息，然后 chunkserver 就可以自由删除这些 chunks 的副本了。</p><h4 id="4-4-2-讨论"><a href="#4-4-2-讨论" class="headerlink" title="4.4.2. 讨论"></a>4.4.2. 讨论</h4><p>尽管分布式垃圾回收是一个难题，需要在编程语言的上下文中解决复杂的问题，但对于我们的 GFS 来说相当简单。我们可以轻松识别 chunks 的所有引用：master 维护着专门的文件到 chunk 的映射。我们也可以轻松识别所有的 chunk 副本：所有的副本都在每个 chunkserver 下一个指定的目录中。另外，任何 master 不知道的副本都被视为“垃圾(garbage)”。</p><p>这种存储回收利用的垃圾回收方法，相比即时删除有几个优势。<strong>首先</strong>，在组件故障很常见的大规模的分布式系统中更简单更可靠。chunk 的创建可能在一些 chunkservers 上成功了，而在另一些 chunkserves 上失败了，留下了一些 master 不知道存在的副本（这里我的理解是，若有部分 chunkserver 上的 chunk 创建失败了，就会重做所有的操作，那么成功创建了 chunk 的 chunkserver，其上的 chunk 就不被 master 认可，即 master 不知道的存在的副本）。副本删除信息可能丢失，master 必须记得在失败时重新发送这些信息，不论这个失败是由 master 自己还是由 chunkservers 导致的。垃圾回收提供了一个统一的、可靠的方法来清理任何未知有用的副本。<strong>第二</strong>，这种垃圾回收方法会将存储回收操作合并到 master 常规的后台活动中，就像定期扫描命名空间和与 chunkservers 定期握手一样。因此，存储回收操作是分批完成的，其开销分摊到了各个 master 常规的后台活动中。此外，存储回收操作只在 master 相对空闲的时候执行，这样 master 可以更迅速地响应需要及时关注的客户请求。<strong>第三</strong>，存储空间的延迟回收提供了一个防止意外的、不可逆的删除的安全网（这里我的理解是，意外删除的文件，在其被真正回收之前，是可以撤销删除的）。</p><p>根据我们的经验，这种垃圾回收方法最主要的缺点是，当存储空间紧张时，延迟垃圾回收有时会阻碍用户努力微调空间的使用。重复创建和删除临时文件的应用程序可能无法立即重用存储空间。如果已删除的文件再次被明确删除，我们会通过加快存储回收来解决这些问题。我们也允许用户在命名空间的不同部分应用不同的复制和回收策略。例如，用户可以指定一些目录树中的文件中的所有 chunks 存储时不复制，任何删除的文件都会立刻且不可撤销地被从文件系统状态中移除。</p><h3 id="4-5-过期副本检测"><a href="#4-5-过期副本检测" class="headerlink" title="4.5. 过期副本检测"></a>4.5. 过期副本检测</h3><p>如果 chunkserver 对一个 chunk 的修改失败，或在其挂掉的时候错过了一些修改，就可能导致 chunk 副本过期。对于每个 chunk，master 维护一个 chunk 版本号( <em>chunk version number</em>)，以区别最新的和过期的副本（这个版本号也会记录在日志中，是非易失的）。我们永远不会在过期的副本上应用更改，过期的副本只能等待回收。</p><p>每当 master 给一个 chunk 授予一个新的租约<strong>（注意，是每授予租约时增加版本号，不是每次修改时！）</strong>，master 都会增加这个 chunk 的版本号并且通知这个 chunk 的最新的那些副本。master 和这些副本都会在他们的持久化的状态中记录这个新的版本号。这个过程发生在任何客户端被通知之前，因此也发生在开始向 chunk 写入之前。如果某个副本当前不可用，那它的版本号就不会增加。当 chunkserver 重启并向 master 报告其包含的 chunks 集合，以及这些 chunks 相关联的版本号时，master 就会检测到这个 chunkserver 有一个过期的副本。如果 master 看到一个版本号大于它自己的记录中的版本号，那么 master 就认为自己在授予租赁权时故障了，因此将更高的版本作为最新的版本。</p><p>master 在其定期的垃圾回收中移除过期的副本。在这之前，当 master 回复客户端对 chunk 信息的请求时，master 实际上会认为根本不存在一个过期的副本（也就是说，给客户端返回的 chunk 列表中可能包含过期的 chunk，客户端有可能去读过期的 chunk。GFS 是弱一致性的）。作为另一个保障措施，当 master 告知客户端哪个 chunkserver 持有一个 chunk 上的租约，或当 master 在一个克隆操作中指示一个 chunkserver 去从另一个 chunkserver 中读一个 chunk 时，master 包含这个 chunk 的最新版本号，客户端或 chunkserver 执行操作时会验证 chunk 的版本号，以便始终访问最新的数据。</p><h2 id="5-容错和诊断"><a href="#5-容错和诊断" class="headerlink" title="5. 容错和诊断"></a>5. 容错和诊断</h2><p>在设计 GFS 系统时，我们最大的挑战之一是，如何解决频繁的组件故障。组件的质量和数量一起使得这些问题成为常态而不是意外。我们不能完全相信机器，也不能完全相信这些磁盘。组件故障可能会导致系统不可用，更糟糕的是导致数据损坏。这一节我们讨论我们如何面对这些挑战，还有我们在 GFS 系统中构建的一些工具，这些工具用来在故障不可避免的发生时诊断问题。</p><h3 id="5-1-高可用性"><a href="#5-1-高可用性" class="headerlink" title="5.1. 高可用性"></a>5.1. 高可用性</h3><p>在 GFS 集群中的数百个服务器中，某些服务器在任何给定的时间都必然不可用。</p><p>我们通过两个简单的但有效的策略来保持系统的高可用性：快速恢复和复制。</p><h4 id="5-1-1-快速恢复"><a href="#5-1-1-快速恢复" class="headerlink" title="5.1.1. 快速恢复"></a>5.1.1. 快速恢复</h4><p>master 和 chunkserver 都被设计为，无论他们是如何终止的，都会在几秒恢复他们的状态并启动。事实上，我们不去区分正常或不正常的终止；服务器只会通过杀死其进程来例行关机。当客户端和其他服务器在他们未完成请求中超时，重新连接重启的服务器并重试操作时会遇到一个小问题。6.2.2 节中会讲到观察到的启动时间。</p><h4 id="5-1-2-chunk-复制"><a href="#5-1-2-chunk-复制" class="headerlink" title="5.1.2. chunk 复制"></a>5.1.2. chunk 复制</h4><p>像之前讨论过的那样，每个 chunk 在不同的机架上的多个 chunkservers 上复制。用户可以为文件命名空间的不同部分指定不同的复制级别，默认为 3 个复制。master 会根据需要克隆现存的副本，以在 chunkservers 离线或通过校验和验证（详见 5.2）检测到损坏的副本时，保持 chunk 有足够数量的副本。尽管对我们来说，复制机制工作的很好，我们依然正在探索其他形式的跨服务器冗余，例如奇偶校验码或纠删码，以满足我们不断增长的只读存储需求。我们预计在我们耦合很宽松的系统中实现这些更复杂的冗余策略是有挑战的但容易管理的，因为我们的流量主要是追加(append)和读取(read)，而不是小的随机写入。</p><h4 id="5-1-3-Master-复制"><a href="#5-1-3-Master-复制" class="headerlink" title="5.1.3. Master 复制"></a>5.1.3. Master 复制</h4><p>为了可靠性，master 状态将会被复制。master 的操作日志和检查点被复制到多个机器上。只有在其日志记录被 flush 到本地磁盘和所有 master 副本上之后，状态的修改才被视为已提交。为简单起见，一个 master 进程仍然负责所有修改以及后台活动，例如在内部更改系统的垃圾回收。master 进程在挂掉后可以几乎瞬间重启。如果是 master 进程所在的机器或者磁盘坏了，在 GFS 外部的监控设施会利用 master 操作日志的副本在别处启动一个新的 master 进程。客户端只通过 master 的规范名（如 gfs-test）与其通信，规范名是一个 DNS 别名，如果 master 被重新放到其他机器上，这个别名可以修改。</p><p>此外，“影子” masters （论文原文即为 masters，复数，所以这里应该是说“影子”可能有多个）提供了对文件系统的只读连接，即便主 master 挂掉了，“影子” masters 依然可以正常工作。注意这里说的是“影子”而不是“镜像”，也就是说“影子” masters 可能落后主 master 一点，通常是几分之一秒。“影子” master 增强了没有正在被活跃修改的文件和不在意获取有一点旧的结果的应用程序的读可用性。事实上，由于文件内容是从 chunkservers 读的，所以应用程序不会注意到文件内容是旧的。在短窗口内可能旧的是像目录内容或连接控制信息这样的文件元数据。</p><p>“影子” masters 为了保持其能知道情况，一个“影子” master 读取逐渐增长的操作日志的副本，并在其自己的数据结构中严格应用和主 master 一样的修改序列。“影子” master 和主 master 一样，在启动时（此后就很少了）轮询 chunkservers 来定位 chunk 副本，并且频繁和 chunkservers 交换握手信息以监控他们的状态。“影子” masters 依赖主 master 的只有副本位置更新结果，根据主 master 的决策来创建和删除副本。</p><p>（关于这节的“影子” master，有几个问题。(1) 影子 masters 和主 master 同时存在，都轮询 chunkservers，也就是说 chunkservers 同时要和多个 master 握手、保持联系吗？(2) 最后一段仅说了从主 master 获取创建或删除副本的信息，那修改的文件信息如何更新？）</p><h3 id="5-2-数据完整性"><a href="#5-2-数据完整性" class="headerlink" title="5.2. 数据完整性"></a>5.2. 数据完整性</h3><p>每个 chunkserver 都用校验和来检测其存储的数据的损坏。考虑到一个 GFS 集群经常在数百机器上有数千磁盘，其经常会经历磁盘故障，导致读和写路径上的数据损坏或丢失。（原因之一见第 7 节）我们可以用其他的 chunk 副本恢复损坏的数据，但通过跨 chunkservers 比较副本来检测损坏是不切实际的。此外，不同的副本（同一个 chunk 的）可能是合法的：GFS 修改的语义，特别是之前讨论过的原子 record append，不能保证副本都一样。因此，每个 chunkserver 必须通过维护校验和来独立验证其自己的拷贝的完整性。（这里，副本之间可以不同是什么鬼，回头再看看。）</p><p>一个 chunk 被分成 64 KB 的块，每个块有一个相应的 32 比特的校验和。像其他元数据一样，校验和也会保存在内存中，并且通过日志持久化的存储，与用户数据分开。</p><p>对于读，在返回任何数据给请求者（无论是客户端还是另一个 chunkserver）之前，chunkserver 会验证与读取范围重叠的数据块的检验和。因此 chunkservers 不会把损坏的数据传播到其他机器上。如果一个块没有匹配记录的检验和，chunkserver 就会返回一个错误给请求者，并且将不匹配的情况报告给 master。作为回应，请求者将会从其他副本读取数据，而 master 将从另一个副本克隆 chunk。在一个有效的新的副本放置好后，master 指示报告了不匹配的 chunkserver 删除其副本。</p><p>由于以下几个原因，校验和对读性能几乎没有影响。由于我们大部分的读至少会跨越几个块，因此我们只需要读取和校验相对少量的额外数据以进行验证。GFS 客户端代码通过尝试在校验和块边界对齐读取来进一步减少这种开销。此外，chunkserver 上的校验和查找和比较不需要任何 I&#x2F;O 就可以完成，并且检验和计算通常会与 I&#x2F;Os 重叠。（这一段都没读懂。(1) 为什么读取的数据跨越几个快就可以只读、验证少量的额外数据？(2) 什么是对齐读？(3) 校验和查找和比较为什么不需要 I&#x2F;O，是校验和记录存在内存中吗？校验和计算和 I&#x2F;Os 重叠是什么意思？）</p><p>检验和计算为 append 到 chunk 末尾的写（而不是覆盖已存在数据的写）做了大量优化，因为在我们的工作负载中主要都是 append。我们只是逐渐更新最后部分的校验和块，并为由 append 填充的任何全新的校验和块计算新的校验和。即使最后部分的校验和块已经损坏，而且我们当前又无法检测出，也没什么关系，因为新的检验和将无法匹配已存储的数据，所以损坏通常会在这个块下次被读取时被检测出来。（检验和块存在哪？）</p><p>作为对比，如果一个 write 覆盖现有 chunk 的一个范围，我们必须读并验证被覆盖范围的第一个和最后一个块，然后执行这个 write，最终计算并记录新的校验和。如果我们在部分覆盖之前不验证第一个和最后一个块，新的校验和可能会隐藏存在于没有被覆盖区域中的损坏。（这里我的理解是，被覆盖的范围，中间部分的块校验和就没必要验证了，因为数据被全部覆盖了。而对于第一个和最后一个块，只有一半会被覆盖，所以先要验证一下，以保证没有呗覆盖的那部分数据是正确的。）</p><p>在空闲时期，chunkservers 可以扫描并验证不活跃 chunk 的内容，这使得我们可以检测出很少读的 chunk 中的损坏。一旦检测到损坏，master 就可以创建一个新的未损坏的副本并删除损坏的副本。这样可以防止一个不活跃但损坏的 chunk 副本骗过 master，使得 master 认为对应 chunk 还有用足够的有效副本。</p><h3 id="5-3-诊断工具"><a href="#5-3-诊断工具" class="headerlink" title="5.3. 诊断工具"></a>5.3. 诊断工具</h3><p>广泛而详细的诊断日志记录在问题隔离、调试和性能分析方面提供了不可估量的帮助，同时只产生了最小的成本。如果没有日志，我们很难理解机器之间短暂、不可复现的交互。GFS 服务生成诊断日志来记录很多重大事件（例如 chunkservers 的加入或 down 机）以及全部的 RPC 请求和回复。这些诊断日志可以随意删除而不会影响整个系统的正确性，不过在空间允许的情况下，我们会尽可能保留这些日志。</p><p>RPC 日志包括在线上发送的确切请求和响应，不包括被读取或写入的文件数据。 通过将请求与应答进行匹配，并整理不同机器上的RPC记录，我们可以重构整个交互历史来诊断问题。日志还可以作为负载测试和性能分析的跟踪。</p><p>日志记录对性能的影响很小（而且其优点远远超过这个影响），因为这些日志是顺序和异步写入的。 大部分最近的事件也会保持在内存中，并且可用于持续的在线监控。</p><h2 id="6-性能测试"><a href="#6-性能测试" class="headerlink" title="6. 性能测试"></a>6. 性能测试</h2><p>在这一部分，我们展示了几个微型基准测试来说明 GFS 架构和实现中的固有瓶颈，以及在 Google 中应用的真实集群的一些数字。</p><h3 id="6-1-Micro-benchmarks"><a href="#6-1-Micro-benchmarks" class="headerlink" title="6.1. Micro-benchmarks"></a>6.1. Micro-benchmarks</h3><p>我们此微型基准测试的组成如下：</p><ul><li>1 个 master；</li><li>2 个 master 副本；</li><li>16 个 chunkservers；</li><li>16 个客户端。</li></ul><p>注意这个配置主要是为了方便测试，真实的集群往往包含数百 chunkservers 和 数百客户端。</p><p>所有的机器都配备 dual 1.4 Ghz PIII 处理器，2 GB 内存，两个 80 GB 5400 rpm 的磁盘，以及 100 Mbps 的全双工以太网连接到一个 HP 2542 交换机。全部的 19 个服务器机器都连接到一个交换机上，全部的 16 个客户端机器都连接到另一个交换机上，两个交换机之间通过 1 Gbps 链路连接。</p><p><img src="https://gukaifeng.cn/posts/gfs-lun-wen-yue-du-bi-ji/GFS_Figure_3.png" alt="图 3: 总吞吐量。上面的曲线（即 Network limit）表示由我们网络拓扑决定的理论极限。下面的曲线（即 Aggregate read rate）表示我们测量得到的吞吐量，这个曲线具有显示 95% 置信区间的误差线，由于测量值的方差较低，在某些情况下，这些区间难以辨认。"></p><p>图 3: 总吞吐量。上面的曲线（即 Network limit）表示由我们网络拓扑决定的理论极限。下面的曲线（即 Aggregate read rate）表示我们测量得到的吞吐量，这个曲线具有显示 95% 置信区间的误差线，由于测量值的方差较低，在某些情况下，这些区间难以辨认。</p><h4 id="6-1-1-读"><a href="#6-1-1-读" class="headerlink" title="6.1.1. 读"></a>6.1.1. 读</h4><p>N 个客户端同时从文件系统中读。每个客户端从一个 320 GB 的文件集中读取一个随机选择的 4 MB 区域，重复 256 次，所以每个客户端最终读取了 1 GB 的数据。这些 chunkservers 加起来只有 32 GB 的内存，所以我们预计 Linux 缓冲区缓存中的命中率最多为 10%。 我们的结果应该接近冷缓存结果。</p><p>图 3(a) 展示了 N 个客户端总的读速率以及该速率的理论上限。当两个交换机之间的 1Gbps 链路饱和时，总的读速率的极限峰值在 125 MB&#x2F;s，或者说当客户端的 100 Mbps 网络接口饱和时，每个客户端的读速率极限峰值是 12.5 MB&#x2F;s，以适用者为准。当只有一个客户端在读时，我们观察到的读速率是 10 MB&#x2F;s，即每个客户端 12.5 MB&#x2F;s 理论峰值的 80%。当 16 个客户端都在读时，总的读速率达到了 94 MB&#x2F;s，大约是理论峰值 125 MB&#x2F;s 的 75%。这个效率从 80% 降到 75% 是因为，随着读者的增加，多个读者同时从同一个 chunkserver 读取数据的可能性也增加了。</p><h4 id="6-1-2-写"><a href="#6-1-2-写" class="headerlink" title="6.1.2. 写"></a>6.1.2. 写</h4><p>N 个客户端同时写 N 个不同的文件。每个客户端通过一组 1 MB 的 write 往一个新文件中写入 1 GB 数据。图 3(b) 展示了总的写速率以及理论极限。总的写速度的峰值稳定在 67 MB&#x2F;s，因为我们需要把每个字节都写到 16 个 chunkservers 中的 3 个上，每个 chunkserver 有一个 12.5 MB&#x2F;s 的输入连接。</p><p>只有一个客户端写时，观察到的写速率是 6.3 MB&#x2F;s，大约是理论极限值的一半。导致这一问题的罪魁祸首是我们的网络堆栈，网络堆栈和我们用来给 chunk 副本推送数据的流水线方案交互得不是很好。从一个副本向另一个副本传播数据的延迟会降低总的写速率。</p><p>当 N &#x3D; 16 时，总的写速率到了 35 MB&#x2F;s（即每个客户端 2.2 MB&#x2F;s），大约是理论极值的一半。和读一样，导致这个结果最可能的原因是随着客户端数量的增加，会有多个客户端并发写入同一个 chunkserver。此外，16 个写者比 16 个读者更可能发生冲突，因为每个写者要涉及 3 个不同的副本（读者只读副本之一）。</p><p>写比我们想要的更慢，不过在实践中这不是主要问题，因为虽然这增加了单个客户端所看到的延迟，但对系统分给大量客户端的总的写带宽没什么大的影响。</p><h4 id="6-1-3-记录追加-Record-Appends"><a href="#6-1-3-记录追加-Record-Appends" class="headerlink" title="6.1.3. 记录追加(Record Appends)"></a>6.1.3. 记录追加(Record Appends)</h4><p>图 3(c) 展示了 record append 的性能。N 个客户端同时追加同一个文件。性能受限于存储该文件最后一个 chunk 的 chunkserver 的网络带宽，独立于客户端的数量。从一开始的一个客户端时 6.0 MB&#x2F;s 到 16 个客户端时的 4.8 MB&#x2F;s，这个下降主要是由于网络拥塞，以及不同客户端看到的网络传输速率差异。</p><p>我们的应用程序倾向于并发生成多个这样的文件。换句话说，N 个客户端同时 append 到 M 个共享文件，N 和 M 都是几十或者数百。因此，在实践中，我们实验中的 chunkserver 的网络拥塞不是大问题，因为客户端可以在写入一个文件时取得进展，而另一个文件的 chunkserver 则处于繁忙状态。</p><h3 id="6-2-现实世界集群"><a href="#6-2-现实世界集群" class="headerlink" title="6.2. 现实世界集群"></a>6.2. 现实世界集群</h3><p>现在，我们研究了 Google 内部使用的两个集群，它们代表了其他几个类似的集群。</p><p>集群 A 经常被一百多名工程师用于研发。典型的任务由人类用户启动，运行长达数小时。其读取从几 MBs 到几 TBs 的数据，传输或分析数据，以及将结果写回集群。</p><p>集群 B 主要用于生产数据处理。集群 B 中任务的持续时间要长得多，其持续地生成并处理数 TB 的数据集，期间仅有偶尔的人类干预。</p><p>在集群 A 和 B 中，一个单个的任务包含了在很多机器上的很多进程同时读和写很多的文件。</p><p><img src="https://gukaifeng.cn/posts/gfs-lun-wen-yue-du-bi-ji/GFS_Table_2.png" alt="表 2 : 两个 GFS 集群的特征"></p><p>表 2 : 两个 GFS 集群的特征</p><h4 id="6-2-1-存储"><a href="#6-2-1-存储" class="headerlink" title="6.2.1. 存储"></a>6.2.1. 存储</h4><p>从表 2 中的前 5 行中可以看到，两个集群都有上百个 chunkservers，都支持很多 TB 的磁盘空间，且这些磁盘空间中有相当多的，但没有全部写满磁盘的数据。”Used disk” 包含所有 chunk 副本。实际上所有文件都会被复制 3 次（3 个副本），因此，A 和 B 两个集群分别存储了 18 TB（55 &#x2F; 3 ≈ 18） 和 52 TB （155 &#x2F; 3 ≈ 52）的文件数据。</p><p>两个集群有相似的文件数量（A: 735 k, B: 737 k），尽管 B 中有很大比例的 dead files（即被删除、或被新版本替换的，但是其存储空间还没有被回收的文件）。集群 B 还具有更多 chunk，因为集群 B 的文件往往更大。这里没太理解是由于 dead files 多导致的 chunk 多，还是集群 B 的普通文件就更大。</p><h4 id="6-2-2-元数据"><a href="#6-2-2-元数据" class="headerlink" title="6.2.2. 元数据"></a>6.2.2. 元数据</h4><p>chunkservers 一共存储了数十 GB 的元数据，其中大部分是 64 KB 用户数据块的校验和。chunkservers 持有的其他元数据只有我们在 4.5 讨论过的 chunk 版本号。</p><p>保存在 master 上的元数据要小得多，只有几十 MB，或者每个文件平均大约 100 个字节。这与我们的假设一致，即 master 内存的大小在实践中不会限制我们 GFS 系统的容量，每个文件的大多数元数据是以前缀压缩形式存储的文件名。其他元数据包括文件所有权和权限、从文件到 chunks 的映射以及每个块的当前版本。此外，对于每个 chunk，我们存储其当前的副本位置和用于实现写时复制(copy-on-write)的引用计数。</p><p>每个单独的服务器，不论是 chunkserver 还是 master，都只有 50 ~ 100 MD 的元数据。因此恢复是很快的：服务器在能够回答询问时前只需要花几秒钟来读其存储的元数据。但是，master 在一段时间内（通常为 30 到 60 秒）会有些受阻，直到它从所有 chunkservers 获取完 chunk 定位信息（这里我的理解是 master 启动时要轮询 chunkserver）。</p><h4 id="6-2-3-读写速率"><a href="#6-2-3-读写速率" class="headerlink" title="6.2.3. 读写速率"></a>6.2.3. 读写速率</h4><p>表 3 展示了不同时期的读写速率。当我们进行这些测量时，A 和 B 两个集群都已经启动了大约一周。（集群最近已经重新启动(restart)以升级到新的 GFS 版本）</p><p>从重新启动开始，平均写速率小于 30 MB&#x2F;s。当我们进行这些测量时，集群 B 处于写入活动的突发过程中，生成了大约 100 MB&#x2F;s的数据，这产生了 300 MB&#x2F;s的网络负载，因为写入被传播到三个副本。</p><p>正如我们所假设的那样，读取速率远高于写入速率，总工作负载包含的读取次数多于写入次数。这两个集群都处于繁重的阅读活动中。特别是，A 在前一周一直保持 580 MB&#x2F;s 的读取率。A 的网络配置可以支持750 MB &#x2F; s，因此它有效地利用了资源。集群 B 可以支持 1300 MB&#x2F;s 的峰值读取速率，但其应用程序仅使用 380 MB&#x2F;s。</p><p><img src="https://gukaifeng.cn/posts/gfs-lun-wen-yue-du-bi-ji/GFS_Table_3.png" alt="表 3 : 两个 GFS 集群的性能指标"></p><p>表 3 : 两个 GFS 集群的性能指标</p><h4 id="6-2-4-master-负载"><a href="#6-2-4-master-负载" class="headerlink" title="6.2.4. master 负载"></a>6.2.4. master 负载</h4><p>表 3 还显示，发送到 master 的操作速率约为每秒 200 到 500 次操作。master 可以轻松跟上这个速度，因此这不是这些工作负载的瓶颈。</p><p>在早期版本的 GFS 中，master 偶尔会成为某些工作负载的瓶颈，它花费大部分时间按顺序扫描大型目录（包含数十万个文件）以查找特定文件。此后，我们更改了 master 数据结构，以允许通过命名空间进行高效的二进制搜索。master 现在可以轻松支持每秒数千次文件访问。如有必要，我们可以通过在命名空间数据结构前面放置名称查找缓存来进一步加快速度。</p><h4 id="6-2-5-恢复时间"><a href="#6-2-5-恢复时间" class="headerlink" title="6.2.5. 恢复时间"></a>6.2.5. 恢复时间</h4><p>当一个 chunkserver 故障后，一些 chunks 的副本数量会不足，必须再克隆这些副本以保持这些副本的复制级别。恢复所有这些受影响的 chunk 副本需要的时间依赖于资源的总量。</p><p>在一个实验中，我们杀死了集群 B 中的一个单个的 chunkserver，这个 chunkserver 有大约 15000 个 chunks，这些 chunks 共包含 600 GB 的数据。为了限制恢复操作对正在运行的应用程序的影响，并为调度决策提供余地（这里没搞清楚“余地”的主语和宾语），我们的默认参数限制这个集群最多同时进行 91 个克隆操作（chunkservers 数量的 40%，227 x 0.4 ≈ 91），并且每个克隆操作最多可以消耗 6.25 MB&#x2F;s（即 50 Mbps）的带宽。以有效拷贝速率 440 MB&#x2F;s 进行 23.2 分钟后，所有的 chunks 都恢复完成，</p><p>在另一个实验中，我们杀死了两个 chunkservers，每个有大概 16000 个 chunks 和 660 GB 的数据。这两个故障使得有 266 个 chunks 变得只剩一个副本。这 266 个 chunks 被以更高的优先级克隆，在 2 分钟内全部恢复到至少有 2 个副本，从而使集群处于可以容忍另一个 chunkserver 故障而不会丢失数据的状态。</p><h3 id="6-3-工作负载分解"><a href="#6-3-工作负载分解" class="headerlink" title="6.3. 工作负载分解"></a>6.3. 工作负载分解</h3><p>在这部分，我们会给出两个 GFS 集群的详细的工作负载分解，这两个 GFS 集群的工作负载和 6.2 中的相当，但不完全相同。</p><p>集群 X 用于研发，而集群 Y 用于生产数据处理。</p><h3 id="6-3-1-方法和注意事项"><a href="#6-3-1-方法和注意事项" class="headerlink" title="6.3.1. 方法和注意事项"></a>6.3.1. 方法和注意事项</h3><p>这些结果仅包括来自客户端的请求，因此它们反映了我们的应用程序为整个文件系统生成的工作负载。它们不包括执行客户端请求或内部后台活动的服务器间请求，例如转发写入或重新平衡。</p><p>有关 I&#x2F;O 操作的统计信息基于从 GFS 服务器记录的实际 RPC 请求中以启发式方式重建的信息。举例来说，GFS 客户端代码可能会把读拆分进多个 RPC 中以提高并行性，我们从中推断出原始读取。由于我们的访问模式是高度程式化的，因此我们希望任何错误都会出现在噪声中。应用程序的显式日志记录可能会提供稍微更准确的数据，但从逻辑上讲，重新编译和重新启动数千个正在运行的客户端来这样做是不可能的，而且从尽可能多的机器收集结果也很麻烦。</p><p>有一点应该小心，就是不要从我们的工作负载中过度概括。由于 GFS 和使用 GFS 的应用程序都由 Google 完全控制，所以应用程序往往会为了 GFS 做调整优化，反过来 GFS 也是为这些应用程序设计的。这些相互的影响可能也存在于广泛的应用程序和文件系统中，但是这种影响在我们的案例中可能更明显。</p><h4 id="6-3-2-chunkserver-工作负载"><a href="#6-3-2-chunkserver-工作负载" class="headerlink" title="6.3.2. chunkserver 工作负载"></a>6.3.2. chunkserver 工作负载</h4><p><img src="https://gukaifeng.cn/posts/gfs-lun-wen-yue-du-bi-ji/GFS_Table_4.png" alt="表 4 : 按大小(Size, %)划分操作。对于读(Read)，size 是实际读、传输的数据总量，而不是请求的数据总量。"></p><p>表 4 : 按大小(Size, %)划分操作。对于读(Read)，size 是实际读、传输的数据总量，而不是请求的数据总量。</p><p>表 4 显示了操作不同大小数据的操作的次数分布。</p><p>读(Read)大小是一个双峰分布。小的读（小于 64 KB）来自在巨大的文件中查找数据的小片段的搜索密集型客户端。大的读（大于 512 KB）来自贯穿整个文件的长顺序读。</p><p>集群 Y 中有大量的读根本没有返回数据。我们的应用程序，尤其是那些在生产系统中的，经常使用文件作为生产者消费者队列。生产者并发地 append 一个文件，同时一个消费者读这个文件的末尾。偶尔会有一种情况，即当消费者赶超了这些生产者时，就不会有数据返回了。集群 X 的这种情况要少一些，因为集群 X 一般用于短期数据分析任务，而不是长期的分布式应用程序。</p><p>写(Write)大小也是一个双峰分布。大的写（大于 256 KB）往往起因于写者的大缓存。缓存较少的数据、检查点或更频繁地进行同步，或者只是生成较少数据的写者导致较小的写（小于 64 KB）。</p><p>至于记录追加(Record Append)，集群 Y 的大型记录追加百分比比集群 X 高得多，因为我们使用集群 Y 的生产系统针对 GFS 进行了更积极的调整。</p><p><img src="https://gukaifeng.cn/posts/gfs-lun-wen-yue-du-bi-ji/GFS_Table_5.png" alt="表 5 : 按操作大小(Size, %)对传输字节数划分。对于读(Read)，size 是实际读、传输的数据总量，而不是请求的数据总量。如果读取尝试读取超过文件末尾的位置，则两者可能会有所不同，这在设计上在我们的工作负载中并不少见。"></p><p>表 5 : 按操作大小(Size, %)对传输字节数划分。对于读(Read)，size 是实际读、传输的数据总量，而不是请求的数据总量。如果读取尝试读取超过文件末尾的位置，则两者可能会有所不同，这在设计上在我们的工作负载中并不少见。</p><p>表 5 展示了在各种大小的操作中数据传输的总量划分。对于所有类型的操作，较大的操作（超过 256 KB）通常占传输的大部分字节。由于随机搜索负载，小读取（小于 64 KB）也确实会传输一小部分但重要的读取数据。</p><h4 id="6-3-3-Append-vs-Writes"><a href="#6-3-3-Append-vs-Writes" class="headerlink" title="6.3.3. Append vs. Writes"></a>6.3.3. Append vs. Writes</h4><p>记录追加非常常用，尤其是在我们的产品系统中。对于集群 X，write 与 record append 的字节传输比例是 108:1，操作数是 8:1。对于集群 Y（我们的产品系统使用的），上述比例分别是 3.7:1 和 2.5:1。</p><p>此外，这些比例表明在这两个集群中，record append 往往比 write 用的多得多。不过对于集群 X，在测量期间记录追加的总体使用率相当低，因此结果可能会受到具有特定缓冲区大小选择的一两个应用程序的影响。</p><p>和预期一样，我们的数据修改工作负载中，相比覆写，append 操作占绝对大头。我们测量了 primary 副本上覆写的数据总量，这近似于客户端故意覆盖以前写入的数据而不是附加新数据的情况。对于集群 X，覆写的总字节数低于 0.0001%，覆写的操作次数低于 0.0003%。尽管这个数据很微小，但仍然比我们预期的要高。 事实证明，这些覆写中的大多数来自由于错误或超时而导致的客户端重试，它们本身不是工作负载的一部分，而是重试机制的结果。</p><p>这里没理解，因为看数据好像是 write 多一些。。。</p><h4 id="6-3-4-master-工作负载"><a href="#6-3-4-master-工作负载" class="headerlink" title="6.3.4. master 工作负载"></a>6.3.4. master 工作负载</h4><p><img src="https://gukaifeng.cn/posts/gfs-lun-wen-yue-du-bi-ji/GFS_Table_6.png" alt="表 6 : 按类型划分(%)的 master 请求"></p><p>表 6 : 按类型划分(%)的 master 请求</p><p>表 6 显示了对 master 的请求类型的细分。</p><p>大多数请求都要询问 chunk 位置 （FindLocation）用来读，和数据的租约持有者信息（FindLeaseLocker）用于数据修改。</p><p>集群 X 和 Y 看到的删除请求数量明显不同，因为集群 Y 存储着定期重新生成并替换为较新版本的生产数据集。这种差异进一步隐藏在 Open 请求的差异中，因为旧版本的文件可能会通过从头开始写入而被隐式删除（Unix 开放术语中的 <code>mode &quot;w&quot;</code>）。</p><p>FindMatchingFiles 是一个模式匹配请求，支持 <code>ls</code> 和类似的文件系统操作。FindMatchingFiles 与其他对 master 的请求不同，它可能会处理大部分的命名空间，因此可能代价很高。集群 Y 能更频繁地看到 FindMatchingFiles，因为自动数据处理任务倾向于检查文件系统的某些部分以了解全局应用程序状态。相比之下，集群 X 的应用程序处于更明确的用户控制之下，并且通常提前知道所有需要的文件的名称。</p><h2 id="7-经验"><a href="#7-经验" class="headerlink" title="7. 经验"></a>7. 经验</h2><p>在 GFS 的构建和部署过程中，Google 经历了各种各样的问题，有些事操作方面的，有些事技术方面的。</p><p>最初，GFS 被设想为我们生产系统的后端文件系统。随着时间的推移，其用途演变为包括研究和开发任务。GFS 开始时对权限和配额等内容的支持很少，但现在包括这些的基本形式。虽然生产系统受到良好的纪律和控制，但用户有时却不是，需要更多的基础设施来防止用户相互干扰。</p><p>我们最大的一些问题与磁盘和 Linux 有关。我们的许多磁盘都向 Linux 驱动程序声称它们支持一系列 IDE 协议版本，但实际上只对较新的版本做出可靠响应。由于协议版本非常相似，这些驱动器大部分都可以工作，但偶尔不匹配会导致驱动器和内核对驱动器的状态存在分歧。由于内核中的问题会默默地破坏数据，这个问题促使我们使用校验和来检测数据损坏，同时我们修改内核来处理这些协议不匹配。</p><p>早些时候，由于 fsync() 的开销，我们在使用 Linux 2.2 内核时遇到了一些问题。 它的成本与文件的大小成正比，而不是与修改部分的大小成正比。 这对于我们的大型操作日志来说是一个问题，尤其是在我们实施检查点之前。 我们通过使用同步写入解决了一段时间，最终迁移到 Linux 2.4。</p><p>另一个 Linux 问题是单个读者-写者锁，地址空间中的任何线程在从磁盘分页（读者锁）或在 <code>mmap()</code> 调用（写者锁）中修改地址空间时都必须持有该锁。 我们在低负载下看到我们系统中的短暂的超时，并努力寻找资源瓶颈或零星的硬件故障。 最终，我们发现这个单一的锁阻止了主网络线程将新数据映射到内存，而磁盘线程正在分页先前映射的数据。 由于我们主要受网络接口而不是内存复制带宽的限制，因此我们通过将 <code>mmap()</code> 替换为 <code>pread()</code> 来解决此问题，但代价是额外的副本。</p><p>尽管偶尔会出现问题，但 Linux 代码的可用性已经一次又一次地帮助我们探索和理解系统行为。 在适当的时候，我们会改进内核并与开源社区分享更改。</p><h2 id="8-总结"><a href="#8-总结" class="headerlink" title="8. 总结"></a>8. 总结</h2><p>Google 文件系统展示了在商品硬件上支持大规模数据处理工作负载所必需的品质。虽然一些设计决策是针对我们独特的环境的，但许多可能适用于具有相似规模和成本意识的数据处理任务。</p><p>我们首先根据我们当前和预期的应用程序工作负载和技术环境重新检查传统的文件系统假设。我们的观察导致了设计空间中的根本不同点。我们将组件故障视为常态而不是例外，针对大部分附加（可能同时）然后读取（通常顺序）的大文件进行优化，并扩展和放松标准文件系统接口以改进整个系统。</p><p>我们的系统通过持续监控、复制关键数据以及快速自动恢复来提供容错能力。Chunk 副本允许我们容忍 chunkserver 故障。 这些故障的频繁发生激发了一种新颖的在线修复机制，该机制定期透明地修复损坏并尽快补偿丢失的副本。此外，我们使用校验和来检测磁盘或 IDE 子系统级别的数据损坏，考虑到系统中的磁盘数量，这变得非常普遍。</p><p>我们的设计为执行各种任务的许多并发读者和写者提供了高聚合吞吐量。我们通过将<strong>通过 master 的文件系统控制</strong>与<strong>直接在 chunkserver 和客户端之间传递的数据传输</strong>分离来实现这一点。通过大 chunk 大小和 chunk 租约，将权限委托给数据修改中的 primary 副本，可以最大限度地减少常见操作对 master 的涉及。这使得一个不会成为瓶颈的简单、集中的 master 成为可能。我们相信，我们网络堆栈的改进将解除当前对单个客户端看到的写入吞吐量的限制。</p><p>GFS 成功满足了我们的存储需求，并在 Google 内部被广泛用作研发以及生产数据处理的存储平台。它是一个重要的工具，使我们能够在整个网络的规模上继续创新和解决问题。</p><h2 id="9-FAQ"><a href="#9-FAQ" class="headerlink" title="9. FAQ"></a>9. FAQ</h2><p><strong>Q1. 为什么 record append 是原子的追加至少一次，而不是确定一次？</strong></p><p>3.1 小节，步骤 7 中描述了，如果一个 write 在 secondaries 中之一失败了，客户端会重试这个写。这会导致在没有出错的副本中，数据被重复追加了超过一次。一个不同的设计可能会检测到任意故障（例如，原始请求和客户端重试之间的 primary 故障）导致的重复客户端请求，但可能会为复杂性和性能付出相当大的代价。</p><p><strong>Q2. 应用程序如何知道一个 chunk 中哪些部分包含填充和重复记录？</strong></p><p>为了检测填充，应用程序可以在有效数据的开头输出一个可预测的 magic number，或者包含一个检验和，该校验和可能仅在记录有效时才有效。</p><p>应用程序可以通过在记录中包含唯一的 ID 来检测重复。如果应用程序读到一个与之前读到过的记录的 ID 相同的记录，就知道这个记录与前面的重复了。</p><p>GFS 为应用程序提供了一个库以处理上述这些情况。</p><p><strong>Q3. 鉴于原子记录追加将其写入文件中不可预测的偏移量，客户如何找到他们的数据？</strong></p><p>Append（GFS 一般也是）主要用于顺序读整个文件的应用程序。这类应用程序扫描文件以寻找有效记录，所以客户端不需要提前知道记录的位置。例如，该文件可能包含一组并发网络爬虫遇到的一组链接 URL。任何给定 URL 的文件偏移量都无关紧要，读者只是希望能够阅读整个 URL 集。</p><p><strong>Q4. 什么是校验和？</strong></p><p>校验和算法将一个字节块作为输入，并返回一个数字，该数字是所有输入字节的函数。</p><p>例如，一个简单的校验和可能是输入中所有字节的总和（mod some big number）。</p><p>GFS 存储每个 chunk 以及他们的检验和。当一个 chunkserver 在它的磁盘上写入一个 chunk 时，它首先计算新 chunk 的校验和，并将校验和和 chunk 一起保存在磁盘上。当 chunkserver 从磁盘读取 chunk 时，它也会读取之前保存的校验和，从磁盘读取的 chunk 中重新计算校验和，并检查两个校验和是否匹配。 如果数据被磁盘损坏，校验和将不匹配，并且 chunkserver 将知道返回错误。另外，一些 GFS 应用程序通过应用程序定义的记录在 GFS 文件中存储自己的校验和，以区分正确的记录和填充。</p><p>CRC32 是校验和算法的一个示例。</p><p><strong>Q5. 论文中提到了“引用计数”，这是什么？</strong></p><p>引用计数是为了快照(snapshots)的写时复制(copy-on-write)实现的一部分。</p><p>当 GFS 创建一个快照时，GFS 不会拷贝这些 chunks，但是会增加每个 chunk 的引用计数，这使得创建一个快照变得成本很低。</p><p>如果一个客户端写入一个 chunk 并且 master 注意到这个 chunk 的引用计数大于 1，master 首先会拷贝这个 chunk，然后客户端更新这个拷贝（而不是作为快照一部分的那个 chunk）。</p><p>我们可以将此视为延迟复制，直到绝对必要为止。 这个策略使得在创建快照时，不是所有的 chunk 都会被修改，并且可以避免制作一些副本。</p><p><strong>Q6. 如果一个应用程序使用标准 POSIX 文件 API，其是否需要修改以适应 GFS？</strong></p><p>是的。</p><p>但是 GFS 不适用于现存的应用程序。GFS 是为新编写的应用程序设计的，例如 MapReduce 程序。</p><p><strong>Q7. GFS 如何确定最近的副本的位置？</strong></p><p>GFS 论文中暗示了其基于存储了有效副本的服务器的 IP 地址来确定最近副本的位置。</p><p>在 2003 年，Google 必须以下面的方式指定 IP 地址，即，如果两个 IP 地址在 IP 地址空间中彼此靠近，那么它们在机房中也很靠近。</p><p><strong>Q8. 假设 S1 是一个 chunk 的 primary，在 master 和 S1 之间的网络故障了。master 将会注意到并制定一些其他的服务器作为 primary，叫做 S2。由于 S1 没有真的故障，那么此时同一个 chunk 是否有两个 primary？</strong></p><p>如果同时存在两个 primaries 会是一个灾难，因为两个 primaries 可能会对同一个 chunk 应用不同的更新。</p><p>幸运的是 GFS 租约机制预防了这种情况。master 给 S1 授予一个 60 秒的租约使 S1 成为 primary。S1 知道当其租约到期后就不再是 primary 了。在先前给 S1 授予的租约之前，master 不会给 S2 授予租约。所以在 S1 的租约到期之前，S2 不会作为 primary 开始活动。</p><p><strong>Q9. 64 MB 大小的 chunk 是否听起来很尴尬？</strong></p><p>64 MB 的 chunk 大小是 master 中的簿记(book-keeping)单位，以及文件在 chunkserver 上分片的粒度。</p><p>客户端可以发出较小的读取和写入 —— 他们不必被迫处理整个 64 MB 的块。</p><p>使用如此大的 chunk 大小的目的是减少 master 中元数据表的大小，并避免限制想要进行大量传输以减少开销的客户端。 另一方面，小于 64 MB 的文件不会获得太多的并行性。</p><p><strong>Q10. Google 是否仍然在使用 GFS？（注：此问题问于 2020 年，GFS 论文发表于 2003 年）</strong></p><p>有传言称 GFS 已被 Colossus 所取代，总体目标相同，但 master 性能和容错能力有所提高。</p><p><strong>Q11. GFS 以正确性换取性能和简单性的接受程度如何？</strong></p><p>这是分布式系统中的一个反复出现的主题。</p><p>强一致性通常需要复杂的协议，并且需要机器之间的闲聊(chit-chat)。</p><p>通过利用特定应用程序类可以容忍宽松一致性的方法，可以设计具有良好性能和足够一致性的系统。例如，GFS 为 MapReduce 应用程序进行了优化，这些应用程序需要对大文件的高读取性能，并且可以接受文件中的漏洞、记录显示多次和读取不一致的情况。另一方面，GFS 不适合在银行存储账户余额。</p><p><strong>Q12. 如果 master 故障了怎么办？</strong></p><p>有 master 的副本，此副本包含 master 状态的完全拷贝。该论文的设计需要人工干预才能在 master 故障后切换到其中一个副本（第 5.1.3 节）。</p><p>我们可以使用 Raft 构建具有自动切换到备份的复制服务。</p><p><strong>Q13. 只有一个 master 是好主意吗？</strong></p><p>这个设计简化了一开始的部署，但对于长期运行的程序来说确实不太好。</p><p><a href="https://queue.acm.org/detail.cfm?id=1594206">https://queue.acm.org/detail.cfm?id=1594206</a> 一文中说过，随着岁月的流逝和 GFS 使用的增长，出现了一些问题。</p><ul><li>文件的数量增长到了足够大，以至于将所有文件的元数据存储在单个 master 的 RAM 中不再合理。</li><li>客户端的数量增长到了足够大，以至于单个 master 没有足够的 CPU 能力为这些客户端服务。</li><li>实际中，从一个故障的 master 切换到一个其备份，需要人类干预，这使得恢复过程很慢。</li></ul><p>Google 的 GFS 替代，Colossus，将 master 划分为了多个服务器，并且有更多的自动 master 故障恢复。</p><h1 id="Consistent-Hash"><a href="#Consistent-Hash" class="headerlink" title="Consistent Hash"></a>Consistent Hash</h1><h2 id="如何分配请求"><a href="#如何分配请求" class="headerlink" title="如何分配请求"></a>如何分配请求</h2><p>单机的并发量和数据量有限，因此会用多台服务器构成集群来对外提供服务。</p><p>那么有多个节点的时候如何分配客户端的请求呢？——负载均衡问题</p><h3 id="采用加权轮询"><a href="#采用加权轮询" class="headerlink" title="采用加权轮询"></a>采用加权轮询</h3><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230215145627420.png" alt="image-20230215145627420" style="zoom:67%;" /><p>将硬件配置更好的节点的权重值设高，然后根据各个节点的权重值，按照一定比重分配在不同的节点上，让硬件配置更好的节点承担更多的请求，这种算法叫做<strong>加权轮询</strong>。</p><p>加权轮询算法使用场景是建立在<strong>每个节点存储的数据都是相同</strong>的前提，但是这种算法无法应对分布式系统，因为在分布式系统中每个节点存储的数据不同。</p><p>因此，我们要想一个能<strong>应对分布式系统的负载均衡算法</strong>。</p><h2 id="使用哈希算法的问题"><a href="#使用哈希算法的问题" class="headerlink" title="使用哈希算法的问题"></a>使用哈希算法的问题</h2><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230215150028313.png" alt="image-20230215150028313" style="zoom:80%;" /><p>哈希算法最简单的做法就是进行取模运算，比如分布式系统中有 3 个节点，基于 hash(key) % 3 公式对数据进行了映射。</p><p>但是这种方法有一种很致命的问题：</p><p><strong>如果节点数量发生了变化，也就是在对系统做扩容或者缩容时，必须迁移改变了映射关系的数据</strong>，否则会出现查询不到数据的问题。</p><h3 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h3><p>假设我们有一个由 A、B、C 三个节点组成分布式 KV 缓存系统，基于计算公式 hash(key) % 3 将数据进行了映射，每个节点存储了不同的数据：</p><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230215150301066.png" alt="image-20230215150301066" style="zoom:67%;" /><p>现在有 3 个查询 key 的请求，分别查询 key-01，key-02，key-03 的数据，这三个 key 分别经过 hash() 函数计算后的值为 hash( key-01) &#x3D; 6、hash( key-02) &#x3D; 7、hash(key-03) &#x3D; 8，然后再对这些值进行取模运算。</p><p>通过这样的哈希算法，每个key都可以定位到对应的节点。</p><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230215150347585.png" alt="image-20230215150347585" style="zoom:67%;" /><p>当 3 个节点不能满足业务需求了，这时我们增加了一个节点，节点的数量从 3 变化为 4，意味取模哈希函数中基数的变化，这样会导致<strong>大部分映射关系改变</strong>，如下图：</p><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230215150417801.png" alt="image-20230215150417801" style="zoom:67%;" /><p>比如，之前的 hash(key-01) % 3 &#x3D; 0，就变成了 hash(key-01) % 4 &#x3D; 2，查询 key-01 数据时，寻址到了节点 C，而 key-01 的数据是存储在节点 A 上的，不是在节点 C，所以会查询不到数据。</p><p>同样，<strong>如果我们对分布式系统进行缩容，也会因为取模哈希函数中基数的变化，可能出现查询不到数据的问题</strong>。</p><p>因此，我们需要 <strong>迁移数据</strong>，如节点的数量从 3 变化为 4 时，<strong>要基于新的计算公式 hash(key) % 4 ，重新对数据和节点做映射</strong>。</p><p>假设总数据条数为M，哈希算法在面对节点数量变化时，**最坏情况下所有数据都需要迁移，所以他的数据迁移规模为O(M)**，迁移成本太高。</p><h2 id="使用一致性哈希算法"><a href="#使用一致性哈希算法" class="headerlink" title="使用一致性哈希算法"></a>使用一致性哈希算法</h2><p>一致性哈希算法就很好地解决了分布式系统在扩容或者缩容时，发生过多的数据迁移的问题。</p><p>一致哈希算法也用了取模运算，但与哈希算法不同的是，哈希算法是对节点的数量进行取模运算，而<strong>一致哈希算法是对 2^32 进行取模运算，是一个固定的值</strong>。</p><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230215150915139.png" alt="image-20230215150915139" style="zoom:67%;" /><h3 id="一致性哈希的步骤"><a href="#一致性哈希的步骤" class="headerlink" title="一致性哈希的步骤"></a>一致性哈希的步骤</h3><ol><li>对<strong>存储节点</strong>进行哈希计算，也就是对存储节点做哈希映射，比如根据节点的 IP 地址进行哈希；</li><li>当对<strong>数据</strong>进行存储或访问时，对数据进行哈希映射。</li></ol><p>因此 <strong>一致性哈希是将 存储节点 和 数据 都映射到一个首尾相连的哈希环上</strong>。</p><p>那么，对<strong>「数据」</strong>进行哈希映射得到一个结果要怎么找到存储该数据的<strong>节点</strong>呢</p><p>映射的结果值往<strong>顺时针的方向的找到第一个节点</strong>，就是存储该数据的节点。</p><p>举个例子，有 3 个节点经过哈希计算，映射到了如下图的位置：</p><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230215151356977.png" alt="image-20230215151356977" style="zoom:50%;" /><p>接着，对要查询的 key-01 进行哈希计算，确定此 key-01 映射在哈希环的位置，然后从这个位置往顺时针的方向找到第一个节点，就是存储该 key-01 数据的节点。</p><p>比如，下图中的 key-01 映射的位置，往顺时针的方向找到第一个节点就是节点 A。</p><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230215151501283.png" alt="image-20230215151501283" style="zoom: 50%;" /><h3 id="因此，当需要对指定key的值进行读写的时候，通过下面两步进行寻址："><a href="#因此，当需要对指定key的值进行读写的时候，通过下面两步进行寻址：" class="headerlink" title="因此，当需要对指定key的值进行读写的时候，通过下面两步进行寻址："></a>因此，当需要对指定key的值进行读写的时候，通过下面两步进行寻址：</h3><ol><li>首先，对 key 进行哈希计算，确定此 key 在环上的位置；</li><li>然后，从这个位置沿着顺时针方向走，遇到的第一节点就是存储 key 的节点。</li></ol><h3 id="如果进行扩容或缩容不会发生大量的数据迁移"><a href="#如果进行扩容或缩容不会发生大量的数据迁移" class="headerlink" title="如果进行扩容或缩容不会发生大量的数据迁移"></a>如果进行扩容或缩容不会发生大量的数据迁移</h3><p>假设节点数量从 3 增加到了 4，新的节点 D 经过哈希计算后映射到了下图中的位置：</p><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230215151829664.png" alt="image-20230215151829664" style="zoom:50%;" /><p>可以看到，key-01、key-03 都不受影响，只有 key-02 需要被迁移节点 D。</p><p>假设节点数量从 3 减少到了 2，比如将节点 A 移除：</p><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230215151900976.png" alt="image-20230215151900976" style="zoom:50%;" /><p>可以看到，key-02 和 key-03 不会受到影响，只有 key-01 需要被迁移节点 B。<br>因此，<strong>在一致哈希算法中，如果增加或者移除一个节点，仅影响该节点在哈希环上顺时针相邻的后继节点，其它数据也不会受到影响</strong>。</p><h2 id="使用一致性哈希有什么问题"><a href="#使用一致性哈希有什么问题" class="headerlink" title="使用一致性哈希有什么问题"></a>使用一致性哈希有什么问题</h2><p>但是<strong>一致性哈希算法并不保证节点能够在哈希环上分布均匀</strong>，这样就会带来一个问题，会有大量的请求集中在一个节点上。</p><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230215151949321.png" alt="image-20230215151949321" style="zoom:50%;" /><p>如上图就是负载不均衡的情况，在这种节点分布不均衡的情况下，进行扩容或缩容时，哈希环上的相邻节点容易受到过大影响。</p><p>如果节点 A 被移除了，当节点 A 宕机后，根据一致性哈希算法的规则，其上数据应该全部迁移到相邻的节点 B 上，这样，节点 B 的数据量、访问量都会迅速增加很多倍，一旦新增的压力超过了节点 B 的处理能力上限，就会导致节点 B 崩溃，进而形成雪崩式的连锁反应。</p><p>所以，<strong>一致性哈希算法虽然减少了数据迁移量，但是存在节点分布不均匀的问题</strong>。</p><h2 id="如何通过虚拟节点提高均衡度"><a href="#如何通过虚拟节点提高均衡度" class="headerlink" title="如何通过虚拟节点提高均衡度"></a>如何通过虚拟节点提高均衡度</h2><p>要想解决节点能在哈希环上分配不均匀的问题，就是要有大量的节点，节点数越多，哈希环上的节点分布的就越均匀。</p><p>但问题是，实际中我们没有那么多节点。所以这个时候我们就加入<strong>虚拟节点</strong>，也就是对一个真实节点做多个副本。</p><p>具体做法是，<strong>不再将真实节点映射到哈希环上，而是将虚拟节点映射到哈希环上，并将虚拟节点映射到实际节点，所以这里有「两层」映射关系。</strong></p><p>比如对每个节点分别设置 3 个虚拟节点：</p><ul><li>对节点 A 加上编号来作为虚拟节点：A-01、A-02、A-03</li><li>对节点 B 加上编号来作为虚拟节点：B-01、B-02、B-03</li><li>对节点 C 加上编号来作为虚拟节点：C-01、C-02、C-03</li></ul><p>引入虚拟节点后，原本哈希环上只有 3 个节点的情况，就会变成有 9 个虚拟节点映射到哈希环上，哈希环上的节点数量多了 3 倍。</p><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230215152938014.png" alt="image-20230215152938014" style="zoom:50%;" /><p><strong>节点数量多了后，节点在哈希环上的分布就相对均匀了</strong>，这时候，如果有访问请求寻址到「A-01」这个<strong>虚拟节点</strong>，接着再通过「A-01」虚拟节点找到<strong>真实节点</strong> A，这样请求就能访问到真实节点 A 了。</p><p>在实际工程中，虚拟节点的数量会大很多，比如Nginx的一致性哈希算法，每个权重为1的真实节点含有160个虚拟节点。</p><p>此外，虚拟节点除了会提高节点的均衡度，还会提高系统的<strong>稳定性</strong>。<strong>当节点变化时，会有不同的节点共同分担系统的变化，因此稳定性更高</strong>。</p><p>因此，<strong>带虚拟节点的一致性哈希方法不仅适合硬件配置不同的节点的场景，而且适合节点规模会发生变化的场景</strong>。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>轮询只适用于每个节点的数据都是相同的场景，但是不适用于分布式系统</li><li>哈希算法虽然能建立数据和节点之间的映射关系，但是在进行增容或缩容时，最坏情况下所有数据都要迁移</li><li>为了减少迁移的数据量，使用一致性哈希</li><li>但是一致性哈希不能均匀地分布节点，会出现大量请求都集中在一个节点的情况，在这种情况下进行增容或缩容时，容易出现连锁式的雪崩反应</li><li>为了解决一致性哈希算法不能够均匀的分布节点的问题，就需要引入<strong>虚拟节点</strong>，对一个真实节点做多个副本。不再将真实节点映射到哈希环上，而是将虚拟节点映射到哈希环上，并将虚拟节点映射到实际节点，所以这里有「两层」映射关系。</li><li>引入虚拟节点后，<strong>可以会提高节点的均衡度，还会提高系统的稳定性</strong>。所以，带虚拟节点的一致性哈希方法不仅适合硬件配置不同的节点的场景，而且适合节点规模会发生变化的场景。</li></ul><h1 id="Raft共识算法"><a href="#Raft共识算法" class="headerlink" title="Raft共识算法"></a>Raft共识算法</h1><h2 id="什么是raft"><a href="#什么是raft" class="headerlink" title="什么是raft"></a>什么是raft</h2><p>相比于Paxos，Raft最大的特性就是understandable，为了达到这两个目标，raft主要做了两方面的事情：</p><ul><li><strong>问题分解</strong>：把共识算法分成三个子问题，分别是 <strong>领导者选举（leader election）、日志复制（log replication）、安全性（safety）</strong></li><li><strong>状态简化</strong>：对算法做出一些限制，减少状态数量或可能产生的变动。使一台服务器只在三种状态之间进行转换，并且服务器之间的通信只通过两类RPC来完成</li></ul><h2 id="复制状态机"><a href="#复制状态机" class="headerlink" title="复制状态机"></a>复制状态机</h2><p><strong>相同的初始状态+相同的输入&#x3D;相同的结束状态</strong></p><p>多个节点上，从相同的初始状态开始，执行相同的一串命令，产生相同的最终状态。</p><p>在Raft中, leader将客户端请求(command)封装到一个个log entry中，将这些log entries复制到所有follower节点，然后大家按相同顺序应用logentries中的command，根据复制状态机的理论，大家的结束状态肯定是一致的。</p><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230215163139828.png" alt="image-20230215163139828" style="zoom: 67%;" /><p>如上图，client给leader发送一个命令，leader生成log，并且发送给所有其他的follower结点，然后所有节点一起把log应用到自己的state machine中 ，并且生成一致的状态，这样，client无论查询哪个节点的状态机，只要这个节点正常应用了日志，那么查到的结果就是一样的。</p><p>可以说，我们实现共识算法就是为了 <strong>实现复制状态机</strong>。一个分布式系统的各节点间，就是通过共识算法来保证命令序列的一致，从而始终保持它们的状态一致，从而实现高可用的 。</p><h2 id="状态简化"><a href="#状态简化" class="headerlink" title="状态简化"></a>状态简化</h2><p>在任何时刻，每一个服务器节点都处于leader，follower和candidate三个状态之一</p><p>相比于Paxos，这一点就极大简化了算法的实现，因为Raft只需考虑状态的切换，而不用像Paxos那样考虑状态之间的共存和互相影响。</p><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230215163736046.png" alt="image-20230215163736046" style="zoom:80%;" /><p>raft将时间分割成任意长度的 <strong>任期（term）</strong>，任期用连续的整数标记。</p><p>每一段任期从一次选举开始。在某些情况下，一次选举无法选出leader (比如两个节点收到了相同的票数)，在这种情况下，这一任期会以没有leader结束;一个新的任期(包含一次新的选举）会很快重新开始。Raft保证在任意一个任期内，最多只有一个leader。</p><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230215163936056.png" alt="image-20230215163936056" style="zoom:80%;" /><p>任期的机制可以非常明确地标识集群的状态，并且通过任期的比较，可以帮助我们确认一台服务器历史的状态。</p><h3 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a>RPC</h3><p>Raft算法中服务器节点之间使用RPC进行通信，并且Raft中只有两种主要的RPC：</p><ul><li>requestVote RPC(请求投票)：由candidate在选举期间发起</li><li>appendEntries RPC(追加条目)：由leader发起，用来复制日志和提供一种心跳机制</li></ul><ol><li>服务器之间通信的时候会交换当前任期号;如果一个服务器上的当前任期号比其他的小,该服务器会将自己的任期号更新为较大的那个值。</li><li>如果一个candidate或者leader发现自己的任期号过期了，它会立即回到follower状态。</li><li>如果一个节点接收到一个包含过期的任期号的请求，它会直接拒绝这个请求。</li></ol><h2 id="领导者选举"><a href="#领导者选举" class="headerlink" title="领导者选举"></a>领导者选举</h2><ul><li>Raft内部有一种<strong>心跳机制</strong>，如果存在leader，那么它就会周期性地向所有follower发送心跳，来维持自己的地位。如果follower一段时间（图中的进度条）没有收到心跳，那么他就会认为系统中没有可用的leader了，然后开始进行选举。</li><li>开始一个选举过程后, follower先<strong>增加自己的当前任期号</strong>，并转换到<strong>candidate</strong>状态。然后<strong>投票给自己</strong>，并且并行地向集群中的其他服务器节点发送投票请求**(RequestVote RPC) 。**</li></ul><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230215164911431.png" alt="image-20230215164911431" style="zoom:80%;" /><p>一个leader 的投票选举最终会有三个结果：</p><ul><li>它获得 <strong>超过半数选票</strong>赢得了选举&#x3D;&gt;成为leader并开始发送心跳</li><li>其他节点赢得了选举&#x3D;&gt;收到<strong>新leader的心跳</strong>后，如果<strong>新leader的任期号不小于自己当前的任期号</strong>，那么就从candidate回到follower状态。</li><li>一段时间之后没有任何获胜者&#x3D;&gt;每个candidate都在一个自己的<strong>随机选举超时时间后</strong>增加任期号开始新一轮投票。</li></ul><p>为什么会没有获胜者？</p><p>比如有多个follower同时成为candidate，得票太过分散，没有任何一个candidate得票超过半数</p><p>论文中给出的随机选举超时时间为<strong>150~300ms</strong>。</p><h3 id="请求投票RPC的具体内容"><a href="#请求投票RPC的具体内容" class="headerlink" title="请求投票RPC的具体内容"></a>请求投票RPC的具体内容</h3><p><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230215211723041.png" alt="image-20230215211723041"></p><p>论文中把RPC的request称为arguments，response称为results</p><p>不管是request还是response，都有一个任期号，这是因为raft的节点要通过任期号来确定自身的状态以及判断接不接收这个RPC。</p><p>follower收到一个requestVoteRequest之后会先校验这个candidate是否符合条件：</p><ul><li>candidate的term是否比自己大</li><li>lastLogIndex和lastLogTerm</li></ul><p>确认无误后follower就可以投票了，并且每个follower只有一张票，按照<strong>先来先得</strong>的原则投出</p><p>raft集群启动时，所有的结点都是follower，然后第一个意识到集群中没有leader的节点会把自己变成candidate，他会给自己的任期号加一并发请求投票request给其他follower，通常来讲，这个新发优势使得它大概率会成为leader。</p><p>在一个leader任期结束或失效后，也是同样会进入这样一个任期的循环</p><h2 id="日志复制"><a href="#日志复制" class="headerlink" title="日志复制"></a>日志复制</h2><p>leader被选举出后，开始为客户端请求提供服务。</p><h3 id="客户端怎么知道新leader是哪个节点呢？"><a href="#客户端怎么知道新leader是哪个节点呢？" class="headerlink" title="客户端怎么知道新leader是哪个节点呢？"></a>客户端怎么知道新leader是哪个节点呢？</h3><ul><li>客户端随机向一个节点或者就是老leader发送请求，这时有三种情况：<ol><li>这个节点正好为leader，直接执行指令</li><li>这个节点为follower，那么它可以通过心跳得知leader的ID</li><li>找到的这个节点正好宕机了，没有响应，那么client只能再去找另一个结点，重复此过程</li></ol></li></ul><p>Leader接收到客户端的指令后，会把指令作为一个新的条目追加到日志中去。</p><h3 id="一条日志中需要有三个信息："><a href="#一条日志中需要有三个信息：" class="headerlink" title="一条日志中需要有三个信息："></a>一条日志中需要有三个信息：</h3><ul><li>状态机指令，这个值通常是对某个值进行某个操作</li><li>leader的任期号</li><li>日志号（日志索引）</li></ul><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230215213143276.png" alt="image-20230215213143276" style="zoom:80%;" /><p>(在上图中，只要有包括leader在内的3个节点复制了某条日志，日志就可以提交了）</p><p>生成日志之后，leader就会把日志放到AppendEntries RPC中，并且<strong>并行</strong>地发送给follower，让他们复制该条目。</p><p>当该条目被<strong>超过半数</strong>的follower复制后，leader就可以在本地执行该指令<strong>并将结果返回给客户端</strong></p><p>我们把本地执行指令，也就是leader应用日志与状态机这一步，称作 <strong>提交</strong></p><h3 id="作为一个共识算法，我们要让集群中每个节点都可用，也就是具备完整的日志"><a href="#作为一个共识算法，我们要让集群中每个节点都可用，也就是具备完整的日志" class="headerlink" title="作为一个共识算法，我们要让集群中每个节点都可用，也就是具备完整的日志"></a>作为一个共识算法，我们要让集群中每个节点都可用，也就是具备完整的日志</h3><h3 id="怎么让follower追上leader，并保证所有节点的日志都是完整且顺序一致的呢"><a href="#怎么让follower追上leader，并保证所有节点的日志都是完整且顺序一致的呢" class="headerlink" title="怎么让follower追上leader，并保证所有节点的日志都是完整且顺序一致的呢"></a>怎么让follower追上leader，并保证所有节点的日志都是完整且顺序一致的呢</h3><ul><li><p>follower缓慢：</p><p>leader会不断重发追加条目请求（AppendEntries RPC），<u>哪怕leader已经回复了客户端</u></p></li><li><p>follower崩溃后恢复：这时候Raft追加条目的<strong>一致性检查</strong>生效，保证follower能按顺序恢复崩溃后的缺失的日志</p><ul><li>一致性检查：<img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230215214159334.png" alt="image-20230215214159334"></li></ul></li><li><p>leader宕机</p><p>崩溃的leader可能已经复制了日志到部分follower但还<strong>没有提交</strong>。而被选出的新leader又可能不具备这些日志，这样就有部分follower中的日志和新leader的日志不相同。</p><p>Raft在这种情况下, leader通过<strong>强制follower复制它的日志</strong>来解决不一致的问题,这意味着<u>follower中跟leader冲突的日志条目会被新leader的日志条目覆盖</u>(因为没有提交，所以不违背外部一致性)。</p><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230215214609630.png" alt="image-20230215214609630" style="zoom:80%;" /></li></ul><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><ul><li>通过上述一致性检查的机制，leader在当权之后就 <strong>不需要任何特殊的操作</strong> 来使得日志恢复到一致状态</li><li>Leader只需要进行正常的操作．然后日志就能在回复AppendEntries一致性检查失败的时候<strong>自动</strong>趋于一致。</li><li>而leader从来不会覆盖或者删除自己的日志条目（append-Only）</li><li>这样的<strong>日志复制机制</strong>，就可以保证<strong>一致性特性</strong>：<ul><li>只要过半的服务器能正常运行，Raft就能够接受、复制并应用新的日志条目</li><li>在正常情况下，新的日志条目可以在一个RPC来回中被复制给集群中的过半机器</li><li>单个运行慢的follower不会影响整体的性能</li></ul></li></ul><h3 id="追加条目RPC的具体内容"><a href="#追加条目RPC的具体内容" class="headerlink" title="追加条目RPC的具体内容"></a>追加条目RPC的具体内容</h3><p><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230215215114906.png" alt="image-20230215215114906"></p><p><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230215215155301.png" alt="image-20230215215155301"></p><h2 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h2><p>领导者选举和日志复制两个子问题实际上已经涵盖了共识算法的全程，但这两点还不能完全保证<strong>每一个状态机会按照相同的顺序执行相同的命令。</strong></p><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230215215459602.png" alt="image-20230215215459602" style="zoom:67%;" /><p>所以Raft通过几个补充规则完善整个算法，使算法可以在各类<strong>宕机问题</strong>下都不出错。</p><p>这些规则包括：</p><ul><li><strong>Leader宕机处理:选举限制</strong></li><li><strong>Leader宕机处理:新leader是否提交之前任期内的日志条目</strong></li><li><strong>Follower和Candidate宕机处理</strong></li><li><strong>时间与可用性限制</strong></li></ul><h3 id="Leader宕机处理：选举限制"><a href="#Leader宕机处理：选举限制" class="headerlink" title="Leader宕机处理：选举限制"></a>Leader宕机处理：选举限制</h3><ul><li>如果一个follower落后了leader若干条日志（但没有漏一<strong>整个任期</strong>)，那么下次选举中，按照领导者选举里的规则，它依旧有可能当选leader。它在当选新leader后就永远也无法补上之前缺失的那部分日志,从而造成状态机之间的不一致。</li><li>所以需要对领导者选举增加一个*<u><strong>限制</strong></u>*，<strong>保证被选出来的leader一定包含了之前各任期的所有被提交的日志条目</strong>。</li></ul><h3 id="那么raft是如何实现这个限制的呢？"><a href="#那么raft是如何实现这个限制的呢？" class="headerlink" title="那么raft是如何实现这个限制的呢？"></a>那么raft是如何实现这个限制的呢？</h3><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230215215945866.png" alt="image-20230215215945866" style="zoom:67%;" /><p><strong>RequestVote RPC</strong>执行了这样的限制:RPC中包含了candidate的日志信息，如果投票者自己的日志比candidate的还<strong>新</strong>, 它会拒绝掉该投票请求。（Raft通过比较两份日志中最后一条日志条目的索引值和任期号来定义谁的日志比较新。）</p><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230215220058395.png" alt="image-20230215220058395" style="zoom:50%;" /><h3 id="Leader宕机处理-新leader是否提交之前任期内的日志条目"><a href="#Leader宕机处理-新leader是否提交之前任期内的日志条目" class="headerlink" title="Leader宕机处理:新leader是否提交之前任期内的日志条目"></a><strong>Leader宕机处理:新leader是否提交之前任期内的日志条目</strong></h3><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230215220542890.png" alt="image-20230215220542890" style="zoom:80%;" /><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230215220727253.png" alt="image-20230215220727253" style="zoom:80%;" /><h3 id="Follower和Candidate宕机处理"><a href="#Follower和Candidate宕机处理" class="headerlink" title="Follower和Candidate宕机处理"></a>Follower和Candidate宕机处理</h3><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230215221035207.png" alt="image-20230215221035207" style="zoom:80%;" /><h3 id="时间和可用性限制"><a href="#时间和可用性限制" class="headerlink" title="时间和可用性限制"></a>时间和可用性限制</h3><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230215221123828.png" alt="image-20230215221123828" style="zoom:80%;" /><h1 id="拜占庭将军问题"><a href="#拜占庭将军问题" class="headerlink" title="拜占庭将军问题"></a>拜占庭将军问题</h1><p>拜占庭将军问题(The Byzantine Generals Problem)提供了对<strong>分布式共识问题</strong>的一种情景化描述, 由Leslie Lamport等人在1982年首次发表. 本文首先以插图的形式描述拜占庭将军问题, 最后在理解拜占庭将军问题的基础上对现有的分布式共识算法进行分类. Leslie Lamport等人的<a href="https://www-inst.eecs.berkeley.edu/~cs162/sp16/static/readings/Original_Byzantine.pdf">论文</a>提供了两种解决拜占庭将军问题的算法：</p><ul><li>口信消息型解决方案(A solution with oral message);</li><li>签名消息型解决方案(A solution with signed message).</li></ul><p>本文之后将详细讲述这两种算法. 事实上, 拜占庭将军问题是分布式系统领域最复杂的<strong>容错模型</strong>, 它描述了如何在存在恶意行为(如消息篡改或伪造)的情况下使分布式系统达成一致. 是我们理解分布式一致性协议和算法的重要基础.</p><h2 id="拜占庭将军问题描述"><a href="#拜占庭将军问题描述" class="headerlink" title="拜占庭将军问题描述"></a>拜占庭将军问题描述</h2><p>拜占庭将军问题描述了这样一个场景:</p><p><a href="https://liebing.org.cn/2020/02/14/byzantine_generals_problem/bgp.png"><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/bgp.png" alt="img" style="zoom:50%;" /></a></p><p>图1. 拜占庭将军问题</p><p><a href="https://en.wikipedia.org/wiki/Byzantine_Empire">拜占庭帝国(Byzantine Empire)</a>军队的几个师驻扎在敌城外, 每个师都由各自的将军指挥. 将军们只能通过信使相互沟通. 在观察敌情之后, 他们必须制定一个共同的行动计划, 如<strong>进攻(Attack)<strong>或者</strong>撤退(Retreat)</strong>, 且只有当半数以上的将军共同发起进攻时才能取得胜利. 然而, 其中一些将军可能是叛徒, 试图阻止忠诚的将军达成一致的行动计划. 更糟糕的是, 负责消息传递的信使也可能是叛徒, 他们可能篡改或伪造消息, 也可能使得消息丢失.</p><p>为了更加深入的理解拜占庭将军问题, 我们以<strong>三将军问题</strong>为例进行说明. 当三个将军都忠诚时, 可以通过投票确定一致的行动方案, 图2展示了一种场景, 即General A, B通过观察敌军军情并结合自身情况判断可以发起攻击, 而General C通过观察敌军军情并结合自身情况判断应当撤退. 最终三个将军经过投票表决得到结果为进攻:撤退&#x3D;2:1, 所以将一同发起进攻取得胜利. 对于三个将军, 每个将军都能执行两种决策(进攻或撤退)的情况下, 共存在6中不同的场景, 图2是其中一种, 对于其他5中场景可简单地推得, 通过投票三个将军都将达成一致的行动计划.</p><p><a href="https://liebing.org.cn/2020/02/14/byzantine_generals_problem/3_loyal.png"><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/3_loyal.png" alt="img" style="zoom:50%;" /></a></p><p>图2. 三个将军均为忠诚的场景</p><p>当三个将军中存在一个叛徒时, 将可能扰乱正常的作战计划. 图3展示了General C为叛徒的一种场景, 他给General A和General B发送了不同的消息, 在这种场景下General A通过投票得到进攻:撤退&#x3D;1:2, 最终将作出撤退的行动计划; General B通过投票得到进攻:撤退&#x3D;2:1, 最终将作出进攻的行动计划. 结果只有General B发起了进攻并战败.</p><p><a href="https://liebing.org.cn/2020/02/14/byzantine_generals_problem/1_traitors.png"><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/1_traitors.png" alt="img" style="zoom:50%;" /></a></p><p>图3. 二忠一叛的场景</p><p>事实上, 对于三个将军中存在一个叛徒的场景, 想要总能达到一致的行动方案是不可能的. 详细的证明可参看Leslie Lamport的论文. 此外, 论文中给出了一个更加普适的结论: 如果存在<em>m</em>个叛将, 那么至少需要<em>3m+1</em>个将军, 才能最终达到一致的行动方案.</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>Leslie Lamport在论文中给出了两种拜占庭将军问题的解决方案, 即口信消息型解决方案(A solution with oral message)和签名消息型解决方案(A solution with signed message).</p><h3 id="口信消息型解决方案"><a href="#口信消息型解决方案" class="headerlink" title="口信消息型解决方案"></a>口信消息型解决方案</h3><p>首先, 对于口信消息(Oral message)的定义如下:</p><ul><li>A1. 任何已经发送的消息都将被正确传达;</li><li>A2. 消息的接收者知道是谁发送了消息;</li><li>A3. 消息的缺席可以被检测.</li></ul><p>基于口信消息的定义, 我们可以知道, 口信消息不能被篡改但是可以被伪造。基于对图3场景的推导, 我们知道存在一个叛将时, 必须再增加3个忠将才能达到最终的行动一致。为加深理解, 我们将利用3个忠将1个叛将的场景对口信消息型解决方案进行推导。在口信消息型解决方案中, 首先发送消息的将军称为指挥官, 其余将军称为副官。对于3忠1叛的场景需要进行两轮作战信息协商, 如果没有收到作战信息那么默认撤退。图4是指挥官为忠将的场景, 在第一轮作战信息协商中, 指挥官向3位副官发送了进攻的消息; 在第二轮中, 三位副官再次进行作战信息协商, 由于General A, B为忠将, 因此他们根据指挥官的消息向另外两位副官发送了进攻的消息, 而General C为叛将, 为了扰乱作战计划, 他向另外两位副官发送了撤退的消息。最终Commanding General, General A和B达成了一致的进攻计划, 可以取得胜利。</p><p><a href="https://liebing.org.cn/2020/02/14/byzantine_generals_problem/loyal_commander.png"><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/loyal_commander.png" alt="img" style="zoom:50%;" /></a></p><p>图4. 指挥官为忠将的场景</p><p>图5是指挥官为叛将的场景, 在第一轮作战信息协商中, 指挥官向General A, B发送了撤退的消息, 但是为了扰乱General C的决定向其发送了进攻的消息. 在第二轮中, 由于所有副官均为忠将, 因此都将来自指挥官的消息正确地发送给其余两位副官. 最终所有忠将都能达成一致撤退的计划.</p><p><a href="https://liebing.org.cn/2020/02/14/byzantine_generals_problem/traitor_commander.png"><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/traitor_commander.png" alt="img" style="zoom:50%;" /></a></p><p>图5. 指挥官为叛将的场景</p><p>如上所述, 对于口信消息型拜占庭将军问题, 如果叛将人数为<em>m</em>, 将军人数不少于<em>3m+1</em>, 那么最终能达成一致的行动计划. <strong>值的注意的是</strong>, 在这个算法中, 叛将人数<em>m</em>是已知的, 且叛将人数<em>m</em>决定了递归的次数, 即叛将数<em>m</em>决定了进行作战信息协商的轮数, 如果存在<em>m</em>个叛将, 则需要进行<em>m+1</em>轮作战信息协商. 这也是上述存在1个叛将时需要进行两轮作战信息协商的原因.</p><h3 id="签名消息型解决方案"><a href="#签名消息型解决方案" class="headerlink" title="签名消息型解决方案"></a>签名消息型解决方案</h3><p>同样, 对签名消息的定义是在口信消息定义的基础上增加了如下两条:</p><ul><li>A4. 忠诚将军的签名无法伪造，而且对他签名消息的内容进行任何更改都会被发现;</li><li>A5. 任何人都能验证将军签名的真伪.<br>基于签名消息的定义, 我们可以知道, 签名消息无法被伪造或者篡改. 为了深入理解签名消息型解决方案, 我们同样以3三将军问题为例进行推导. 图6是忠将率先发起作战协商的场景, General A率先向General B, C发送了进攻消息, 一旦叛将General C篡改了来自General A的消息, 那么General B将将发现作战信息被General C篡改, General B将执行General A发送的消息.</li></ul><p><a href="https://liebing.org.cn/2020/02/14/byzantine_generals_problem/signed_1.png"><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/signed_1.png" alt="img" style="zoom:50%;" /></a></p><p>图6. 忠将率先发起作战协商</p><p>图7是叛将率先发起作战协商的场景, 叛将General C率先发送了误导的作战信息, 那么General A, B将发现General C发送的作战信息不一致, 因此判定其为叛将. 可对其进行处理后再进行作战信息协商.</p><p><a href="https://liebing.org.cn/2020/02/14/byzantine_generals_problem/signed_2.png"><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/signed_2.png" alt="img" style="zoom:50%;" /></a></p><p>图7. 叛将率先发起作战协商</p><p>签名消息型解决方案可以处理任何数量叛将的场景。</p><h2 id="论文简介"><a href="#论文简介" class="headerlink" title="论文简介"></a>论文简介</h2><p>Leslie Lamport等人的论文<em>‘The Byzantine Generals Problem’</em>的提纲如下:</p><ul><li>1.Introduction: 介绍了拜占庭将军问题;</li><li>2.Impossibility Results: 通过反正法证明了, 三将军问题对于口信消息是无解的;</li><li>3.A solution with oral message: 介绍了口信消息型拜占庭将军问题的解决方案;</li><li>4.A solution with signed message: 介绍了签名消息型拜占庭将军问题的解决方案;</li><li>5.Missing communication paths: 讲述了在通信小时情况下的拜占庭将军问题;</li><li>6.Reliable systems: 讲述了如何通过拜占庭将军问题构建可靠的系统;</li><li>7.Conclution: 总结.</li></ul><h2 id="总-结"><a href="#总-结" class="headerlink" title="总 结"></a>总 结</h2><p>在分布式系统领域, 拜占庭将军问题中的角色与计算机世界的对应关系如下:</p><ul><li>将军, 对应计算机节点;</li><li>忠诚的将军, 对应运行良好的计算机节点;</li><li>叛变的将军, 被非法控制的计算机节点;</li><li>信使被杀, 通信故障使得消息丢失;</li><li>信使被间谍替换, 通信被攻击, 攻击者篡改或伪造信息.</li></ul><p>如上文所述, 拜占庭将军问题提供了对<strong>分布式共识问题</strong>的一种情景化描述, 是分布式系统领域最复杂的模型. 此外, 它也为我们理解和分类现有的众多分布式一致性协议和算法提供了框架. 现有的分布式一致性协议和算法主要可分为两类:</p><ul><li>一类是<strong>故障容错算法(Crash Fault Tolerance, CFT)</strong>, 即非拜占庭容错算法, 解决的是分布式系统中存在故障, 但不存在恶意攻击的场景下的共识问题. 也就是说, 在该场景下可能存在消息丢失, 消息重复, 但不存在消息被篡改或伪造的场景. 一般用于局域网场景下的分布式系统, 如分布式数据库. 属于此类的常见算法有Paxos算法, Raft算法, ZAB协议等.</li><li>一类是<strong>拜占庭容错算法</strong>, 可以解决分布式系统中既存在故障, 又存在恶意攻击场景下的共识问题. 一般用于互联网场景下的分布式系统, 如在数字货币的区块链技术中. 属于此类的常见算法有PBFT算法, PoW算法.</li></ul><p><a href="https://liebing.org.cn/2020/02/14/byzantine_generals_problem/overview.png"><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/overview-167647877108237.png" alt="img"></a></p><h2 id="区块链解决方案"><a href="#区块链解决方案" class="headerlink" title="区块链解决方案"></a>区块链解决方案</h2><p>我们知道，区块链最强的地方就在于它的一致性（了解区块链原理，可移步另一篇博客 <a href="https://charlesliuyx.github.io/2017/09/24/%E4%B8%80%E6%96%87%E5%BC%84%E6%87%82%E5%8C%BA%E5%9D%97%E9%93%BE-%E4%BB%A5%E6%AF%94%E7%89%B9%E5%B8%81%E4%B8%BA%E4%BE%8B/">一文看懂区块链：一步一步发明比特币</a>），同时这正是拜占庭问题的核心</p><h3 id="案例拆解"><a href="#案例拆解" class="headerlink" title="案例拆解"></a>案例拆解</h3><p>我们先假设你已经完全了解了比特币区块链的运行原理，那么我们一步一步<strong>建立一个场景</strong>看一看区块链是如何解决拜占庭将军问题？</p><p>我们先假设信道一定是可靠的，传令兵死亡之类的事情我们不考虑，毕竟在一个非常复杂的网络中，还可以通过多条的方式连接任意两个节点，可靠性还是值得相信。<strong>主要破坏一致性的还是心怀不轨的【间谍】</strong>，或者总结为：如何防止【间谍】对整体决策（进攻还是撤退）进行破坏？</p><p>我们按照区块链模型构造一个下图所示的系统</p><p><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/BlockChain.png" alt="img"></p><p>每个将军本地都存储一份【记录】：记录所有将军的决定，比如“1：1”代表1号将军决定进攻</p><p>然后构造以下协议内容：</p><ul><li>使用数字签名保证身份可可信</li><li>所有将军<strong>参与挖矿</strong>，国王以保证战役胜利为缘由，出资，奖励每一个挖到新区块俩的将军</li><li>每一个将军当本地维护的<strong>最新确认【记录】</strong>中包含了所有1-9号将军的决定后，<strong>正式做出自己的决定</strong></li></ul><p>在这个案例中，抛弃了代币的设定，因为不存在交易行为，而是由国王出资（保证战争不被间谍影响，我认为国王应该愿意出这笔钱）。在拜占庭时期，因为没有网络，构造上述这样的系统，是完全不可能的。而现在网络链路速度，效率越来越高，让区块链解决一致性问题得以解决</p><p>这里就引出了现在区块链的核心问题：应用场景与代价博弈。你要解决的痛点，到底值不值得这样的花费呢？无论是算力消耗，还是资源消耗，亦或是类似于上述案例中的国王出资（区块链代币价值为负数？），都是一种【代价】。完全的信任是不存在的，只有当造假（走捷径获得利润）的成本远远高于得到的利润，才能取得信任（一致性）</p><p>必须强调，在传统的拜占庭问题构造的情景中，只能是一个例子，这个<strong>应用情景是完全没有没有必要使用区块链来解决的！</strong></p><h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><p>互联网技术的存在，让传输过程中，基本没有延迟（或说延迟很小可以基本忽略），<strong>解决了通讯延迟的问题</strong></p><p>区块链使用<strong>链型数据结构</strong> + <strong>算力互相制约</strong>使得<strong>作假的成本</strong>随着时间的加长<strong>呈指数上升</strong>，<strong>解决了一致性问题</strong>。当然非对称秘钥部分的密码学，解决了<strong>身份确认问题</strong></p><p>至少这个系统解决的问题不仅仅是金融领域，去中心化银行系统的问题所在，交易，其实只是其中很小的一部分</p><h2 id="区块链共识算法"><a href="#区块链共识算法" class="headerlink" title="区块链共识算法"></a>区块链共识算法</h2><p>因为技术还在不断发展，可能有其他的算法被建立，但是只要谈到共识这个问题，<strong>核心一定是【中心化】和【去中心化】的权衡（Trade-off）</strong>，而对应的就是效率，可以这么说，一致（信任）是需要成本的，这是本源法则，和线性向量空间的定义处在同一个层级</p><p>中本聪很厉害的地方就在于，之前的分布式一致性算法（PBFT）对大体谅节点系统的支持非常差，效率上来说，基本和无法实现是等等同的</p><p>下面的思维导图展示了现在基本的区块链共识算法总结</p><img src="/images/%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/CA.png" alt="img" style="zoom:50%;" /><h3 id="分布式一致性算法"><a href="#分布式一致性算法" class="headerlink" title="分布式一致性算法"></a>分布式一致性算法</h3><p>即这篇文章前面提到的<strong>拜占庭容错</strong>。在此基础上，发展出的Paxos是理论上的高效算法，很难实现。而Raft是由Google牵头开发一个Paxos理论实现版本</p>]]></content>
    
    
    <categories>
      
      <category>非关系数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>非关系数据库</tag>
      
      <tag>期末复习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OOAD期末复习——GRASP</title>
    <link href="/2023/02/12/ooad%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0-grasp/"/>
    <url>/2023/02/12/ooad%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0-grasp/</url>
    
    <content type="html"><![CDATA[<p><img src="/images/ooad%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0-grasp/OOAD.png" alt="OOAD"></p><p>GRASP-General Responsibility Assignment Software Patterns </p><p> 通用职责分配软件模式</p><h1 id="Creator—创建者"><a href="#Creator—创建者" class="headerlink" title="Creator—创建者"></a>Creator—创建者</h1><h2 id="Name："><a href="#Name：" class="headerlink" title="Name："></a>Name：</h2><p>Creator</p><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p>由谁来创建某个类的新实例（对象）</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>我们分配给B创建A的实例的职责，当且仅当下面条件中有一条成立：</p><ol><li>B contains or compositely aggregates A</li><li>B records A</li><li>B closely uses A</li><li>B has the initializing data for A that will be passed to A when it is created (B is an expert with respect to A)</li></ol><h2 id="When-not-to-use"><a href="#When-not-to-use" class="headerlink" title="When not to use"></a>When not to use</h2><ul><li>When wants to reuse existing instances for performance purposes (caching)</li><li>创建大批的对象——应该使用工厂模式</li><li>Delegate responsibility further down (委托)</li></ul><h2 id="Benefits"><a href="#Benefits" class="headerlink" title="Benefits"></a>Benefits</h2><ul><li>Existing  associations means created class is in any case visible to creator</li><li>High cohesion</li><li>does not increase coupling</li></ul><h1 id="Information-Expert—信息专家"><a href="#Information-Expert—信息专家" class="headerlink" title="Information Expert—信息专家"></a>Information Expert—信息专家</h1><h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a>problem</h2><p>What is a general principle of assigning responsibility to objects ?</p><h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><p>Assign responsibility to the class that has the information necessary to fulfill responsibility</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol><li>Clearly state the responsibility</li><li>Look in Design model for relevant classes</li><li>Else look in Domain model and create design classes</li></ol><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>封装性<ul><li>对象充分利用自身的信息</li><li>支持低耦合</li></ul></li><li>系统行为分布到不同的类<ul><li>支持高内聚</li></ul></li></ul><h1 id="Low-coupling低耦合"><a href="#Low-coupling低耦合" class="headerlink" title="Low coupling低耦合"></a>Low coupling低耦合</h1><h2 id="耦合的定义"><a href="#耦合的定义" class="headerlink" title="耦合的定义"></a>耦合的定义</h2><ul><li>耦合：一个元素与其他元素的联接，感知以及依赖程度的度量</li><li>比较<ul><li>内聚：cohesion：模块内的操作之间联系紧密的程度</li><li>耦合：coupling：两个子模块之间联系的程度</li></ul></li><li>高耦合带来的问题：<ul><li>牵一发而动全身<ul><li>A依赖B，A与B之间有耦合，一旦B变化了，A就会受到影响</li></ul></li><li>元素很难重用</li></ul></li></ul><h2 id="Problem-1"><a href="#Problem-1" class="headerlink" title="Problem"></a>Problem</h2><p>How to support low dependency,low change impact and increase reuse?</p><h2 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h2><p>Assign responsibility so coupling remains low </p><ul><li>use this principle to evaluate alternatives</li><li>All other things being equal prefer the low coupling solution</li></ul><p>Information expert support low coupling</p><h2 id="discuss"><a href="#discuss" class="headerlink" title="discuss"></a>discuss</h2><p>低耦合是所有设计决策时自然而然要考虑的原则</p><p>低耦合是一种评估原则，是设计师用来对设计方案进行评价的一种指标</p><p><img src="/images/ooad%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0-grasp/image-20230212224924436.png" alt="image-20230212224924436"></p><p>低耦合支持类的设计相对独立，减少了变化带来的相互影响</p><p>低耦合与其他的原则必须综合考虑</p><p>在继承关系中，子类与父类的耦合十分紧密，因此，能用组合的地方不要用继承</p><p>低耦合不具备可操作性</p><p>极端情况下，类之间没有耦合，不希望这种情况出现</p><p>类之间存在适度的耦合是正常的，必须的</p><p><img src="/images/ooad%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0-grasp/image-20230212225515363.png" alt="image-20230212225515363"></p><h1 id="Controller—控制器"><a href="#Controller—控制器" class="headerlink" title="Controller—控制器"></a>Controller—控制器</h1><h2 id="problem-1"><a href="#problem-1" class="headerlink" title="problem"></a>problem</h2><p>UI应该把捕捉到的系统操作发给领域层的哪个对象呢？</p><p>What first object beyond the UI layer receives and co-ordinates a system operation?</p><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><p>Assign responsibility to receive the system operations by an object which </p><ul><li>representing system &#x2F;subsystem &#x2F;device or</li><li>handling just this use case</li></ul><p>Assign responsivity to a class representing one of the following choices:</p><ul><li><p>Facade controller</p><p><img src="/images/ooad%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0-grasp/image-20230212232247080.png" alt="image-20230212232247080"></p></li><li><p>Use case or session controller</p><p><img src="/images/ooad%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0-grasp/image-20230212232303863.png" alt="image-20230212232303863"></p></li></ul><h2 id=""><a href="#" class="headerlink" title=""></a></h2><p><img src="/images/ooad%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0-grasp/image-20230212232446021.png" alt="image-20230212232446021"></p><p>什么时候用外观控制器，什么时候用会话控制器呢？</p><p><img src="/images/ooad%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0-grasp/image-20230212232633934.png" alt="image-20230212232633934"></p><p><img src="/images/ooad%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0-grasp/image-20230212232714481.png" alt="image-20230212232714481"></p><h2 id="控制器的优点"><a href="#控制器的优点" class="headerlink" title="控制器的优点"></a>控制器的优点</h2><ul><li>容易适应ui层的变化</li><li>领域层代码易于重用</li><li>有助于保证应用所需要的操作顺序</li><li>可以对系统的状态进行推理（ui层不保存系统状态）</li></ul><h2 id="bloated-controllers——臃肿的控制器"><a href="#bloated-controllers——臃肿的控制器" class="headerlink" title="bloated controllers——臃肿的控制器"></a>bloated controllers——臃肿的控制器</h2><p><img src="/images/ooad%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0-grasp/image-20230212233057251.png" alt="image-20230212233057251"></p><h1 id="high-Cohesion—高内聚"><a href="#high-Cohesion—高内聚" class="headerlink" title="high Cohesion—高内聚"></a>high Cohesion—高内聚</h1><h2 id="Problem-2"><a href="#Problem-2" class="headerlink" title="Problem"></a>Problem</h2><p>How to keep objects focused ,understandable and manageable ,and as a side effect support low coupling</p><h2 id="solution-1"><a href="#solution-1" class="headerlink" title="solution"></a>solution</h2><p>Assign responsibility so cohesion remains high</p><h2 id="usage"><a href="#usage" class="headerlink" title="usage"></a>usage</h2><ul><li>used as a evaluation tool</li><li>更多的是一种理念，没有具体的可操作原则</li></ul><h2 id="cohesion-defined"><a href="#cohesion-defined" class="headerlink" title="cohesion defined"></a>cohesion defined</h2><ul><li>衡量概念之间相关度的两个指标<ul><li>内聚：模块内元素之间联系紧密的程度，比如，一个类内部的操作之间</li><li>耦合：两个模块之间联系的强度</li></ul></li><li>内聚的最佳实践<ul><li>一个对象完成的功能不是太多</li><li>这些功能都是同一类别的</li><li>例如，教授的主要任务就是教学，研究员的主要任务就是科研</li></ul></li></ul><h2 id="类低内聚"><a href="#类低内聚" class="headerlink" title="类低内聚"></a>类低内聚</h2><h3 id="症状"><a href="#症状" class="headerlink" title="症状"></a>症状</h3><ul><li>做了太多相互无关的动作</li><li>做了太多工作</li></ul><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><ul><li>大粒度的抽象</li><li>做了太多本应该委托给其他类去做的工作</li></ul><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ul><li>难以理解</li><li>难以重用</li><li>难以维护</li><li>没有稳定的时刻，总是在修改(通常都会高耦合)</li></ul><h2 id="summary"><a href="#summary" class="headerlink" title="summary"></a>summary</h2><p>高内聚的类</p><ul><li>有较少数量的工作，操作的性质基本一致，不会做太多的事情</li><li>如果同类别的工作太多，则会定义新的类分担任务，相互间合作</li></ul><p>高内聚的类有许多优点:</p><ul><li>易于理解</li><li>易于维护</li><li>易于重用</li></ul><p>高内聚也是一种评估性原则，用于评估所有的设计决策是否合适</p><h1 id="Polymorphism—多态"><a href="#Polymorphism—多态" class="headerlink" title="Polymorphism—多态"></a>Polymorphism—多态</h1><h2 id="problem-2"><a href="#problem-2" class="headerlink" title="problem"></a>problem</h2><p>如何处理依据类型不同而有不同行为的一类需求</p><h2 id="solution-2"><a href="#solution-2" class="headerlink" title="solution"></a>solution</h2><p>使用多态操作为依据类型变化的行为进行职责分配</p><h2 id="corollary"><a href="#corollary" class="headerlink" title="corollary"></a>corollary</h2><ul><li>不要去测试对象的类型或条件逻辑，并以此选择相应的行为</li><li>即，不要使用条件逻辑，而是为不同的类定义相同名字的方法</li><li>不同的类实现了相同的接口，或者由一个共同的父类</li></ul><h1 id="Pure-Fabrication—纯虚构"><a href="#Pure-Fabrication—纯虚构" class="headerlink" title="Pure Fabrication—纯虚构"></a>Pure Fabrication—纯虚构</h1><h2 id="problem-3"><a href="#problem-3" class="headerlink" title="problem"></a>problem</h2><p>依据一些原则获得的解决方案不合适的情况下，既不想违反低耦合，高内聚，也不想违反其他的原则，如何把职责分配给对象？</p><h2 id="solution-3"><a href="#solution-3" class="headerlink" title="solution"></a>solution</h2><p>把高度内聚的职责分配给虚构出来的一个类，这个类在领域模型中没有对应的概念</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p><img src="/images/ooad%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0-grasp/image-20230214093159054.png" alt="image-20230214093159054"></p><h2 id="纯虚构原则"><a href="#纯虚构原则" class="headerlink" title="纯虚构原则"></a>纯虚构原则</h2><ul><li>拎出来的系统可重用</li><li>符合高内聚低耦合</li><li>多数情况下是按照功能类定义新的类，所以是一种以功能为中心的对象</li><li>如果功能的相关性比较高的情况下可满足高内聚</li></ul><h1 id="Indirection—间接"><a href="#Indirection—间接" class="headerlink" title="Indirection—间接"></a>Indirection—间接</h1><h2 id="problem-4"><a href="#problem-4" class="headerlink" title="problem"></a>problem</h2><p>把职责分配到哪里可以避免两个或多个对象之间的直接耦合？如何解耦对象以保证较高的可重用性？</p><h2 id="solution-4"><a href="#solution-4" class="headerlink" title="solution"></a>solution</h2><p>把职责分配给一个中介对象，隔离对象与其他构件或者服务，使他们不产生直接耦合</p><p><img src="/images/ooad%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0-grasp/image-20230214094051691.png" alt="image-20230214094051691"></p><h1 id="protected-variations—隔离变化"><a href="#protected-variations—隔离变化" class="headerlink" title="protected variations—隔离变化"></a>protected variations—隔离变化</h1><h2 id="problem-5"><a href="#problem-5" class="headerlink" title="problem"></a>problem</h2><p>如何设计对象、系统和子系统，使得这些成分里面的变化因素，不稳定因素不会对系统造成意想不到的影响？</p><h2 id="solution-5"><a href="#solution-5" class="headerlink" title="solution"></a>solution</h2><p>标识出能够预计的变化点或不稳定点，职责分配的时候创建一个稳定的接口，把他们与系统的其余部分隔离开来</p><h2 id="需要注意的两种可能的变化点"><a href="#需要注意的两种可能的变化点" class="headerlink" title="需要注意的两种可能的变化点"></a>需要注意的两种可能的变化点</h2><ul><li>变化点：在当前系统或者需求中已经存在了</li><li>演化点：推测的类型变化可能发生在今后，但在当前的需求中</li></ul><h1 id="OCP—开-闭原则"><a href="#OCP—开-闭原则" class="headerlink" title="OCP—开-闭原则"></a>OCP—开-闭原则</h1><h2 id="设计变坏的前兆"><a href="#设计变坏的前兆" class="headerlink" title="设计变坏的前兆"></a>设计变坏的前兆</h2><ul><li>僵硬性<ul><li>难以更改代码</li><li>从管理角度，拒绝任何的变化成为一种制度</li></ul></li><li>易碎性<ul><li>即使是小小的改动也是会导致级联型的后果</li><li>代码在意想不到的地方终止</li></ul></li><li>固定性<ul><li>代码纠缠在一起根本不可能重用</li></ul></li><li>粘滞性<ul><li>宁愿重新编写也不愿意修改</li></ul></li></ul><h2 id="设计变坏的原因"><a href="#设计变坏的原因" class="headerlink" title="设计变坏的原因"></a>设计变坏的原因</h2><ul><li>需求不断在变化</li><li>设计的问题：依赖管理失衡</li></ul><h2 id="开-闭原则"><a href="#开-闭原则" class="headerlink" title="开-闭原则"></a>开-闭原则</h2><ul><li>软件系统应当允许功能扩展（即开放性）open for extension</li><li>但是不允许修改原有的代码（即关闭性）closed for modification</li></ul><p><img src="/images/ooad%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0-grasp/image-20230214095926134.png" alt="image-20230214095926134"></p><p><img src="/images/ooad%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0-grasp/image-20230214100008880.png" alt="image-20230214100008880"></p><p><img src="/images/ooad%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0-grasp/image-20230214100050522.png" alt="image-20230214100050522"></p><h2 id="ocp的启发"><a href="#ocp的启发" class="headerlink" title="ocp的启发"></a>ocp的启发</h2><ul><li>定义所有的对象、数据为私有的</li><li>不要使用全局变量</li></ul><h2 id="summary-1"><a href="#summary-1" class="headerlink" title="summary"></a>summary</h2><ul><li>ocp解决软件的僵硬性和易碎性</li><li>我们应当尝试设计永远不需要修改的模块</li><li>系统行为的扩展只需要增加新的代码，不能修改已有的代码</li><li>模块不允许修改已有的代码，而这种修改会影响客户端</li></ul><h1 id="能用组合的地方不要用继承"><a href="#能用组合的地方不要用继承" class="headerlink" title="能用组合的地方不要用继承"></a>能用组合的地方不要用继承</h1><h2 id="关于类的继承"><a href="#关于类的继承" class="headerlink" title="关于类的继承"></a>关于类的继承</h2><ul><li>可以使用继承，但设计师必须确信使用继承是很好的解决方案时才使用</li></ul><h2 id="组合的特点"><a href="#组合的特点" class="headerlink" title="组合的特点"></a>组合的特点</h2><p>对象组合</p><ul><li>没有打破封装性</li></ul><ol><li>对象组合是一种动态&#x2F;运行时绑定</li><li>在运行时切换对象引用，就可以改变行为</li><li>整体与部分之间只有接口边界关联，耦合较低<ul><li>对私有数据不存在“窥视与拨弄”</li><li>不存在大量无用代码一类的负担</li></ul></li><li>各部分的职责明确<ul><li>每个对象清晰地集中在少量的任务上</li><li>只要阅读了接口，就可以了解系统</li><li>容易独立测试<ul><li>使用得当，将导致更可靠的设计</li></ul></li><li>每个类依然苗条（高内聚）<ul><li>避免巨无霸这种反模式的现象，即一个类似乎完成了几乎全部的功能</li></ul></li><li>重用的几率大增</li></ul></li></ol><h1 id="操作契约"><a href="#操作契约" class="headerlink" title="操作契约"></a>操作契约</h1><h2 id="什么是操作契约"><a href="#什么是操作契约" class="headerlink" title="什么是操作契约"></a>什么是操作契约</h2><ul><li>a way to describe use cases in more detail</li><li>part of the Use Case Model</li></ul><h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><ul><li>operation：操作名称与参数</li><li>cross references：操作所属的用例</li><li>preconditions：前置条件</li><li>postconditions：当操作完成后，领域模型里面的对象应该保证的状态<ul><li>后置条件描述了领域对象状态的变化<ol><li>是否创建、删除了对象</li><li>对象间的关系是否发生变化</li><li>对象的属性是否发生变化</li></ol></li></ul></li></ul><p>操作契约比较细节地、精确地描述了一个操作应当承担的职责</p><p>在定义契约的过程中，经常触发对领域模型的修改</p><ul><li>记录新的概念类、属性</li><li>领域模型中新的关系</li></ul><h1 id="系统顺序图"><a href="#系统顺序图" class="headerlink" title="系统顺序图"></a>系统顺序图</h1><h2 id="系统顺序图与顺序图的区别"><a href="#系统顺序图与顺序图的区别" class="headerlink" title="系统顺序图与顺序图的区别"></a>系统顺序图与顺序图的区别</h2><ul><li>SSD：to emphasize to treat system as black boxes</li><li>SD: be used to illustrate the design of interacting software objects to fulfill work</li></ul><h1 id="面向对象分析方法—名词法"><a href="#面向对象分析方法—名词法" class="headerlink" title="面向对象分析方法—名词法"></a>面向对象分析方法—名词法</h1><h2 id="analysis-phase"><a href="#analysis-phase" class="headerlink" title="analysis phase"></a>analysis phase</h2><ul><li>系统规格说明，也称为逻辑结构，是开发人员眼中的系统</li><li>大的、复杂的系统的开发，有两种主要的分析方法：<ul><li>面向功能的分析——把系统划分为模块</li><li>面向对象分析——模块功能的实现</li></ul></li></ul><h2 id="面向对象分析的步骤"><a href="#面向对象分析的步骤" class="headerlink" title="面向对象分析的步骤"></a>面向对象分析的步骤</h2><ol><li>识别对象</li><li>组织对象</li><li>定义对象之间的关系</li><li>定义对象的操作 （设计阶段）</li><li>定义对象内部细节</li></ol><h2 id="三种面向对象分析的方法"><a href="#三种面向对象分析的方法" class="headerlink" title="三种面向对象分析的方法"></a>三种面向对象分析的方法</h2><ul><li>名词法——</li><li>分析模型——boundaries entities control</li><li>CRC——类、职责、协作</li></ul><p>目标：识别对象、定义对象之间的关系</p><h2 id="名词法"><a href="#名词法" class="headerlink" title="名词法"></a>名词法</h2><ul><li>重用或修改已有的模型</li><li>借助行业、公司内部法的“概念类列表”    Concept Category list        Check list</li><li>在需求描述中查询名词或名词短语</li></ul><p>面向对象分析与结构化分析之间的最大差异是：</p><p>前者根据对象划分系统，而后者根据功能</p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><ul><li>在问题领域的文本描述中，标识出名词和名词短语，把他们作为候选的概念类或属性</li><li>对发现的名词进行分析，辨别是合适的概念类吗，概念可以合并吗</li><li>定义概念类之间的关系</li><li>定义概念类的属性</li></ul><h1 id="分析模型法"><a href="#分析模型法" class="headerlink" title="分析模型法"></a>分析模型法</h1><p><img src="/images/ooad%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0-grasp/image-20230214125531667.png" alt="image-20230214125531667"></p><ul><li><p>实体类 entity</p><p>identifying entity objects</p><p>an entity  object models information that shows the state of a system </p></li><li><p>边界类 boundary</p><p>identitying interface objects</p><p>a boundary &#x2F; interface object models input and output operations that process them</p></li><li><p>控制类 control</p><p>identifying control objects</p><p>a control object models functionality &#x2F; operations regarding to validate and decide whether to process and pass information from the interface object to the entity object or the way around</p></li></ul><p><img src="/images/ooad%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0-grasp/image-20230214125835195.png" alt="image-20230214125835195"></p><h1 id="职责驱动的设计-responsibility-driven-design"><a href="#职责驱动的设计-responsibility-driven-design" class="headerlink" title="职责驱动的设计(responsibility driven design)"></a>职责驱动的设计(responsibility driven design)</h1>]]></content>
    
    
    <categories>
      
      <category>OOAD</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OOAD</tag>
      
      <tag>期末复习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OOAD期末复习——Gof设计模式</title>
    <link href="/2023/02/09/ooad%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/"/>
    <url>/2023/02/09/ooad%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="单实例模式SingleTon"><a href="#单实例模式SingleTon" class="headerlink" title="单实例模式SingleTon"></a>单实例模式SingleTon</h1><h2 id="单实例模式的key-points"><a href="#单实例模式的key-points" class="headerlink" title="单实例模式的key points"></a>单实例模式的key points</h2><p><img src="/images/ooad%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230209223325963.png" alt="image-20230209223325963"></p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol><li>定义一个公有的成员函数，创建并供客户获取该单实例</li><li>定义一个私有的构造函数</li><li>定义私有的静态成员变量</li></ol><img src="/images/ooad%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230209223517809.png" alt="image-20230209223517809" style="zoom:67%;" /><h2 id="单实例模式的类图"><a href="#单实例模式的类图" class="headerlink" title="单实例模式的类图"></a>单实例模式的类图</h2><img src="/images/ooad%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230209223625585.png" alt="image-20230209223625585" style="zoom:67%;" /><p>锁住某类的实例化功能，客户类只能使用某类自身实例化的唯一实例</p><h2 id="summary"><a href="#summary" class="headerlink" title="summary"></a>summary</h2><h3 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h3><ul><li>只能有一个实例</li><li>这个实例能够方便地被所有客户访问</li></ul><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><ul><li>定义私有的静态成员变量，保存单实例的引用</li><li>定义公有的getter函数</li><li>该类自己负责第一次使用时实例化对象</li><li>定义私有的构造函数</li><li>客户对象只能通过getter函数获得该单例</li></ul><h1 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h1><h2 id="Scenario"><a href="#Scenario" class="headerlink" title="Scenario"></a>Scenario</h2><p>You have an existing software system that you need to work a new vendor library , but the new vendor designed their interfaces differently than the lasted vendor</p><p><img src="/images/ooad%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230209171225139.png" alt="image-20230209171225139"></p><h2 id="What-to-do"><a href="#What-to-do" class="headerlink" title="What to do?"></a>What to do?</h2><p>Write  a class that adapts the new vendor interface into the one you’re expecting.</p><p><img src="/images/ooad%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230209171348426.png" alt="image-20230209171348426"></p><h2 id="一个例子，我需要鸭子，但是只有火鸡"><a href="#一个例子，我需要鸭子，但是只有火鸡" class="headerlink" title="一个例子，我需要鸭子，但是只有火鸡"></a>一个例子，我需要鸭子，但是只有火鸡</h2><p><img src="/images/ooad%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230209171809670.png" alt="image-20230209171809670"></p><p>方法就是用火鸡去实现鸭子，在方法中替代地实现鸭子的方法</p><h3 id="适配器模式的定义和类图"><a href="#适配器模式的定义和类图" class="headerlink" title="适配器模式的定义和类图"></a>适配器模式的定义和类图</h3><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>将一个类的接口转化成客户希望的另外一个接口，Adapter模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作</p><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><p><img src="/images/ooad%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230209173344870.png" alt="image-20230209173344870"></p><p>Client需要的是Adaptee这个类，但是不能匹配，而且Adaptee可能会变化，如果直接相联系，违反OCP原则。</p><p>于是我们在中间加了一个Adapter，其中的request()是Client所需要的，这个方法只做一个事情，就是让Adaptee去调用specificRequest()</p><p>注意Adapter和Adaptee之间是聚合关系，Adapter是整体，拥有Adaptee对象，图中的箭头只是表示可见性。</p><p>同时注意到Target，我们面向的是抽象而不是具体，当Adapter发生变化的时候，我们的Client是不需要修改的</p><h3 id="在这张类图中体现的oo设计原则："><a href="#在这张类图中体现的oo设计原则：" class="headerlink" title="在这张类图中体现的oo设计原则："></a>在这张类图中体现的oo设计原则：</h3><ul><li>对象组合：use of object combination，能用组合的地方不用继承</li><li>面向接口而不是面向实现</li></ul><h3 id="具体例子"><a href="#具体例子" class="headerlink" title="具体例子"></a>具体例子</h3><p> <img src="/images/ooad%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230209175854333.png" alt="image-20230209175854333"></p><h3 id="适配器模式的关键点"><a href="#适配器模式的关键点" class="headerlink" title="适配器模式的关键点"></a>适配器模式的关键点</h3><p><img src="/images/ooad%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230209180124556.png" alt="image-20230209180124556"></p><h3 id="实现细节：check-list"><a href="#实现细节：check-list" class="headerlink" title="实现细节：check list"></a>实现细节：check list</h3><ul><li>两个角色Identify the players<ul><li>Adaptee:The adapter adapts the interface of an Adaptee to match that of the Adapter’s target (the class it derives from)</li><li>Client:use the Adaptee as if it were a type of target</li></ul></li><li>表示客户需要用到的接口</li><li>设计一个包装器使得Adaptee满足客户的需要</li><li>adapter&#x2F;wrapper类里必须有一个adaptee class的对象负责工作</li><li>adapter&#x2F;wrapper负责 <strong>映射</strong>客户接口与adaptee的接口</li></ul><h3 id="summary-1"><a href="#summary-1" class="headerlink" title="summary"></a>summary</h3><p><img src="/images/ooad%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230209180747003.png" alt="image-20230209180747003"></p><h1 id="外观Facade模式"><a href="#外观Facade模式" class="headerlink" title="外观Facade模式"></a>外观Facade模式</h1><p>现有系统功能强大复杂，开发新系统需要用到其中的一部分，但又要增加新的一部分</p><h2 id="外观模式的关键点-key-features"><a href="#外观模式的关键点-key-features" class="headerlink" title="外观模式的关键点(key features)"></a>外观模式的关键点(key features)</h2><p><img src="/images/ooad%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230209181230957.png" alt="image-20230209181230957"></p><h2 id="外观模式的动机"><a href="#外观模式的动机" class="headerlink" title="外观模式的动机"></a>外观模式的动机</h2><ul><li>最小化通信minimize communication</li><li>最小化依赖minimize dependencies</li></ul><p><img src="/images/ooad%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230209181809260.png" alt="image-20230209181809260"></p><img src="/images/ooad%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230209181955719.png" alt="image-20230209181955719" style="zoom:67%;" /><p>这里有一个前台</p><h2 id="外观模式和适配器模式的比较"><a href="#外观模式和适配器模式的比较" class="headerlink" title="外观模式和适配器模式的比较"></a>外观模式和适配器模式的比较</h2><ul><li>外观定义了新的接口，适配器使用旧的接口</li><li>适配器使得两个不一致的接口协同工作，而不是定义一个新的</li><li>外观模式的本意是产生一个轻便的接口，适配器的本意是把现有接口转换一下</li><li>一个外观接口可能包装了多个现有系统的对象，也可能增加了一些新的功能，而适配器只是包装一个对象</li><li>多数情况下，外观是单实例的</li><li>GRASP原则的外观控制器，就是外观模式</li></ul><h2 id="外观模式的适用性"><a href="#外观模式的适用性" class="headerlink" title="外观模式的适用性"></a>外观模式的适用性</h2><ul><li>简化复杂系统的使用</li><li>在使用复杂系统的某个功能时，可以加入新功能</li><li>为客户软件提供一个接口，隐藏了现有系统的细节</li><li>使客户与现有系统之间减少耦合，增加独立性，可移植性</li><li>节约成本<ul><li>开发新的外观类的成本，要比每个人都去熟悉现有系统，了解如何使用现有系统的功能要节省许多</li></ul></li></ul><h1 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h1><p>当有许多不同的客户都对同一数据源感兴趣，对相同的数据有不同的处理方式，该如何解决？</p><h2 id="什么是观察者模式？"><a href="#什么是观察者模式？" class="headerlink" title="什么是观察者模式？"></a>什么是观察者模式？</h2><p>定义对象之间的一对多依赖关系，当一个对象改变状态时，所有依赖于它的对象都会自动获得感知</p><h2 id="观察者模式案例"><a href="#观察者模式案例" class="headerlink" title="观察者模式案例"></a>观察者模式案例</h2><p>观察者模式又称发布-订阅模式(publish &#x2F;Subscribe)，源-监听器(Source&#x2F;Listener)模式，模型-视图模式(Model&#x2F;View)</p><ul><li><p>Publisher&#x3D;&#x3D;Subject 主题</p></li><li><p>Subscribers&#x3D;&#x3D;Observers 观察者</p><p>观察者已经订阅了主题数据，当数据发生变化之后将会收到更新数据或更新通知</p><p><img src="/images/ooad%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230209211808695.png" alt="image-20230209211808695"></p></li></ul><h2 id="观察者模式的定义"><a href="#观察者模式的定义" class="headerlink" title="观察者模式的定义"></a>观察者模式的定义</h2><p>定义对象之间的一对多依赖关系，当一个对象改变状态时，所有依赖于它的对象都会获得感知</p><h2 id="观察者模式的类图"><a href="#观察者模式的类图" class="headerlink" title="观察者模式的类图"></a>观察者模式的类图</h2><p><img src="/images/ooad%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230209212212339.png" alt="image-20230209212212339"></p><p>OCP原则：open：功能扩展；close：修改源代码</p><p> <img src="/images/ooad%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230209213217893.png" alt="image-20230209213217893"></p><h3 id="具体代码"><a href="#具体代码" class="headerlink" title="具体代码"></a>具体代码</h3><p><img src="/images/ooad%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230209213345719.png" alt="image-20230209213345719"></p><p><img src="/images/ooad%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230209213505555.png" alt="image-20230209213505555"></p><ul><li>registerObservers函数是Observer调用的，将自己加进Subject中的list</li></ul><p><img src="/images/ooad%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230209214002252.png" alt="image-20230209214002252"></p><h2 id="观察者模式信息的推拉模式"><a href="#观察者模式信息的推拉模式" class="headerlink" title="观察者模式信息的推拉模式"></a>观察者模式信息的推拉模式</h2><h3 id="推模式"><a href="#推模式" class="headerlink" title="推模式"></a>推模式</h3><p>当通知消息来的时候，把所有相关消息都通过参数的形式“推给”观察者</p><ol><li>优点<ul><li>所有信息通过参数传递，直接，简单，观察者可以马上处理</li><li>观察者和被观察者没有一点联系，两者之间几乎没有耦合</li></ul></li><li>缺点<ul><li>所有信息强迫推给观察者，不管有用与否</li><li>如果想添加一个参数，那就需要修改所有观察者的接口函数</li></ul></li></ol><h3 id="拉模式"><a href="#拉模式" class="headerlink" title="拉模式"></a>拉模式</h3><p>当通知消息来的时候，通知的函数不带任何相关的信息，而是要观察者主动去被主题对象那里去“拉”信息</p><ol><li>优点<ul><li>可以主动去取自己感兴趣的信息</li><li>如要添加一个参数，无需修改观察者</li></ul></li><li>缺点<ul><li>观察者与被观察者有一定的联系</li></ul></li></ol><h2 id="如何应用观察者模式-check-list"><a href="#如何应用观察者模式-check-list" class="headerlink" title="如何应用观察者模式 check list"></a>如何应用观察者模式 check list</h2><ul><li>主题对象只与观察者基类有耦合</li><li>客户配置观察者的数量和类型</li><li>observers首先要知道Subject，然后把自己注册到Subject中</li><li>Subject保存所有注册过的Observer，当状态发生变化时，广播给所有的注册观察者</li><li>Subject可以采用push或pull的模式，与Observer交流信息</li></ul><h1 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h1><p>OO原则：Open-Closed Principle（OCP）原则</p><ul><li>open for extension-the behavior can be extended to meet new requirements</li><li>closed for Modification-the source code of the module is not allowed to change</li></ul><h2 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h2><h4 id="软件行业公理"><a href="#软件行业公理" class="headerlink" title="软件行业公理"></a>软件行业公理</h4><p>在软件项目中，唯一不变的事情就是变化</p><h4 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h4><p>拥抱（embrace）变化，让变化成为设计的一部分</p><p>标识变化点，把它们和系统其余部分隔离开</p><h2 id="利用接口的强大功能"><a href="#利用接口的强大功能" class="headerlink" title="利用接口的强大功能"></a>利用接口的强大功能</h2><p><img src="/images/ooad%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230209221252869.png" alt="image-20230209221252869"></p><p><img src="/images/ooad%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230209221444008.png" alt="image-20230209221444008"></p><p><img src="/images/ooad%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230209221649013.png" alt="image-20230209221649013"></p><p>能用组合的地方不要用继承</p><p><img src="/images/ooad%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230209221931938.png" alt="image-20230209221931938"></p><p><img src="/images/ooad%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230209222157356.png" alt="image-20230209222157356"></p><p>总的设计方案</p><p><img src="/images/ooad%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230209222324560.png" alt="image-20230209222324560"></p><p>行为重用：</p><p><img src="/images/ooad%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230209222447953.png" alt="image-20230209222447953"></p><h2 id="策略模式的定义"><a href="#策略模式的定义" class="headerlink" title="策略模式的定义"></a>策略模式的定义</h2><p>策略模式定义了算法族，分别封装起来，让他们之间可以互相替换，此模式让算法的变化独立于使用算法的客户</p><p><img src="/images/ooad%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230209222914351.png" alt="image-20230209222914351"></p><p><img src="/images/ooad%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230209223010577.png" alt="image-20230209223010577"></p><p>使得算法的变化和客户的选择之间没有耦合</p><h1 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h1><h2 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h2><h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><p>设计原则：Don’t program to an implementation,program to an interface(abstraction)</p><p>然而，当我们需要处理一个具体类的时候，例如需要new一个新的对象的时候，我们面向的就不是abstraction了</p><p>那么，我们能不能先定义一个不变的框架，当需要new一个新的对象的时候，新的类定义好之后，不修改这个框架就能直接用</p><p><img src="/images/ooad%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230209153017972.png" alt="image-20230209153017972"></p><p>上述一段代码违反了OCP原则。</p><h3 id="工厂模式准备"><a href="#工厂模式准备" class="headerlink" title="工厂模式准备"></a>工厂模式准备</h3><ul><li><p>principle：标识程序中那些多变的部分，并且把它们和稳定的部分隔离开来（GRASP：protected variation隔离变化）</p></li><li><p>那么，如何把软件系统中实例化具体类的所有场合与系统的其余部分隔离或封装起来呢？</p></li><li><p>一些矛盾：</p></li></ul><p>  <img src="/images/ooad%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230209153545341.png" alt="image-20230209153545341"></p><ul><li><p>那么如何解决这种矛盾呢？首先是可以采用面向对象的继承机制：</p><img src="/images/ooad%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230209153758889.png" alt="image-20230209153758889" style="zoom:67%;" /></li><li><p>那么哪些是可能的变化点呢？</p><p><img src="/images/ooad%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230209154137818.png" alt="image-20230209154137818"></p><p>那么我们可以将变化的这部分拎出来放到一个新的类中，当我们发现有一部分功能放在原来的位置不合适的时候，我们可以虚构一个类</p><p>同时考虑，当我们需要增加或减少新的披萨种类时，我们可能会这么做：</p><p><img src="/images/ooad%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230209154413935.png" alt="image-20230209154413935"></p><p>但这违反了OCP原则</p></li><li><p>那么我们可以隔离出哪一部分呢？</p><p>我们定义一个新的类SimplPizzaFactory，专门负责创建Pizza对象</p><p><img src="/images/ooad%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230209154619313.png" alt="image-20230209154619313"></p><p><img src="/images/ooad%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230209154813383.png" alt="image-20230209154813383"></p><p>那么工厂做的事情就是根据类型去创建和删除Pizza，这是从OrderPizza方法中抽取出来的功能</p><p><img src="/images/ooad%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230209155019660.png" alt="image-20230209155019660"></p></li><li><p>这种改进的设计方案有以下的优点：</p><ol><li>新方案，orderPizza（）变成了对象SimplePizzaFactory的客户端，当orderPizza()需要一份披萨时，它就要求SimplePizzaFactory生产一个披萨对象，这个对象已经实现了Pizza接口，因此它可以调用prepare(),bake()等方法。</li><li>SimplePizzaFactory可以服务多个客户，灵活性增加了</li><li>客户的代码再也不用关注具体的Pizza类型和制作细节</li><li><img src="/images/ooad%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230209155609497.png" alt="image-20230209155609497"></li><li>简单工厂模式模式不是真正意义上的工厂模式，但是工厂模式建立在它基础之上</li></ol><h2 id="工厂模式-1"><a href="#工厂模式-1" class="headerlink" title="工厂模式"></a>工厂模式</h2><p>如何设计一个方法，去实例化不同的对象，也可以实例化今后新开发的类，这样做不需要修改该方法的代码</p><h4 id="案例背景"><a href="#案例背景" class="headerlink" title="案例背景"></a>案例背景</h4><p>需求新变化：</p><p><img src="/images/ooad%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230209160351168.png" alt="image-20230209160351168"></p><p>我们需要的是一套机制、框架 a framework，把PizzaStore和Pizza的制作联系在一起，又允许一定的灵活性</p><h4 id="框架设计-a-framework"><a href="#框架设计-a-framework" class="headerlink" title="框架设计 a framework"></a>框架设计 a framework</h4><ul><li><p>我们需要一种机制，为PizzaStore本地化制作披萨的所有活动，同时又使分店自由加入本地风味</p></li><li><p><img src="/images/ooad%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230209161236604.png" alt="image-20230209161236604"></p></li><li><p><img src="/images/ooad%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230209161525710.png" alt="image-20230209161525710"></p></li><li><p>不同地方的客户有一个不同的concreteStore，然后用它去createPizza</p><p><img src="/images/ooad%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230209161828981.png" alt="image-20230209161828981"></p></li><li><p>把总店的createPizza下放到分店</p></li></ul><h4 id="工厂方法"><a href="#工厂方法" class="headerlink" title="工厂方法"></a>工厂方法</h4><p>A factory method handles object creation and encapsulates it in a subclass.This decouples the client code in  the superclass from the object creation code in the subclass</p><p><img src="/images/ooad%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230209163449262.png" alt="image-20230209163449262"></p><p><img src="/images/ooad%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230209163936694.png" alt="image-20230209163936694"></p><h4 id="工厂模式的定义"><a href="#工厂模式的定义" class="headerlink" title="工厂模式的定义"></a>工厂模式的定义</h4><p>工厂模式定义了一个创建产品对象的工厂接口，将实际创建工作推迟到子类中</p><p><img src="/images/ooad%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230209165107154.png" alt="image-20230209165107154"></p><h4 id="工厂模式的要点"><a href="#工厂模式的要点" class="headerlink" title="工厂模式的要点"></a>工厂模式的要点</h4><p><img src="/images/ooad%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230209165400344.png" alt="image-20230209165400344"></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>OOAD</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OOAD</tag>
      
      <tag>期末复习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法导论26-最大流</title>
    <link href="/2023/01/31/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA26-%E6%9C%80%E5%A4%A7%E6%B5%81/"/>
    <url>/2023/01/31/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA26-%E6%9C%80%E5%A4%A7%E6%B5%81/</url>
    
    <content type="html"><![CDATA[<h1 id="算法导论26-最大流"><a href="#算法导论26-最大流" class="headerlink" title="算法导论26-最大流"></a>算法导论26-最大流</h1><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>我们将流网络中每条有向边看作是物料的一个流通通道，流网络中的结点则是通道的连接点</p><p>除了源节点和终结点外，物料在其他结点上只是流过，并不积累或聚集</p><p>在最大流问题中，我们希望在不违反任何容量限制的条件下，计算出从源结点运送物料到汇点的最大速率</p><h2 id="26-1-流网络"><a href="#26-1-流网络" class="headerlink" title="26.1 流网络"></a>26.1 流网络</h2><h3 id="流网络和流"><a href="#流网络和流" class="headerlink" title="流网络和流"></a>流网络和流</h3><ol><li><p>流网络G&#x3D;（V,E）</p></li><li><p>每条边（u,v）$\in$E有一个非负的容量值c(u,v)&gt;&#x3D;0</p></li><li><p>如果边集合E包含一条边（u,v），则图中不存在反方向的边（v,u）</p></li><li><p>对于每个结点$v\in V$，流网络都包含一条路径$s\leadsto v \leadsto t$</p></li><li><p>设G&#x3D;（V,E）是一个流网络，其容量函数是c，设s为网络的源节点，t为汇点，G中的流是一个实值函数$f:V×V\rightarrow R$，满足下面两条性质：</p><ul><li><p>容量限制</p><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA26-%E6%9C%80%E5%A4%A7%E6%B5%81/image-20230131135224417.png" alt="image-20230131135224417"></p></li><li><p>流量守恒（流入&#x3D;流出）</p><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA26-%E6%9C%80%E5%A4%A7%E6%B5%81/image-20230131135233782.png" alt="image-20230131135233782"></p></li></ul></li><li><p>f（u,v）为从u到v的流，一个流f的值|f|定义如下：</p><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA26-%E6%9C%80%E5%A4%A7%E6%B5%81/image-20230131135451038.png" alt="image-20230131135451038"></p><p>即从源节点流出的总流量减去流入源节点的总流量</p></li><li><p>在最大流问题中，给定一个流网络G、一个源节点s、一个汇点t，我们希望找到值最大的一个流</p></li></ol><h3 id="流的一个例子"><a href="#流的一个例子" class="headerlink" title="流的一个例子"></a>流的一个例子</h3><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA26-%E6%9C%80%E5%A4%A7%E6%B5%81/image-20230131141233241.png" alt="image-20230131141233241"></p><ul><li><p>使用反平行边来模拟问题</p><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA26-%E6%9C%80%E5%A4%A7%E6%B5%81/image-20230131141432505.png" alt="image-20230131141432505"></p></li><li><p>具有多个源节点和多个汇点的网络</p><p>转换方法是加入一个超级源节点s，并且对于1，2，…，m，加入有向边(s，$s_i$)和容量c(s,$s_i$)&#x3D;∞.</p><p>我们同时创建一个新的超级汇点t，并且对于1，2，…，n，加入有向边($t_i$，t)和容量$c(t_i,t)&#x3D;∞$</p><p>单源节点s能够给原来的多个源节点$s_i$提供所需要的流量</p><p>而单汇点t则可以消费原来所有汇点$t_i$所消费的流量</p><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA26-%E6%9C%80%E5%A4%A7%E6%B5%81/image-20230131141632469.png" alt="image-20230131141632469"></p></li></ul><h2 id="26-2-Ford-Fulkerson方法（包含了几种运行时间各不相同的具体实现）"><a href="#26-2-Ford-Fulkerson方法（包含了几种运行时间各不相同的具体实现）" class="headerlink" title="26.2 Ford-Fulkerson方法（包含了几种运行时间各不相同的具体实现）"></a>26.2 Ford-Fulkerson方法（包含了几种运行时间各不相同的具体实现）</h2><h3 id="引言-x2F-基本方法"><a href="#引言-x2F-基本方法" class="headerlink" title="引言&#x2F;基本方法"></a>引言&#x2F;基本方法</h3><ul><li>在每一次迭代中，我们将图G的流值增加，方法就是：<em><strong>在一个关联的残存网络$G_f$中寻找一条增广路径</strong></em>。我们可以对增广路径上的边进行修改，从而修改流的值</li><li>虽然Ford-Fulkerson方法的每次迭代都增加流的值，但是对于G的一条特定边来说，其流量值可能增加也可能减少</li><li>对某些边的流进行缩减可能是必要的，以便让算法可以将更多的流从源节点发送到汇点</li><li>重复对流进行这一过程，直到残存网络中不再存在增广路径为止</li><li>最大流最小切割定理将说明在算法终结时，该算法将获得一个最大流</li></ul><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA26-%E6%9C%80%E5%A4%A7%E6%B5%81/image-20230131161137905.png" alt="image-20230131161137905"></p><h3 id="残存网络"><a href="#残存网络" class="headerlink" title="残存网络"></a>残存网络</h3><p>残存网络$G_f$由那些仍有空间对流量进行调整的边构成。</p><p>如果边（u，v）的残存容量$c_f(u,v)&#x3D;c(u,v)-f(u,v)$为正，则把该条边置于图$G_f$中</p><p>算法对流量进行操作的目标是增加总流量，因此可能涉及到对某些边流量的缩减</p><p>为了表示对一个正流量$f(u,v)$的缩减，我们将边(v,u)加入到图$G_f$中，并且将其残存容量设置为$c_f(v,u)&#x3D;f(u,v)$。</p><p>残存网络中的这些反向边允许算法将已经发送出来的流量发送回去</p><h4 id="定义残存容量："><a href="#定义残存容量：" class="headerlink" title="定义残存容量："></a>定义残存容量：</h4><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA26-%E6%9C%80%E5%A4%A7%E6%B5%81/image-20230131153810524.png" alt="image-20230131153810524"></p><h4 id="残存网络-1"><a href="#残存网络-1" class="headerlink" title="残存网络"></a>残存网络</h4><p>给定一个流网络G&#x3D;（V，E）和一个流f，则由f所诱导的图G的残存网络为$G_f$&#x3D;(V,$E_f$)：</p><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA26-%E6%9C%80%E5%A4%A7%E6%B5%81/image-20230131154215228.png" alt="image-20230131154215228"></p><p>其中$|E_f|&lt;&#x3D;2|E|$</p><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA26-%E6%9C%80%E5%A4%A7%E6%B5%81/image-20230131154554401.png" alt="image-20230131154554401"></p><h4 id="残存网络的流-f’-的定义"><a href="#残存网络的流-f’-的定义" class="headerlink" title="残存网络的流$f’$的定义"></a>残存网络的流$f’$的定义</h4><p>残存网络中的一个流给我们指出的是一个路线图：如何在原来的流网络中增加流。</p><p>如果f是G中的一个流，f’是对应残存网络$G_f$中的一个流，定义$f \uparrow f’$为流f’对流f的递增：</p><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA26-%E6%9C%80%E5%A4%A7%E6%B5%81/image-20230131154856094.png" alt="image-20230131154856094"></p><p>在残存网络中将流量发送到反向边上等同于在原来的网络中缩减流量，所以将(u,v)的流量增加了f’(u,v)，减少了f’(v,u)。</p><p>在残存网络中将流量推送回去称为<em><strong>抵消操作</strong></em></p><h4 id="引理26-1"><a href="#引理26-1" class="headerlink" title="引理26.1"></a>引理26.1</h4><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA26-%E6%9C%80%E5%A4%A7%E6%B5%81/image-20230131155701666.png" alt="image-20230131155701666"></p><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA26-%E6%9C%80%E5%A4%A7%E6%B5%81/image-20230131155713049.png" alt="image-20230131155713049"></p><h3 id="增广路径"><a href="#增广路径" class="headerlink" title="增广路径"></a>增广路径</h3><p><em><strong>增广路径</strong></em>p是残存网络$G_f$中一条从s到t的简单路径</p><p>对于一条 <strong>增广路径</strong>上的边（u，v），我们可以增加其流量的幅度最大为$c_f(u,v)$,而不会违反容量限制</p><h4 id="残存容量"><a href="#残存容量" class="headerlink" title="残存容量"></a>残存容量</h4><p>我们称一条增广路径p上能够为每条边增加的流量最大值为p的残存容量：</p><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA26-%E6%9C%80%E5%A4%A7%E6%B5%81/image-20230131160048348.png" alt="image-20230131160048348"></p><p>我们可以对p上每条边的流量增加$c_f(p)$个单位，而不会违反容量限制</p><h4 id="引理26-2"><a href="#引理26-2" class="headerlink" title="引理26.2"></a>引理26.2</h4><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA26-%E6%9C%80%E5%A4%A7%E6%B5%81/image-20230131160248030.png" alt="image-20230131160248030"></p><h4 id="推论26-3"><a href="#推论26-3" class="headerlink" title="推论26.3"></a>推论26.3</h4><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA26-%E6%9C%80%E5%A4%A7%E6%B5%81/image-20230131160342455.png" alt="image-20230131160342455"></p><h3 id="流网络的切割"><a href="#流网络的切割" class="headerlink" title="流网络的切割"></a>流网络的切割</h3><p>最大流最小切割定理告诉我们：一个流是最大流当且仅当其残存网络中不包含任何增广路径</p><h4 id="流网络中的切割概念"><a href="#流网络中的切割概念" class="headerlink" title="流网络中的切割概念"></a>流网络中的切割概念</h4><p>流网络G&#x3D;（V，E）中的一个切割（S，T）将结点集合V划分为S和T&#x3D;V-S两个集合，使得$s\in S,t \in T$。</p><p>若f是一个流，则定义横跨切割（S，T）的 <em><strong>净流量</strong></em> f(S,T)是：</p><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA26-%E6%9C%80%E5%A4%A7%E6%B5%81/image-20230131161939075.png" alt="image-20230131161939075"></p><p>切割（S，T）的 <em><strong>容量</strong></em>是：</p><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA26-%E6%9C%80%E5%A4%A7%E6%B5%81/image-20230131162000969.png" alt="image-20230131162000969"></p><p>一个网络的 <em><strong>最小切割</strong></em>是整个网络中容量最小的切割</p><h4 id="一个具体例子："><a href="#一个具体例子：" class="headerlink" title="一个具体例子："></a>一个具体例子：</h4><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA26-%E6%9C%80%E5%A4%A7%E6%B5%81/image-20230131162049282.png" alt="image-20230131162049282"></p><h4 id="引理26-4"><a href="#引理26-4" class="headerlink" title="引理26.4"></a>引理26.4</h4><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA26-%E6%9C%80%E5%A4%A7%E6%B5%81/image-20230131162143553.png" alt="image-20230131162143553"></p><h4 id="推论26-5"><a href="#推论26-5" class="headerlink" title="推论26.5"></a>推论26.5</h4><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA26-%E6%9C%80%E5%A4%A7%E6%B5%81/image-20230131162425155.png" alt="image-20230131162425155"></p><p>证明：</p><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA26-%E6%9C%80%E5%A4%A7%E6%B5%81/image-20230131162508750.png" alt="image-20230131162508750"></p><h4 id="定理26-6-最大流最小切割定理"><a href="#定理26-6-最大流最小切割定理" class="headerlink" title="定理26.6 最大流最小切割定理"></a>定理26.6 最大流最小切割定理</h4><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA26-%E6%9C%80%E5%A4%A7%E6%B5%81/image-20230131162641840.png" alt="image-20230131162641840"></p><h3 id="基本的Ford-Fulkerson算法"><a href="#基本的Ford-Fulkerson算法" class="headerlink" title="基本的Ford-Fulkerson算法"></a>基本的Ford-Fulkerson算法</h3><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA26-%E6%9C%80%E5%A4%A7%E6%B5%81/image-20230131162835163.png" alt="image-20230131162835163"></p><p>在该算法的每次迭代中，寻找某条增广路径p，然后使用p来对流f进行增加</p><p>我们以$f \uparrow f_p$来替换f，从而获得一个值为|f|+|$f_p$|的更大的流</p><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA26-%E6%9C%80%E5%A4%A7%E6%B5%81/image-20230131163045317.png" alt="image-20230131163045317"></p><p>使用26.2来计算残存容量$c_f(u,v)$</p><ul><li>算法3-8行的while循环重复在残存网络$G_f$中寻找一条增广路径p，然后使用残存容量$c_f(p)$来对路径p上的流f进行加增</li><li>路径p上的每条残存边要么是原来网络中的一条边，要么是原来网络中的边的反向边</li><li>算法6-8行针对每种情况对流进行相应的更新：<ol><li>如果残存边是原来网络中的一条边，则增加流量</li><li>如果不是，则减少流量</li></ol></li></ul><p>当不再有增广路径时，流f就是最大流</p><h4 id="一个例子："><a href="#一个例子：" class="headerlink" title="一个例子："></a>一个例子：</h4><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA26-%E6%9C%80%E5%A4%A7%E6%B5%81/image-20230131164021996.png" alt="image-20230131164021996"></p><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA26-%E6%9C%80%E5%A4%A7%E6%B5%81/image-20230131164031744.png" alt="image-20230131164031744"></p><h4 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h4><p>算法的运行时间取决于第3行<strong>如何寻找增广路径</strong>。</p><ul><li>如果使用广度优先搜索来寻找增广路径，算法的运行时间将是多项式数量级</li><li>如果用$f^*$表示转换后网络的一个最大流，则在FORD-FULKERSON算法的一个直接实现中，执行3-8行的while循环的次数最多为$|f^*|$次，因为流量值在每次迭代中最少增加一个单位</li><li>如果用来实现G&#x3D;（V,E）的数据结构是合理的，并且寻找一条增广路径的算法时间是线性的，则整个while循环是非常有效的</li><li>如果使用深度搜索或广度搜索，在一个残存网络中找到一条路径的时间应是$O(V+E’)&#x3D;O(E)$</li><li>while循环的每一遍执行所需的时间为$O(E)$</li><li>从而整个Ford-Fulkerson算法的运行时间为$O(E|f^*|)$</li><li><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA26-%E6%9C%80%E5%A4%A7%E6%B5%81/image-20230131165641936.png" alt="image-20230131165641936"></li></ul><h3 id="Edmonds-Karp算法"><a href="#Edmonds-Karp算法" class="headerlink" title="Edmonds-Karp算法"></a>Edmonds-Karp算法</h3><ul><li>我们可以通过在算法第3行寻找增广路径的操作中使用广度优先搜索俩改善Ford-Fulkerson算法</li><li>也就是说，我们在残存网络中选择的增广路径是一条从源节点s到汇点t的 <em><strong>最短路径</strong></em></li><li>我们称如此实现的Ford-Fulkerson方法为Edmonds-Karp算法</li><li>该算法的运行时间为$O(VE^2)$</li><li>使用$\delta_f(u,v)$来表示残存网络$G_f$中从u到v的最短路径距离</li></ul><h4 id="引理26-7"><a href="#引理26-7" class="headerlink" title="引理26.7"></a>引理26.7</h4><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA26-%E6%9C%80%E5%A4%A7%E6%B5%81/image-20230131170116456.png" alt="image-20230131170116456"></p><h4 id="定理26-8"><a href="#定理26-8" class="headerlink" title="定理26.8"></a>定理26.8</h4><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA26-%E6%9C%80%E5%A4%A7%E6%B5%81/image-20230131170138937.png" alt="image-20230131170138937"></p><p>由于在使用广度优先搜索寻找增广路径时，Ford-Fulkerson中的每次迭代可以在O(E)时间内实现，所以Edmonds-Karp算法的总运行时间为O（$VE^2$）</p><h2 id="26-3-最大二分匹配"><a href="#26-3-最大二分匹配" class="headerlink" title="26.3 最大二分匹配"></a>26.3 最大二分匹配</h2><p>一些组合问题可以很容易地表述为最大流问题</p><p>Ford-Fulserson算法可以在$O(VE)$时间内来解决G&#x3D;（V,E）的最大二分匹配问题</p><h4 id="最大二分匹配问题"><a href="#最大二分匹配问题" class="headerlink" title="最大二分匹配问题"></a>最大二分匹配问题</h4><h4 id="寻找最大二分匹配"><a href="#寻找最大二分匹配" class="headerlink" title="寻找最大二分匹配"></a>寻找最大二分匹配</h4><h4 id="引理26-9"><a href="#引理26-9" class="headerlink" title="引理26.9"></a>引理26.9</h4><h4 id="定理26-10-完整性定理"><a href="#定理26-10-完整性定理" class="headerlink" title="定理26.10 完整性定理"></a>定理26.10 完整性定理</h4><h4 id="推论26-11"><a href="#推论26-11" class="headerlink" title="推论26.11"></a>推论26.11</h4><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
    
    
    <categories>
      
      <category>算法导论</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法导论</tag>
      
      <tag>最大流</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法导论25-所有节点对的最短路径问题</title>
    <link href="/2023/01/27/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA25-%E6%89%80%E6%9C%89%E8%8A%82%E7%82%B9%E5%AF%B9%E7%9A%84%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98/"/>
    <url>/2023/01/27/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA25-%E6%89%80%E6%9C%89%E8%8A%82%E7%82%B9%E5%AF%B9%E7%9A%84%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="算法导论25-所有节点对的最短路径问题"><a href="#算法导论25-所有节点对的最短路径问题" class="headerlink" title="算法导论25-所有节点对的最短路径问题"></a>算法导论25-所有节点对的最短路径问题</h1><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>本章使用的多数算法使用邻接矩阵来表示图，算法的输入将是一个n*n的矩阵W，该矩阵代表的是一个有n个结点的有向图G&#x3D;（V,E）的边的权重，即W&#x3D;（$w_{ij}$）。其中：</p><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA25-%E6%89%80%E6%9C%89%E8%8A%82%E7%82%B9%E5%AF%B9%E7%9A%84%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98/image-20230127233752061.png" alt="image-20230127233752061"></p><p>算法的输出也是一个n*n的矩阵D&#x3D;($d_{ij}$)，其中$d_{ij}$表示的是从i到j的一条最短路径的权重，也就是说，如果用$\delta(i,j)$表示从i到j之间的最短路径权重，则在算法终结时有$d_{ij}&#x3D;\delta(i,j)$。</p><p>除此之外，我们还要计算 **<u>前驱节点矩阵$π&#x3D;π_{ij}$</u><strong>。其中$π_{ij}$在i&#x3D;j或从i到j不存在路径时为NIL，在其他情况下是从i到j的某条最短路径上</strong><u>结点j的前驱结点</u>**。由矩阵$π$的第i行所诱导的子图应当是一棵根节点为i的最短路径树。</p><p><strong><u>定义前驱子图：</u></strong></p><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA25-%E6%89%80%E6%9C%89%E8%8A%82%E7%82%B9%E5%AF%B9%E7%9A%84%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98/image-20230127234936210.png" alt="image-20230127234936210"></p><p>打印出从i到j的一条最短路径：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c">PRINT-ALL-PAIRS-SHORTEST-PATH(π,i,j)<br>    <span class="hljs-keyword">if</span> i==j<br>        print i<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> πij==NIL<br>        print <span class="hljs-string">&quot;no path from i to j exists&quot;</span><br>    <span class="hljs-keyword">else</span> PRINT-ALL-PAIRS-SHORTEST-PATH(π,i,πij)<br>        print j<br></code></pre></td></tr></table></figure><h2 id="25-1-最短路径和矩阵乘法"><a href="#25-1-最短路径和矩阵乘法" class="headerlink" title="25.1 最短路径和矩阵乘法"></a>25.1 最短路径和矩阵乘法</h2><h3 id="分析最优解的结构：最短路径的结构"><a href="#分析最优解的结构：最短路径的结构" class="headerlink" title="分析最优解的结构：最短路径的结构"></a>分析最优解的结构：最短路径的结构</h3><p>W&#x3D;($w_{ij}$)</p><p>考虑从i到j的一条最短路径p，假定p至多包含m条边。</p><ul><li>如果i&#x3D;j，则p的权重为0且不包含任何边</li><li>如果i≠j，则将路径p分解为i$\leadsto _{p’}  \ k \rightarrow j$，其中路径p’至多包含m-1条边。p’是从i到k的一条最短路径，因此</li></ul><p>$$<br>\delta(i,j)&#x3D;\delta(i,k)+w(k,j)<br>$$</p><h3 id="递归定义最优解的值：所有节点对最短路径问题的最优解"><a href="#递归定义最优解的值：所有节点对最短路径问题的最优解" class="headerlink" title="递归定义最优解的值：所有节点对最短路径问题的最优解"></a>递归定义最优解的值：所有节点对最短路径问题的最优解</h3><p>设$l_{ij}^{(m)}$是从i到j的至多包含m条边的任意路径的最小权重。当m&#x3D;0时，从i到j之间存在一条没有边的最短路径当且仅当i&#x3D;j。</p><p>因此：<img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA25-%E6%89%80%E6%9C%89%E8%8A%82%E7%82%B9%E5%AF%B9%E7%9A%84%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98/image-20230128001805200.png" alt="image-20230128001805200"></p><p>我们通过对j的所有可能前驱k进行检查来获取该值，因此递归定义：</p><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA25-%E6%89%80%E6%9C%89%E8%8A%82%E7%82%B9%E5%AF%B9%E7%9A%84%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98/image-20230128002006614.png" alt="image-20230128002006614"></p><p>真正的最短路径权重$\delta(i,j)$是多少呢？</p><p>从结点i到结点j的由多于n-1条边构成的路径不可能有比从i到j的最短路径权重更小的权重。因此，真正的最短路径权重可以由下面的公式给出：</p><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA25-%E6%89%80%E6%9C%89%E8%8A%82%E7%82%B9%E5%AF%B9%E7%9A%84%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98/image-20230128003045608.png" alt="image-20230128003045608"></p><h3 id="自底向上计算最优解的值：自底向上计算最短路径权重"><a href="#自底向上计算最优解的值：自底向上计算最短路径权重" class="headerlink" title="自底向上计算最优解的值：自底向上计算最短路径权重"></a>自底向上计算最优解的值：自底向上计算最短路径权重</h3><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA25-%E6%89%80%E6%9C%89%E8%8A%82%E7%82%B9%E5%AF%B9%E7%9A%84%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98/image-20230128004028151.png" alt="image-20230128004028151"></p><p>下列伪代码可以在给定W和$L^{(m-1)}$的情况下，计算出$L^{(m)}$。也就是说，该伪代码将最近计算出的最短路径扩展了一条边：</p><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA25-%E6%89%80%E6%9C%89%E8%8A%82%E7%82%B9%E5%AF%B9%E7%9A%84%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98/image-20230128004147976.png" alt="image-20230128004147976"></p><p>该算法的运行时间为$\theta(n^3)$。</p><p>该算法与矩阵乘法的关系：</p><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA25-%E6%89%80%E6%9C%89%E8%8A%82%E7%82%B9%E5%AF%B9%E7%9A%84%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98/image-20230128004748075.png" alt="image-20230128004748075"></p><p>回到所有结点对最短路径问题，我们通过对最短路径一条边一条边地扩展来计算最短路径权重。设A*B表示由算法EXTENDED-SHORTEST-PATHS(A,B)所返回<img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA25-%E6%89%80%E6%9C%89%E8%8A%82%E7%82%B9%E5%AF%B9%E7%9A%84%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98/image-20230128005058561.png" alt="image-20230128005058561">矩阵“乘积”，我们可以计算出下面由n-1个矩阵所构成的矩阵序列：</p><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA25-%E6%89%80%E6%9C%89%E8%8A%82%E7%82%B9%E5%AF%B9%E7%9A%84%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98/image-20230128005148684.png" alt="image-20230128005148684"></p><p>如上所述，矩阵$L^{(n-1)}&#x3D;W^{n-1}$包含的是最短路径权重。下面伪代码在$\theta(n^4)$时间内计算出该矩阵序列：</p><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA25-%E6%89%80%E6%9C%89%E8%8A%82%E7%82%B9%E5%AF%B9%E7%9A%84%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98/image-20230128005339787.png" alt="image-20230128005339787"></p><p>具体实例：</p><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA25-%E6%89%80%E6%9C%89%E8%8A%82%E7%82%B9%E5%AF%B9%E7%9A%84%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98/image-20230128005444173.png" alt="image-20230128005444173"></p><h3 id="改进算法的运行时间"><a href="#改进算法的运行时间" class="headerlink" title="改进算法的运行时间"></a>改进算法的运行时间</h3><p>可以仅用$\lceil lg(n-1)\rceil$个矩阵乘积来计算矩阵$L^{(n-1)}$。我们需要的只是矩阵$L^{(N-1)}$，而不是所有的$L^{(m)}$。</p><p>计算的方法如下：</p><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA25-%E6%89%80%E6%9C%89%E8%8A%82%E7%82%B9%E5%AF%B9%E7%9A%84%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98/image-20230128005855328.png" alt="image-20230128005855328"></p><p>下面使用 **<u>重复平方</u>**技术来计算上述矩阵序列：</p><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA25-%E6%89%80%E6%9C%89%E8%8A%82%E7%82%B9%E5%AF%B9%E7%9A%84%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98/image-20230128005953851.png" alt="image-20230128005953851"></p><h4 id="算法的运行时间："><a href="#算法的运行时间：" class="headerlink" title="算法的运行时间："></a>算法的运行时间：</h4><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA25-%E6%89%80%E6%9C%89%E8%8A%82%E7%82%B9%E5%AF%B9%E7%9A%84%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98/image-20230128010049847.png" alt="image-20230128010049847"></p><h2 id="25-2-Floyd-Warshall算法"><a href="#25-2-Floyd-Warshall算法" class="headerlink" title="25.2 Floyd-Warshall算法"></a>25.2 Floyd-Warshall算法</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>我们使用一种不同的动态规划方式来解决所有结点对最短路径问题。Floyd-Warshall算法的运行时间为$\theta(V^3)$。</p><p>负权重的边可以存在，但是不能存在负权重的环路。</p><p>我们仍按照动态规划的思路阐述算法。</p><h3 id="最短路径的结构"><a href="#最短路径的结构" class="headerlink" title="最短路径的结构"></a>最短路径的结构</h3><p>Floyd-Warshall算法考虑的是一条最短路径上的中间结点。</p><p>Floyd-Warshall算法依赖于以下几点考虑：</p><ul><li>考虑从i到j的所有中间结点均取自集合{1,2,3,…,k}的路径，设<strong>p是其中权重最小的简单路径</strong></li><li>Floyd-Warshall算法利用了p和 从i到j之间中间节间均取自集合{1,2,3,..,k-1}的最短路径之间的关系</li><li>该关系依赖于<b><u>k是否是p上的一个中间结点</u></b></li></ul><ol><li><p>如果k<strong>不是</strong>p上的中间结点，则路径p上所有的中间结点都属于集合{1,2，…，k-1}。因此，<strong>从i到j的中间结点取自{1,2,…,k-1}的一条最短路径也是从i到j的中间结点取自{1,2,…,k}的一条最短路径</strong></p></li><li><p>如果k<strong>是</strong>p上的中间结点，则将路径p分为两部分:$i \leadsto_{p_1}k \leadsto_{p_2}j$。</p><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA25-%E6%89%80%E6%9C%89%E8%8A%82%E7%82%B9%E5%AF%B9%E7%9A%84%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98/image-20230128131252336.png" alt="image-20230128131252336"></p><p>路径p1上的所有中间结点都属于集合{1,2,…,k-1}，因此：</p><ul><li>p1是从<strong>i到k</strong>的中间结点全部取自{1,2,…,k-1}的一条最短路径</li><li>p1是从<strong>k到j</strong>的中间结点全部取自{1,2,…,k-1}的一条最短路径</li></ul></li></ol><h3 id="所有结点对最短路径问题的一个递归解"><a href="#所有结点对最短路径问题的一个递归解" class="headerlink" title="所有结点对最短路径问题的一个递归解"></a>所有结点对最短路径问题的一个递归解</h3><p>设$d_{ij}^{(k)}$为从i到j的所有中间结点全部取自集合{1,2,3,…,k}的一条最短路径的权重。</p><p>因此做出如下递归式：</p><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA25-%E6%89%80%E6%9C%89%E8%8A%82%E7%82%B9%E5%AF%B9%E7%9A%84%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98/image-20230128131652096.png" alt="image-20230128131652096"></p><h3 id="自底向上计算最短路径权重"><a href="#自底向上计算最短路径权重" class="headerlink" title="自底向上计算最短路径权重"></a>自底向上计算最短路径权重</h3><p>利用25.5递归式自底向上计算$d_{ij}^{(k)}$，算法输入为n×n矩阵W，算法返回最短路径权重矩阵$D^{(n)}$。</p><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA25-%E6%89%80%E6%9C%89%E8%8A%82%E7%82%B9%E5%AF%B9%E7%9A%84%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98/image-20230128132025927.png" alt="image-20230128132025927"></p><p>一个具体实例：</p><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA25-%E6%89%80%E6%9C%89%E8%8A%82%E7%82%B9%E5%AF%B9%E7%9A%84%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98/image-20230128133609479.png" alt="image-20230128133609479"></p><p>算法的运行时间为$\theta(n^3)$。</p><p>该代码也十分紧凑，没有使用精巧的数据结构，隐藏在$\theta$表述后面的常数比较小。因此及时对于输入规模为中等的图，Floyd-Warshall算法的效率也非常好。</p><h3 id="构建一条最短路径"><a href="#构建一条最短路径" class="headerlink" title="构建一条最短路径"></a>构建一条最短路径</h3><p>可以有多种办法构建最短路径：</p><ul><li><p>先计算最短路径权重矩阵D，然后从矩阵D来构造前驱矩阵π，并将该算法的运行时间限制在$O(n^3)$内。一旦给定了前驱矩阵π，PRINT-ALL-PAIRS-SHORTEST-PATH过程将打印出给定最短路径上的所有结点。</p></li><li><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA25-%E6%89%80%E6%9C%89%E8%8A%82%E7%82%B9%E5%AF%B9%E7%9A%84%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98/image-20230128134219605.png" alt="image-20230128134219605"></p></li><li><p>$π_{ij}^{(k)}$的一个递归公式：</p><ol><li><p>当k&#x3D;0时，从i到j的一条最短路径上没有中间结点，因此：</p><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA25-%E6%89%80%E6%9C%89%E8%8A%82%E7%82%B9%E5%AF%B9%E7%9A%84%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98/image-20230128134833809.png" alt="image-20230128134833809"></p></li><li><p>当k&gt;&#x3D;1时</p><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA25-%E6%89%80%E6%9C%89%E8%8A%82%E7%82%B9%E5%AF%B9%E7%9A%84%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98/image-20230128135931405.png" alt="image-20230128135931405"></p></li></ol><p>同时，$G_{π,i}$是一棵根节点为i的最短路径树</p></li></ul><h3 id="有向图的传递闭包"><a href="#有向图的传递闭包" class="headerlink" title="有向图的传递闭包"></a>有向图的传递闭包</h3><p>给定有向图G&#x3D;（V,E），结点集合为V&#x3D;{1,2,…,n}，我们希望判断对于所有的结点对i和j，图G是否包含一条从i到j的路径。</p><p>我们定义G的传递闭包为$G^*&#x3D;(V,E^*)$，其中$E^*$&#x3D;{(i,j):如果G中包含一条从i到j的路径}</p><ol><li>第一种方法：<ul><li>给E中的每条边赋予权重1，然后运行Floyd-Warshall算法。如果存在一条从i到j的路径，则有$D_{ij}$&lt;n。否则，$D_{ij}&#x3D;∞$</li><li>时间复杂度为$\theta(n^3)$</li></ul></li><li>第二种方法：<ul><li>时间复杂度也为$\theta (n^3)$，但是在实际场景中能够节省时间和空间</li><li><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA25-%E6%89%80%E6%9C%89%E8%8A%82%E7%82%B9%E5%AF%B9%E7%9A%84%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98/image-20230128140938861.png" alt="image-20230128140938861"></li><li>与Floyd-Warshall算法一样，我们以k递增的次序来计算矩阵$T^{(k)}&#x3D;(t_{ij}^{(k)})$</li><li><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA25-%E6%89%80%E6%9C%89%E8%8A%82%E7%82%B9%E5%AF%B9%E7%9A%84%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98/image-20230128141059602.png" alt="image-20230128141059602"></li><li>一个具体实例：</li><li><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA25-%E6%89%80%E6%9C%89%E8%8A%82%E7%82%B9%E5%AF%B9%E7%9A%84%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98/image-20230128141118864.png" alt="image-20230128141118864"></li><li>在某些计算机上，对单个位值进行的逻辑操作比对数据整数字的算数操作要快。</li><li>而且，因为直接的传递闭包算法仅使用布尔值，而不是整数值，其空间需求比Floyd-Warshall算法的空间需求要小一个数量级，这个数量级就是计算机存储里的一个字的规模。</li></ul></li></ol><h2 id="25-3-用于稀疏图的Johnson算法"><a href="#25-3-用于稀疏图的Johnson算法" class="headerlink" title="25.3 用于稀疏图的Johnson算法"></a>25.3 用于稀疏图的Johnson算法</h2><h3 id="引言-1"><a href="#引言-1" class="headerlink" title="引言"></a>引言</h3><h3 id="重新赋予权重来维持最短路径"><a href="#重新赋予权重来维持最短路径" class="headerlink" title="重新赋予权重来维持最短路径"></a>重新赋予权重来维持最短路径</h3><h3 id="通过重新赋值来生成非负权重"><a href="#通过重新赋值来生成非负权重" class="headerlink" title="通过重新赋值来生成非负权重"></a>通过重新赋值来生成非负权重</h3><h3 id="计算所有结点对之间的最短路径"><a href="#计算所有结点对之间的最短路径" class="headerlink" title="计算所有结点对之间的最短路径"></a>计算所有结点对之间的最短路径</h3>]]></content>
    
    
    <categories>
      
      <category>算法导论</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法导论</tag>
      
      <tag>单源最短路径问题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法导论23-最小生成树-期末复习</title>
    <link href="/2023/01/26/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA23-%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91-%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/"/>
    <url>/2023/01/26/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA23-%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91-%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="算法导论23-最小生成树-期末复习"><a href="#算法导论23-最小生成树-期末复习" class="headerlink" title="算法导论23-最小生成树-期末复习"></a>算法导论23-最小生成树-期末复习</h1><h2 id="什么是最小生成树问题？"><a href="#什么是最小生成树问题？" class="headerlink" title="什么是最小生成树问题？"></a>什么是最小生成树问题？</h2><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA23-%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91-%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230126155528787.png" alt="image-20230126155528787"></p><p>对于G&#x3D;(V,E)，对于每条边(u,v)$\in$E,我们为其赋予权重w(u,v)作为连接u和v的代价。我们希望找到一个无环子集T$\subseteq$E，既能将所有的结点连接，有具有最小的权重，即<img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA23-%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91-%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230126155743714.png" alt="image-20230126155743714">的值最小，T必然是一棵树，我们称这样的树为生成树，因为它是由G生成的，我们称求取生成树的问题为最小生成树问题。</p><p>对于最小生成树来说，某些贪心策略可以找到一颗权重最小的生成树。</p><h2 id="23-1-最小生成树的形成"><a href="#23-1-最小生成树的形成" class="headerlink" title="23.1 最小生成树的形成"></a>23.1 最小生成树的形成</h2><h5 id="一个贪心策略："><a href="#一个贪心策略：" class="headerlink" title="一个贪心策略："></a>一个贪心策略：</h5><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA23-%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91-%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230126160126474.png" alt="image-20230126160126474"></p><p>在每一步选择一条边（u,v），将其加入到集合A中，使得A不违反循环不变式，这样一条边（u,v）叫做 **<u>安全边</u>**。</p><h5 id="循环不变式："><a href="#循环不变式：" class="headerlink" title="循环不变式："></a>循环不变式：</h5><p><strong>在每遍循环之前，A是某棵最小生成树的一个子集</strong></p><p>这里的“每一步都选择一条安全边”就是使用贪心策略的一种思想，每一步都选择当时看起来最佳的选择。</p><p>接下来的两个算法都是描述如何 “最佳”地找到这样一条safe edge。</p><h3 id="一些定义"><a href="#一些定义" class="headerlink" title="一些定义"></a>一些定义</h3><ul><li><h5 id="切割"><a href="#切割" class="headerlink" title="切割"></a>切割</h5><p>无向图G&#x3D;（V,E）的一个切割（S，V-S）是集合V 的一个划分</p></li><li><h5 id="横跨"><a href="#横跨" class="headerlink" title="横跨"></a>横跨</h5><p>如果一条边（u,v）$\in$E的一个端点位于S，另一个端点位于V-S，则称该条边横跨切割（S，V-S）</p></li><li><h5 id="尊重"><a href="#尊重" class="headerlink" title="尊重"></a>尊重</h5><p>如果集合A中不存在横跨该切割的边，则称该切割尊重集合A</p></li><li><h5 id="轻量级边"><a href="#轻量级边" class="headerlink" title="轻量级边"></a>轻量级边</h5><p>在横跨一个切割的所有边中，权重最小的边成为轻量级边</p></li></ul><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA23-%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91-%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230126161321011.png" alt="image-20230126161321011"></p><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA23-%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91-%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230126161412659.png" alt="image-20230126161412659"></p><h5 id="如何辨认安全边？"><a href="#如何辨认安全边？" class="headerlink" title="如何辨认安全边？"></a>如何辨认安全边？</h5><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA23-%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91-%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230126161617168.png" alt="image-20230126161617168"></p><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA23-%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91-%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230126163053369.png" alt="image-20230126163053369"></p><h2 id="23-2-Kruskal算法和Prim算法"><a href="#23-2-Kruskal算法和Prim算法" class="headerlink" title="23.2 Kruskal算法和Prim算法"></a>23.2 Kruskal算法和Prim算法</h2><h3 id="Kruskal算法"><a href="#Kruskal算法" class="headerlink" title="Kruskal算法"></a>Kruskal算法</h3><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA23-%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91-%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230126164509620.png" alt="image-20230126164509620" style="zoom: 80%;" /><ul><li>算法1-3行将集合A初始化为空集，并创建|V|棵树，每棵树仅包含一个结点</li><li>算法第8行将两棵树中的结点进行合并</li><li>Kruskal算法的总运行时间为$O(ElgE)$，由于$|E|&lt;|V|^2$，则有$lg|E|&#x3D;O(lgV)$，因此该算法的总运行时间还可以表示为$O(ElgV)$。</li></ul><h3 id="Prim算法"><a href="#Prim算法" class="headerlink" title="Prim算法"></a>Prim算法</h3><p>Prim算法的工作原理与Dijkstra的工作原理类似，这个树从根节点r开始，一直长大到覆盖V中的所有结点为止，本策略也属于贪心策略，因为每一步加入的边都必须是使树的总权重增加量最小的边。</p><p>下图是一个示例：</p><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA23-%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91-%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230126171350076.png" alt="image-20230126171350076"></p><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA23-%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91-%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230126172738204.png" alt="image-20230126172738204"></p><h5 id="三个循环不变式："><a href="#三个循环不变式：" class="headerlink" title="三个循环不变式："></a>三个循环不变式：</h5><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA23-%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91-%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230126174645098.png" alt="image-20230126174645098"></p><h5 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h5><ul><li>算法第7行找出结点u$\in$Q，该结点是某条横跨切割（V-Q，Q）的轻量级边的一个端点。接着将结点u从队列Q中删除，并将其加入到集合V-Q中，也就是将边（u，u.π）加入到集合A中</li><li>算法8-11行的for循环将每个与u邻接但却不在树中的结点v的key和π属性进行更新，从而维持循环不变式的3成立</li></ul><h5 id="算法运行时间"><a href="#算法运行时间" class="headerlink" title="算法运行时间"></a>算法运行时间</h5><p>Prim算法的运行时间取决于最小优先队列Q的实现方式：</p><ul><li>将Q实现为一个二叉最小优先队列：O(VlgV+ElgV)&#x3D;O(ElgV)。与Kruskal算法的运行时间基本相同</li><li>将Q实现为斐波纳契堆：O(E+VlgV)</li></ul>]]></content>
    
    
    <categories>
      
      <category>算法导论</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法导论</tag>
      
      <tag>最小生成树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法导论17-摊还分析</title>
    <link href="/2023/01/23/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA17-%E6%91%8A%E8%BF%98%E5%88%86%E6%9E%90/"/>
    <url>/2023/01/23/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA17-%E6%91%8A%E8%BF%98%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1 id="算法导论17-摊还分析"><a href="#算法导论17-摊还分析" class="headerlink" title="算法导论17-摊还分析"></a>算法导论17-摊还分析</h1><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>在摊还分析中，我们求数据结构的一个操作序列中所执行的所有操作的平均时间，来评价操作的代价，摊还分析可以保证最坏情况下每个操作的平均性能。</p><h2 id="17-1-聚合分析"><a href="#17-1-聚合分析" class="headerlink" title="17.1 聚合分析"></a>17.1 聚合分析</h2><p>利用聚合分析，我们证明对所有n，一个n个操作的序列最坏情况下花费的时间为T(n)。</p><p>在最坏情况下，每个操作的平均代价或者摊还代价为T(n)&#x2F;n。</p><h3 id="栈操作"><a href="#栈操作" class="headerlink" title="栈操作"></a>栈操作</h3><p>使用聚合分析，我们考虑整个序列上的n个操作，包括若干个PUSH、POP、MULTIPOP，但它们总共的次数加起来是n个，我们将其当作一个整体进行聚合分析。</p><p>对任意的n值，任意一个由n个PUSH、POP和MULTIPOP组成的操作序列，最多花费O(n)时间，一个操作的平均时间为O(n)&#x2F;n&#x3D;O(1)。这个就是摊还代价，即每个操作的平均代价。</p><h3 id="二进制计数器递增"><a href="#二进制计数器递增" class="headerlink" title="二进制计数器递增"></a>二进制计数器递增</h3><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA17-%E6%91%8A%E8%BF%98%E5%88%86%E6%9E%90/image-20230126175409845.png" alt="image-20230126175409845"></p><p>对于n个INCREMENT操作组成的序列，最坏情况下不可能每次INCREMENT操作都翻转所有的二进制位，我们来计算一下：</p><p>对一个初值为0的计数器，在执行一个由n个INCREMENT操作组成的序列的过程中，A[i]会翻转$\lfloor n&#x2F;2^i \rfloor$次。对于i&gt;&#x3D;k，A[i]不存在也就不会发证翻转。</p><p>因此进行翻转的总次数为:</p><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA17-%E6%91%8A%E8%BF%98%E5%88%86%E6%9E%90/image-20230126175418907.png" alt="image-20230126175418907"></p><p>即O(n)，摊还代价为O(n)&#x2F;n&#x3D;O(1)。</p><h2 id="17-2-核算法"><a href="#17-2-核算法" class="headerlink" title="17.2 核算法"></a>17.2 核算法</h2><ul><li><p>摊还代价：我们赋予一个操作的费用</p></li><li><p>实际代价</p></li><li><p>信用(差额)：摊还代价-实际代价</p></li><li><p>我们将一个操作的摊还代价分解为其实际代价和信用(存入或用掉的)</p></li><li><p>用$c_i$表示第i个操作的真实代价，用$\overset{\wedge}{c_i}$表示其摊还代价，那么对于n个操作的序列要求：</p><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA17-%E6%91%8A%E8%BF%98%E5%88%86%E6%9E%90/image-20230126175426379.png" alt="image-20230126175426379"></p></li><li><p>那么数据结构中存储的信用等于摊还代价和实际代价的差值，其要保证为非负值，否则总摊还代价就不是实际代价的 <strong>上界</strong>了。</p></li></ul><h3 id="栈操作-1"><a href="#栈操作-1" class="headerlink" title="栈操作"></a>栈操作</h3><p>操作的实际代价为：</p><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA17-%E6%91%8A%E8%BF%98%E5%88%86%E6%9E%90/image-20230126175433525.png" alt="image-20230126175433525"></p><p>我们假设其摊还代价为：</p><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA17-%E6%91%8A%E8%BF%98%E5%88%86%E6%9E%90/image-20230126175442275.png" alt="image-20230126175442275"></p><p>每次PUSH操作都要支付1的代价，每次POP使用PUSH操作存储在栈中的信用来支付其实际代价。</p><p>我们考虑栈中的盘子数始终是非负的(要么PUSH几个，有一些信用，要么根本不PUSH)，因此可以保证其信用值也是非负的。因此：</p><p>对于任意n个PUSH、POP、MULTIPOP操作组成的序列，总摊还代价为总实际代价的上界。</p><p>总摊还代价为O(n)，因此总实际代价也是。</p><h3 id="二进制计数器器递增"><a href="#二进制计数器器递增" class="headerlink" title="二进制计数器器递增"></a>二进制计数器器递增</h3><ul><li>将翻转的位数作为操作的代价</li><li>对一次置位操作，设其摊还代价为2</li><li>用1作为其置位操作的实际代价，用剩下的1来预支付以后的复位操作</li><li>因此，对于复位操作使用该位上存储的1即可支付复位操作的代价</li><li>因为INCREMENT过程至多置位一次，因此其摊还代价最多为2次</li><li>因此任何时刻信用值都是非负的</li><li>所以，对于n个INCREMENT操作，总摊还代价为O(n)，为总实际代价的上界</li></ul><h2 id="17-3-势能法"><a href="#17-3-势能法" class="headerlink" title="17.3 势能法"></a>17.3 势能法</h2><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA17-%E6%91%8A%E8%BF%98%E5%88%86%E6%9E%90/image-20230126175452343.png" alt="image-20230126175452343"></p><p>因此，每个操作的摊还代价等于其实际代价加上第i个操作引起的势能变化。</p><p>因此，n个操作的总摊还代价为：</p><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA17-%E6%91%8A%E8%BF%98%E5%88%86%E6%9E%90/image-20230126175500847.png" alt="image-20230126175500847"></p><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA17-%E6%91%8A%E8%BF%98%E5%88%86%E6%9E%90/image-20230126175508780.png" alt="image-20230126175508780"></p><p>不同的势函数会产生不同的摊还代价</p><h3 id="栈操作-2"><a href="#栈操作-2" class="headerlink" title="栈操作"></a>栈操作</h3><p>我们将一个栈的势函数定义为其中的对象数量，由于栈中对象数目永远不可能为负，因此，第i步操作得到的栈$D_i$具有非负的势,即$\phi(D_i)&gt;&#x3D;0&#x3D;\phi(0)$，因此，用$\phi$定义的n个操作的总摊还代价为实际代价的一个上界。</p><p>计算不同栈操作的摊还代价：</p><ul><li><p>push操作</p><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA17-%E6%91%8A%E8%BF%98%E5%88%86%E6%9E%90/image-20230124204957605.png" alt="image-20230124204957605"></p></li><li><p>pop操作</p><p>0</p></li><li><p>multipop操作</p><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA17-%E6%91%8A%E8%BF%98%E5%88%86%E6%9E%90/image-20230124205039717.png" alt="image-20230124205039717"></p></li></ul><p>由以上可知，每个操作的摊还代价都是O(1)，因此，n个操作的总摊还代价为O(n)。</p><p>因为$\phi(D_i)&gt;&#x3D;\phi(D_0)$，所以n个操作的总摊还代价为总实际代价的上界。</p><p>因此，n个操作的最坏情况时间为O(n)。</p><h3 id="二进制计数器递增-1"><a href="#二进制计数器递增-1" class="headerlink" title="二进制计数器递增"></a>二进制计数器递增</h3><p>我们将计数器执行i次INCREMENT操作后的势定义为$b_i$——i次操作后计数器中1的个数。</p><p>计算INCREMENT操作的摊还代价：</p><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA17-%E6%91%8A%E8%BF%98%E5%88%86%E6%9E%90/image-20230125152532733.png" alt="image-20230125152532733"></p><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA17-%E6%91%8A%E8%BF%98%E5%88%86%E6%9E%90/image-20230125152542612.png" alt="image-20230125152542612"></p>]]></content>
    
    
    <categories>
      
      <category>算法导论</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法导论</tag>
      
      <tag>摊还分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法导论16-贪心算法</title>
    <link href="/2023/01/19/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA16-%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/"/>
    <url>/2023/01/19/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA16-%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="算法导论16-贪心算法"><a href="#算法导论16-贪心算法" class="headerlink" title="算法导论16-贪心算法"></a>算法导论16-贪心算法</h1><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>贪心算法总是做出局部最优的选择，寄希望这样的选择能导致全局最优解。</p><p>利用贪心策略设计的算法：</p><ul><li>最小生成树算法</li><li>单源最短路径的Dijkstra算法</li><li>集合覆盖问题的Chvatal贪心启发式算法</li></ul><h2 id="16-1-活动选择问题"><a href="#16-1-活动选择问题" class="headerlink" title="16.1 活动选择问题"></a>16.1 活动选择问题</h2><ul><li>调度竞争共享资源的多个活动的问题，目标是选出一个最大的互相兼容的活动集合，假设n个活动的集合$S&#x3D;${$a_1,a_2,…,a_n$}，这些活动使用同一个资源，而这个资源在某个时刻只能供一个活动所使用。</li><li>每个活动$a_i$都有一个开始时间$s_i$和一个结束时间$f_i$。</li><li>如果两个活动$a_i$和$a_j$满足$[s_i,f_i)$和$[s_j,f_j)$不重叠，则称它们是兼容的。</li><li>在活动选择问题中，我们希望选出一个最大兼容活动集</li></ul><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA16-%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/image-20230116144725415.png" alt="image-20230116144725415"></p><p>那么怎么解决这个问题呢?</p><p>→通过动态规划将问题分解成两个子问题，然后将这两个子问题的最优解整合成原问题的一个最优解。</p><p>在做贪心选择时，子问题之一必须是空的，因此只留下一个非空子问题。</p><p>找到一种递归贪心算法来解决活动调度问题，并将递归算法转化为迭代算法，以完成贪心算法的过程。</p><h4 id="活动选择问题的最优子结构"><a href="#活动选择问题的最优子结构" class="headerlink" title="活动选择问题的最优子结构"></a>活动选择问题的最优子结构</h4><p>假设$A_{ij}$是$S_{ij}$的一个最大的相互兼容的活动子集，包含活动$a_k$，因此我们得到的两个子问题即为：$A_{ik}&#x3D;A_{ij}\cap S_{ik}$和</p><p>$A_{kj}&#x3D;A_{ij}\cap S_{kj}$，因此有$A_{ij}&#x3D;A_{ik}\cup a_k\cup A_{kj}$        &#x3D;&gt;</p><p>利用动态规划求解活动选择问题：c[i,j]表示Sij最优解的大小：<br>$$<br>c[i,j]&#x3D;c[i,k]+c[k,j]+1<br>$$<br>因此:</p><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA16-%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/image-20230118230818236.png" alt="image-20230118230818236"></p><h4 id="贪心选择"><a href="#贪心选择" class="headerlink" title="贪心选择"></a>贪心选择</h4><p>直觉：选择S中结束最早的活动，因为它剩下的资源可供它之后尽量多的活动使用</p><p>因此贪心选择就是$a_1$</p><p>令$S_k&#x3D;${$a_i\in S:s_i&gt;&#x3D;f_k$}为$a_k$结束后开始的任务集合。当我们做出贪心选择选择了$a_1$后，剩下的$S_1$是唯一需要求解的子问题。</p><p>则：如果$a_1$在最优解中，那么原问题的最优解由活动$a_1$及其子问题$S_1$中所有活动组成。</p><h4 id="定理16-1"><a href="#定理16-1" class="headerlink" title="定理16.1"></a>定理16.1</h4><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA16-%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/image-20230118231609132.png" alt="image-20230118231609132"></p><ul><li>求解活动选择问题的算法可以自顶向下进行计算<ul><li>贪心算法多是这种自顶向下的设计：做出一个选择，然后求解剩下的子问题，而不是自底向上地求解出很多子问题然后再做出选择</li></ul></li></ul><h4 id="递归贪心算法"><a href="#递归贪心算法" class="headerlink" title="递归贪心算法"></a>递归贪心算法</h4><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA16-%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/image-20230118232155924.png" alt="image-20230118232155924"></p><ul><li>两个数组s和f表示活动的开始时间和结束时间</li><li>k指出要求解的子问题$S_k$</li><li>n表示有n个活动</li><li>算法返回$S_k$的一个最大兼容活动集<ul><li>假设活动已经排好序，则递归调用RECURSIVE-ACTIVITY-SELECTOR(s,f,0,n)的运行时间为$\theta(n)$。</li></ul></li></ul><h4 id="迭代贪心算法"><a href="#迭代贪心算法" class="headerlink" title="迭代贪心算法"></a>迭代贪心算法</h4><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA16-%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/image-20230118233323821.png" alt="image-20230118233323821"></p><ul><li>与递归版本类似，在输入活动已按结束时间排序的情况下，GREEDY-ACTIVITY-SELECTOR的运行时间为$\theta(n)$</li></ul><h2 id="16-2-贪心算法原理"><a href="#16-2-贪心算法原理" class="headerlink" title="16.2 贪心算法原理"></a>16.2 贪心算法原理</h2><p>在上节，我们详细看到了贪心算法是如何以动态规划方法为基础的。</p><ul><li>在活动选择问题中，我们首先定义了子问题$S_{ij}$，其中i和j都是可变的。然后我们发现，如果总是做出贪心选择，则可以将子问题限定为$S_k$的形式</li><li>设计贪心算法的步骤：<ul><li>将最优化问题转化成这样的形式：对其做出一次选择后，只剩下一个子问题需要解决</li><li>证明做出贪心选择后，原问题总是存在最优解，即贪心选择总是安全的</li><li>证明做出贪心选择后，剩余的子问题满足性质：其最优解与贪心选择组合即可得到原问题的最优解，这样就得到了最优子结构</li></ul></li></ul><h4 id="贪心选择性质"><a href="#贪心选择性质" class="headerlink" title="贪心选择性质"></a>贪心选择性质</h4><p>一个动态规划算法是自底向上进行计算的，而一个贪心算法通常是自顶向下的，进行一次又一次选择，将给定问题的实例变得更小，在贪心选择中，我们总是做出当时看来最佳的选择，然后求解剩下唯一的子问题，不依赖将来的选择或是子问题的解。、</p><h4 id="最优子结构"><a href="#最优子结构" class="headerlink" title="最优子结构"></a>最优子结构</h4><p>如果一个问题的最优解包含其子问题的最优解，则称此问题具有最优子结构性质</p><p>当应用于贪心算法时，我们通常使用更为直接的最优子结构</p><p>我们要做的全部工作就是：</p><ul><li>将子问题的最优解与贪心选择组合在一起就能生成原问题的最优解</li></ul><h4 id="贪心对动态规划"><a href="#贪心对动态规划" class="headerlink" title="贪心对动态规划"></a>贪心对动态规划</h4><ul><li><p>0-1背包问题和分数背包问题</p><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA16-%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/image-20230118235155995.png" alt="image-20230118235155995"></p></li><li><p>我们用贪心策略可以求解分数背包问题，而不能求解0-1背包问题</p></li><li><p>使用贪心策略解决分数背包问题：</p><ul><li>每个商品的每磅价值：$v_i&#x2F;w_i$，尽可能拿走每磅价值最高的商品，直至达到重量上限W。</li><li>运行时间为$O(nlgn)$</li></ul></li><li><p>这一策略对0-1背包问题无效的原因是空闲的背包 <strong>空间</strong>降低了方案的有效每磅价值</p></li></ul><h2 id="16-3-赫夫曼编码"><a href="#16-3-赫夫曼编码" class="headerlink" title="16.3 赫夫曼编码"></a>16.3 赫夫曼编码</h2><ul><li>使用变长编码可以达到比定长编码好得多的压缩率</li></ul><h4 id="前缀码"><a href="#前缀码" class="headerlink" title="前缀码"></a>前缀码</h4><ul><li><p>prefix code即没有任何码字是其他码字的前缀，其作用是简化解码过程，可以简单识别出开始码字，并将其转化为原字符</p></li><li><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA16-%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/image-20230119130630936.png" alt="image-20230119130630936"></p></li><li><p>文件的最优编码方案总是对应一棵满（full）二叉树</p></li><li><p>给定一颗对应前缀码的树T，计算其编码一个文件需要的二进制位数：</p><ul><li>对于字母表C中的每个字符c，c.freq表示c在文件中出现的频率<ul><li>$d_T(c)$表示c的叶节点在树中的深度，也是字符c码字的长度</li></ul></li></ul></li><li><p>编码文件需要的二进制数为:</p><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA16-%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/image-20230119131001537.png" alt="image-20230119131001537"></p></li></ul><h4 id="构造赫夫曼编码"><a href="#构造赫夫曼编码" class="headerlink" title="构造赫夫曼编码"></a>构造赫夫曼编码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c">HUFFMAN(C)<br><span class="hljs-number">1</span>n=|C|<br><span class="hljs-number">2</span>Q=C<br><span class="hljs-number">3</span><span class="hljs-keyword">for</span> i=<span class="hljs-number">1</span> to n<span class="hljs-number">-1</span><br><span class="hljs-number">4</span>allocate a new node z<br><span class="hljs-number">5</span>z.left=x=EXTRACT-MIN(Q)<br><span class="hljs-number">6</span>z.right=y=EXTRACT-MIN(Q)<br><span class="hljs-number">7</span>z.freq=x.freq+y.freq<br><span class="hljs-number">8</span>INSERT(Q,z)<br><span class="hljs-number">9</span> <span class="hljs-keyword">return</span> EXTRACT-MIN(Q)<br></code></pre></td></tr></table></figure><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA16-%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/image-20230119140217770.png" alt="image-20230119140217770"></p><ul><li>初始队列大小为n&#x3D;6，需要5个合并步骤构造二叉树，最终的二叉树表示最优前缀码</li><li>第二行用C中字符初始最小优先队列Q</li><li>第3-8行的for循环反复从队列中提取两个频率最低的结点x和y，将他们合并为一个新节点，替代他们</li><li>经过n-1次合并后，第9行返回队列中剩下的唯一节点——编码树的根节点</li></ul><h4 id="赫夫曼编码的运行时间"><a href="#赫夫曼编码的运行时间" class="headerlink" title="赫夫曼编码的运行时间"></a>赫夫曼编码的运行时间</h4><ol><li>假设Q是由最小二叉堆实现的</li><li>第二行使用BUILD-MIN-HEAP将Q初始化，花费时间为O(n)</li><li>3-8行的for循环执行了n-1次，且每个堆操作需要O(lgn)，因此循环需要O(nlgn)</li><li>如果将最小二叉堆换为van Embe Boas树，可以将运行时间减少为O(nlglgn)</li></ol><h4 id="赫夫曼算法的正确性"><a href="#赫夫曼算法的正确性" class="headerlink" title="赫夫曼算法的正确性"></a>赫夫曼算法的正确性</h4><h5 id="引理16-2"><a href="#引理16-2" class="headerlink" title="引理16.2"></a>引理16.2</h5><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA16-%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/image-20230119140709143.png" alt="image-20230119140709143"></p><p>通过合并来构造最优树的过程，可以从合并出现频率最低的两个字符这样一个贪心选择开始</p><h5 id="引理16-3"><a href="#引理16-3" class="headerlink" title="引理16.3"></a>引理16.3</h5><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA16-%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/image-20230119141013831.png" alt="image-20230119141013831"></p><h5 id="定理16-4"><a href="#定理16-4" class="headerlink" title="定理16.4"></a>定理16.4</h5><p>过程HUFFMAN会生成一个最优前缀码</p>]]></content>
    
    
    <categories>
      
      <category>贪心算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法导论</tag>
      
      <tag>贪心算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法导论-到最大子数组问题复习</title>
    <link href="/2023/01/19/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/"/>
    <url>/2023/01/19/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h1><p><img src="/../images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/image-20221108224901740.png" alt="image-20221108224901740"></p><p><img src="/../images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/image-20221109210843551.png" alt="image-20221109210843551"></p><p><img src="/../images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/image-20221109210850112.png" alt="image-20221109210850112"></p><p><img src="/../images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/image-20221109210857118.png" alt="image-20221109210857118"></p><p><img src="/../images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/image-20221109210903497.png" alt="image-20221109210903497"></p><p><img src="/../images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/image-20221109210926336.png" alt="image-20221109210926336"></p><p><img src="/../images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/image-20221109210956279.png" alt="image-20221109210956279"></p><p><img src="/../images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/image-20221109211204109.png" alt="image-20221109211204109"></p><h1 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h1><p><img src="/../images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/image-20221108235815520.png" alt="image-20221108235815520"></p><p><img src="/../images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/image-20221109000006738.png" alt="image-20221109000006738"></p><h1 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h1><p><img src="/../images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/image-20221108205429843.png" alt="image-20221108205429843"></p><p><img src="/../images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/image-20221108205730347-16679122509241.png" alt="image-20221108205730347"></p><img src="../images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/image-20221109000328999.png" alt="image-20221109000328999" style="zoom:67%;" /><p><img src="/../images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/image-20221109000337404.png" alt="image-20221109000337404"></p><h1 id="最大子数组问题"><a href="#最大子数组问题" class="headerlink" title="最大子数组问题"></a>最大子数组问题</h1><p><img src="/../images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/image-20221108220622199.png" alt="image-20221108220622199"></p><p><img src="/../images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/image-20221108220631259.png" alt="image-20221108220631259"></p><p><img src="/../images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/image-20221108220739184.png" alt="image-20221108220739184"></p><p>$T(n)&#x3D;\theta (nlgn)$</p><h1 id="线性时间的最大子数组求解算法"><a href="#线性时间的最大子数组求解算法" class="headerlink" title="线性时间的最大子数组求解算法"></a>线性时间的最大子数组求解算法</h1><p><img src="/../images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/image-20221108220909886.png" alt="image-20221108220909886"></p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs arcade">ITERATIVE-<span class="hljs-built_in">FIND</span>-MAXIMUM-SUBARRAY(A):<br>    <span class="hljs-built_in">max</span>-<span class="hljs-built_in">sum</span> = -∞<br>    <span class="hljs-built_in">sum</span> = -∞<br>    <span class="hljs-keyword">for</span> j = <span class="hljs-number">1</span> to A.<span class="hljs-built_in">length</span><br>        currentHigh = j<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">sum</span> &gt; <span class="hljs-number">0</span>   <span class="hljs-comment">//只要是正的就可以加上，就会大一点</span><br>            <span class="hljs-built_in">sum</span> = <span class="hljs-built_in">sum</span> + A[j]<br>        <span class="hljs-keyword">else</span><br>            currentLow = j   <span class="hljs-comment">//前面的和是负的，就从后面开始,，如果都是正的，那么currentLow就是1</span><br>            <span class="hljs-built_in">sum</span> = A[j]<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">sum</span> &gt; <span class="hljs-built_in">max</span>-<span class="hljs-built_in">sum</span><br>            <span class="hljs-built_in">max</span>-<span class="hljs-built_in">sum</span> = <span class="hljs-built_in">sum</span><br>            low = currentLow<br>            high = currentHigh<br>    <span class="hljs-keyword">return</span> (low, high, <span class="hljs-built_in">max</span>-<span class="hljs-built_in">sum</span>)<br><br></code></pre></td></tr></table></figure><h1 id="Strassen算法的运行时间"><a href="#Strassen算法的运行时间" class="headerlink" title="Strassen算法的运行时间"></a>Strassen算法的运行时间</h1><p>$\theta (n^{lg7})$</p><p>$O(n^{2.81})$</p><p><img src="/../images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/image-20221108222735283.png" alt="image-20221108222735283"></p><h1 id="用代入法求解递归式"><a href="#用代入法求解递归式" class="headerlink" title="用代入法求解递归式"></a>用代入法求解递归式</h1><p><img src="/../images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/image-20221108222819501.png" alt="image-20221108222819501"></p><p><img src="/../images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/image-20221108222847224.png" alt="image-20221108222847224"></p><h1 id="用递归树法求解递归式"><a href="#用递归树法求解递归式" class="headerlink" title="用递归树法求解递归式"></a>用递归树法求解递归式</h1><p><img src="/../images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/image-20221109000922811.png" alt="image-20221109000922811"></p><p><img src="/../images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/image-20221109001820983-16679243012913.png" alt="image-20221109001820983"></p><p><img src="/../images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/image-20221109001834262.png" alt="image-20221109001834262"></p><h1 id="用主方法求解递归式"><a href="#用主方法求解递归式" class="headerlink" title="用主方法求解递归式"></a>用主方法求解递归式</h1><p><img src="/../images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/image-20221108223606756.png" alt="image-20221108223606756"></p><p><img src="/../images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/image-20221108223620426.png" alt="image-20221108223620426"></p><h1 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h1><p><img src="/../images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/image-20221108223731556.png" alt="image-20221108223731556"></p><h2 id="循环迭代"><a href="#循环迭代" class="headerlink" title="循环迭代"></a>循环迭代</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c">ITERATIVE-BINARY-SEARCH(A, v, low, high)<br>    <span class="hljs-keyword">while</span> low ≤ high<br>        mid = <span class="hljs-built_in">floor</span>((low + high) / <span class="hljs-number">2</span>)<br>        <span class="hljs-keyword">if</span> v == A[mid]<br>            <span class="hljs-keyword">return</span> mid<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> v &gt; A[mid]<br>            low = mid + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span> high = mid - <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> NIL<br></code></pre></td></tr></table></figure><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c">RECURSIVE-BINARY-SEARCH(A, v, low, high)<br>    <span class="hljs-keyword">if</span> low &gt; high<br>        <span class="hljs-keyword">return</span> NIL<br>    mid = <span class="hljs-built_in">floor</span>((low + high) / <span class="hljs-number">2</span>)<br>    <span class="hljs-keyword">if</span> v == A[mid]<br>        <span class="hljs-keyword">return</span> mid<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> v &gt; A[mid]<br>        <span class="hljs-keyword">return</span> RECURSIVE-BINARY-SEARCH(A, v, mid + <span class="hljs-number">1</span>, high)<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> RECURSIVE-BINARY-SEARCH(A, v, low, mid - <span class="hljs-number">1</span>)<br><br></code></pre></td></tr></table></figure><p><img src="/../images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/image-20221108223906073.png" alt="image-20221108223906073"></p><p><img src="/../images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/image-20221109000902435.png" alt="image-20221109000902435"></p><h1 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h1><h2 id="最大堆中元素的插入"><a href="#最大堆中元素的插入" class="headerlink" title="最大堆中元素的插入"></a>最大堆中元素的插入</h2><p>The following sequence of pictures shows how 10 is inserted into the heap,then swapped with parent nodes until the max-heap property is restored. The node containing the new key is heavily shaded.</p><h2 id="1-original-heap"><a href="#1-original-heap" class="headerlink" title="1.original heap"></a>1.original heap</h2><p><img src="/../images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/image-20221014191207322.png" alt="image-20221014191207322"></p><h2 id="2-MAX-HEAP-INSERT-A-10-被调用，所以我们首先附加一个节点被赋值为-∞的节点："><a href="#2-MAX-HEAP-INSERT-A-10-被调用，所以我们首先附加一个节点被赋值为-∞的节点：" class="headerlink" title="2. MAX-HEAP-INSERT(A,10) 被调用，所以我们首先附加一个节点被赋值为-∞的节点："></a>2. MAX-HEAP-INSERT(A,10) 被调用，所以我们首先附加一个节点被赋值为-∞的节点：</h2><p><img src="/../images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/image-20221014191632821.png" alt="image-20221014191632821"></p><h2 id="3-进行新添加的节点的健值更新："><a href="#3-进行新添加的节点的健值更新：" class="headerlink" title="3.进行新添加的节点的健值更新："></a>3.进行新添加的节点的健值更新：</h2><p><img src="/../images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/image-20221014191754174.png" alt="image-20221014191754174"></p><h2 id="4-由于父键小于-10，因此交换节点："><a href="#4-由于父键小于-10，因此交换节点：" class="headerlink" title="4.由于父键小于 10，因此交换节点："></a>4.由于父键小于 10，因此交换节点：</h2><p><img src="/../images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/image-20221014191952818.png" alt="image-20221014191952818"></p><h2 id="5-由于父节点小于10，节点交换："><a href="#5-由于父节点小于10，节点交换：" class="headerlink" title="5.由于父节点小于10，节点交换："></a>5.由于父节点小于10，节点交换：</h2><p><img src="/../images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/image-20221014192054063.png" alt="image-20221014192054063"></p><p><img src="/../images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/image-20221108225150953.png" alt="image-20221108225150953"></p><p><img src="/../images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/image-20221108225245744.png" alt="image-20221108225245744"></p><h2 id="维护最大堆性质"><a href="#维护最大堆性质" class="headerlink" title="维护最大堆性质"></a>维护最大堆性质</h2><img src="../images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/image-20221108225341359.png" alt="image-20221108225341359" style="zoom:67%;" /><p><img src="/../images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/image-20221108225553262.png" alt="image-20221108225553262"></p><p>$T(n)&#x3D;O(lgn)&#x3D;O(h)$</p><h2 id="建堆"><a href="#建堆" class="headerlink" title="建堆"></a>建堆</h2><p><img src="/../images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/image-20221108230133117.png" alt="image-20221108230133117"></p><p><img src="/../images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/image-20221108230159541.png" alt="image-20221108230159541"></p><p><img src="/../images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/image-20221108230310982.png" alt="image-20221108230310982"></p><p><img src="/../images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/image-20221108230403762.png" alt="image-20221108230403762"></p><h2 id="堆排序算法"><a href="#堆排序算法" class="headerlink" title="堆排序算法"></a>堆排序算法</h2><p><img src="/../images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/image-20221108230642277.png" alt="image-20221108230642277"></p><p><img src="/../images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/image-20221108231004288.png" alt="image-20221108231004288"></p><p><img src="/../images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/image-20221108231448885.png" alt="image-20221108231448885"></p><p><img src="/../images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/image-20221108233524259.png" alt="image-20221108233524259"></p><h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><p><img src="/../images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/image-20221108234119551.png" alt="image-20221108234119551"></p><p><img src="/../images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/image-20221109212150497.png" alt="image-20221109212150497"></p><p><img src="/../images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/image-20221108234130425.png" alt="image-20221108234130425"></p><p><img src="/../images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/image-20221108234153013.png" alt="image-20221108234153013"></p><p><img src="/../images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/image-20221108234806215.png" alt="image-20221108234806215"></p><p><img src="/../images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/image-20221108234528891.png" alt="image-20221108234528891"></p><h2 id="最坏情况划分"><a href="#最坏情况划分" class="headerlink" title="最坏情况划分"></a>最坏情况划分</h2><p><img src="/../images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/image-20221108234850737.png" alt="image-20221108234850737"></p><h2 id="最好情况划分"><a href="#最好情况划分" class="headerlink" title="最好情况划分"></a>最好情况划分</h2><p><img src="/../images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/image-20221108234905003.png" alt="image-20221108234905003"></p><h2 id="快速排序的随机化版本"><a href="#快速排序的随机化版本" class="headerlink" title="快速排序的随机化版本"></a>快速排序的随机化版本</h2><p><img src="/../images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/image-20221108235230197.png" alt="image-20221108235230197"></p><h1 id="排序算法的下界"><a href="#排序算法的下界" class="headerlink" title="排序算法的下界"></a>排序算法的下界</h1><h2 id="决策树模型"><a href="#决策树模型" class="headerlink" title="决策树模型"></a>决策树模型</h2><p>决策树是一颗完全二叉树，表示在给定规模的情况下，某一特定排序算法对所有元素的比较操作</p><h2 id="最坏情况的下界"><a href="#最坏情况的下界" class="headerlink" title="最坏情况的下界"></a>最坏情况的下界</h2><p><img src="/../images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/image-20221109100559427.png" alt="image-20221109100559427"></p><p><img src="/../images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/image-20221109100804042.png" alt="image-20221109100804042"></p><p>决策树高度的下界也就是比较排序算法的下界</p><p><img src="/../images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/image-20221109101820963-16679603012661.png" alt="image-20221109101820963"></p><p><img src="/../images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/image-20221109101830337.png" alt="image-20221109101830337"></p><p>输入即为叶子结点的个数，m种输入一定小于$2^h$,叶子结点个数不多于$2^h$</p><p>$n!&lt;&#x3D;l&lt;&#x3D;2^h$</p><h1 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h1><p><img src="/../images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/image-20221109102544998.png" alt="image-20221109102544998"></p><p><img src="/../images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/image-20221109102553211.png" alt="image-20221109102553211"></p><p><img src="/../images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/image-20221109102714339.png" alt="image-20221109102714339"></p><p><img src="/../images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/image-20221109103927400.png" alt="image-20221109103927400"></p><p><img src="/../images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/image-20221109103940398.png" alt="image-20221109103940398"></p><p><img src="/../images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/image-20221109103956787.png" alt="image-20221109103956787"></p><h1 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h1><p>按照最低有效位进行排序</p><p><img src="/../images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/image-20221109104243101.png" alt="image-20221109104243101"></p><p><img src="/../images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/image-20221109104606624.png" alt="image-20221109104606624"></p><p><img src="/../images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/image-20221109104932378.png" alt="image-20221109104932378"></p><p><img src="/../images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/image-20221109105101722.png" alt="image-20221109105101722"></p><h1 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h1><p>假设输入数据服从均匀分布，平均情况下其时间代价为$O(n)$</p><ul><li>计数排序假设输入数据都属于一个小区间内的整数</li><li>桶排序假设输入是一个随机过程产生，该过程将元素均匀、独立地分布在[0,1)区间上</li></ul><p><img src="/../images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/image-20221109110002082.png" alt="image-20221109110002082"></p><p><img src="/../images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/image-20221109110324416.png" alt="image-20221109110324416"></p><h1 id="中位数和顺序统计量"><a href="#中位数和顺序统计量" class="headerlink" title="中位数和顺序统计量"></a>中位数和顺序统计量</h1><p><img src="/../images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/image-20221109110832233.png" alt="image-20221109110832233"></p><h1 id="最小值和最大值"><a href="#最小值和最大值" class="headerlink" title="最小值和最大值"></a>最小值和最大值</h1><p><img src="/../images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/image-20221109140545276.png" alt="image-20221109140545276"></p><p><img src="/../images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/image-20221109140928170.png" alt="image-20221109140928170"></p><p>在最坏情况下证明 $\lceil 3n&#x2F;2 \rceil$-2 比较的下限，以找到 n 个数字的最大值和最小值。（提示：考虑有多少数字可能是最大值或最小值，并研究比较如何影响这些计数 .)</p><p>[ans]</p><ol><li><p>最初，所有 $n$个数字都可能是最大值或最小值。</p></li><li><p>令$MAX$表示潜在的最大值构成的集合，$MIN$表示潜在的最小值构成的集合。</p></li><li><p>当我们在原数组中比较两个元素a和b时，不妨设$a&lt;&#x3D;b$，我们把a从$MAX$中剔除，把b从$MIN$中剔除，从而a和b均不可能同时出现在$MIN$和$MAX$中。</p><ul><li>当n为偶数时，每两个数为一组进行一次比较，一共 𝑛&#x2F;2 次比较．比较完成后，所有元素均参与一次比较，由上文的分析可知$MIN$和$MAX$不相交，且 $|MAX|$ &#x3D; $|MIN|$ &#x3D; $n&#x2F;2$</li><li>当 n为奇数时，先不考虑最后一个元素，按照偶数的情况比较．对于最后一个元素，与倒数第二个元素进行比较．一共进行了$(n-1)&#x2F;2+1&#x3D;\lceil n&#x2F;2 \rceil$ 次比较，且  $|MAX|$和  $|MIN|$中其一为 $\lceil n&#x2F;2 \rceil$，另一个为$\lfloor n&#x2F;2 \rfloor$</li></ul></li><li><p>综上，经过$\lceil n&#x2F;2 \rceil$次比较后$MIN$和$MAX$是不相交的，并且 $|MIN|$和 $|MAX|$中其一为 $\lceil n&#x2F;2 \rceil$，另一个为$\lfloor n&#x2F;2 \rfloor$</p></li><li><p><strong>对$MIN$做线性比较，一共比较$|m|-1$次可以得到最小值，$MAX$同理。综上，总比较次数为</strong><br>$$<br>\lceil n&#x2F;2 \rceil +\lfloor n&#x2F;2 \rfloor-1+\lceil n&#x2F;2 \rceil-1&#x3D;\lceil n&#x2F;2 \rceil+n-2&#x3D;\lceil 3n&#x2F;2 \rceil-2<br>$$</p></li></ol><h1 id="期望为线性时间的选择算法"><a href="#期望为线性时间的选择算法" class="headerlink" title="期望为线性时间的选择算法"></a>期望为线性时间的选择算法</h1><p><img src="/../images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/image-20221109141520092.png" alt="image-20221109141520092"></p><p><img src="/../images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/image-20221109142010075.png" alt="image-20221109142010075"></p><p><img src="/../images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/image-20221109142023217.png" alt="image-20221109142023217"></p><h1 id="最坏情况为线性时间的选择算法"><a href="#最坏情况为线性时间的选择算法" class="headerlink" title="最坏情况为线性时间的选择算法"></a><strong>最坏情况</strong>为线性时间的选择算法</h1><p><img src="/../images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/image-20221109142105887.png" alt="image-20221109142105887"></p><p><img src="/../images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/image-20221109145114106.png" alt="image-20221109145114106"></p><ol><li>划分</li><li>插入排序确定每组元素的中位数</li><li>找出中位数的中位数</li><li>根据中位数的中位数x对数组进行划分</li><li>递归<ul><li>i&#x3D;k 返回中位数的中位数x</li><li>i&lt;k 在低区递归调用找到第i小的元素</li><li>i&gt;k 在高区递归查找第i-k小的元素</li></ul></li></ol><p><img src="/../images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/image-20221109145123231.png" alt="image-20221109145123231"></p><p><img src="/../images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/image-20221109145145290.png" alt="image-20221109145145290"></p><p><img src="/../images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/image-20221109142515242.png" alt="image-20221109142515242"></p><p>为了在最坏情况下也保证对$O(nlgn)$的复杂度，需要改变对$pivot$的选择。可以每次都选择序列的 <strong>中位数</strong>作为$pivot$，对中位数的选择只需要$O(n)$，因此不需要额外的复杂度。</p><p><img src="/../images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/image-20221109143650013.png" alt="image-20221109143650013"></p><p>Assume the input elements are divided into groups of k. Similar like the analysis in the book, at least half of the $\lceil n&#x2F;k \rceil$ groups contribute at least $\lceil n&#x2F;2 \rceil$ elements that are greater than x, except for the one group that has fewer than k elements if k does not divide n exactly, and the one group containing x itself. Discounting these two groups, it follows that the number of elements greater than x is at least</p><p>$$<br>\lceil k&#x2F;2 \rceil(\lceil \frac{1}{2} \lceil n&#x2F;k \rceil \rceil - 2) \geq \frac{k}{2}(\frac{1}{2}\frac{n}{k} - 2) &#x3D; \frac{n}{4} - k<br>$$<br>Similarly, at least $\frac{n}{4} - k$ elements are less than x. Thus, in the worst case, step 5 calls SELECT recursively on at most $\frac{3n}{4} + k$ elements.</p><p>So when n is greater than some constant, we have<br>$$<br>T(n) \leq T(\lceil \frac{n}{k} \rceil) + T(\frac{3n}{4} + k) + O(n)<br>$$<br>Assume T(n) runs in linear time, substituting it into the recurrence yields:<br>$$<br>\begin{eqnarray}<br>T(n) &amp;\leq&amp; T(\lceil \frac{n}{k} \rceil) + T(\frac{3n}{4} + k) + O(n) \<br>&amp;\leq&amp; T(\lceil \frac{n}{k} \rceil) + T(\frac{3n}{4} + k) + an \<br>&amp;\leq&amp; c\frac{n}{k} + c(\frac{3n}{4} + k) + an \<br>&amp;&#x3D;&amp; cn + (\frac{c}{k}n + an - \frac{c}{4}n + ck) \<br>&amp;\leq&amp; cn<br>\end{eqnarray}<br>$$<br>where the last step holds as long as<br>$$<br>\frac{c}{k}n + an - \frac{c}{4}n + ck \leq 0<br>$$<br>So we need to find some k such that there exists constants c and a such that<br>$$<br>\frac{c}{k}n + an - \frac{c}{4}n + ck \leq 0<br>$$<br>We have<br>$$<br>\frac{c}{k}n + an - \frac{c}{4}n + ck &#x3D; c(\frac{n}{k} - \frac{n}{4} + k) + an \leq 0<br>$$<br>Because both c and a are positive, so it could only be<br>$$<br>\frac{n}{k} - \frac{n}{4} + k \leq 0<br>$$<br>Let $f(k) &#x3D; \frac{n}{k} - \frac{n}{4} + k$   , so<br>$$<br>f(4) &#x3D; 4 &gt; 0, f(5) &#x3D; -\frac{n}{20} + 5 \leq 0 \text{ when } n \geq 100<br>$$<br>So we can always find a $n_0$ such that $f(k) \leq 0$ when $k \geq 5$</p><p>Thus the algorithm work in linear time if the input elements are divided into groups of 7, but doesn’t run in linear time if they are divided into groups of 3. When k&#x3D;4, the algorithm works in $\Omega(nlgn)$。</p><h1 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h1><p>动态规划与分治算法类似，都是通过组合子问题的解来求解原问题的</p><p><img src="/../images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/image-20221109231350495.png" alt="image-20221109231350495"></p><p><img src="/../images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/image-20221109231406566.png" alt="image-20221109231406566"></p><h2 id="设计一个动态规划算法"><a href="#设计一个动态规划算法" class="headerlink" title="设计一个动态规划算法"></a>设计一个动态规划算法</h2><p><img src="/../images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/image-20221109145604941.png" alt="image-20221109145604941"></p><ul><li><h2 id="带备忘的自顶向下法"><a href="#带备忘的自顶向下法" class="headerlink" title="带备忘的自顶向下法"></a>带备忘的自顶向下法</h2><p><img src="/../images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/image-20221109152741385.png" alt="image-20221109152741385"></p><p><img src="/../images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/image-20221109152748569.png" alt="image-20221109152748569"></p></li><li><h2 id="自底向上法"><a href="#自底向上法" class="headerlink" title="自底向上法"></a>自底向上法</h2><p><img src="/../images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/image-20221109152757333.png" alt="image-20221109152757333"></p><p>依次求解规模为i&#x3D;0..n的子问题</p></li><li><h2 id="子问题图"><a href="#子问题图" class="headerlink" title="子问题图"></a>子问题图</h2><p><img src="/../images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/image-20221109155802315.png" alt="image-20221109155802315"></p></li><li><h2 id="重构解"><a href="#重构解" class="headerlink" title="重构解"></a>重构解</h2><p>扩展动态规划算法，使其对每个子问题不仅保存最优收益值，还保存对应的分割方案</p><img src="../images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/image-20221109161138267.png" alt="image-20221109161138267" style="zoom:67%;" /></li></ul><h1 id="矩阵链乘法算法"><a href="#矩阵链乘法算法" class="headerlink" title="矩阵链乘法算法"></a>矩阵链乘法算法</h1><p><img src="/../images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/image-20221109232455434.png" alt="image-20221109232455434"></p><h2 id="递归式"><a href="#递归式" class="headerlink" title="递归式"></a>递归式</h2><p><img src="/../images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/image-20221109232552601.png" alt="image-20221109232552601"></p><p><img src="/../images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/image-20221109232639313.png" alt="image-20221109232639313"></p><p><img src="/../images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/image-20221109235511447.png" alt="image-20221109235511447"></p><p><img src="/../images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/image-20221109235518635.png" alt="image-20221109235518635"></p><p><img src="/../images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/image-20221109235535325.png" alt="image-20221109235535325"></p><p><img src="/../images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/image-20221109235543478.png" alt="image-20221109235543478"></p>]]></content>
    
    
    <categories>
      
      <category>期中复习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法导论</tag>
      
      <tag>期中复习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法导论24-单源最短路径问题</title>
    <link href="/2023/01/15/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA24-%E5%8D%95%E6%BA%90%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98-%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/"/>
    <url>/2023/01/15/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA24-%E5%8D%95%E6%BA%90%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98-%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="算法导论24-单源最短路径问题"><a href="#算法导论24-单源最短路径问题" class="headerlink" title="算法导论24-单源最短路径问题"></a>算法导论24-单源最短路径问题</h1><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA24-%E5%8D%95%E6%BA%90%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98-%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230115171815971.png" alt="image-20230115171815971"></p><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA24-%E5%8D%95%E6%BA%90%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98-%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230115171939932.png" alt="image-20230115171939932"></p><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA24-%E5%8D%95%E6%BA%90%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98-%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230115171832039.png" alt="image-20230115171832039"></p><h2 id="24-1-BellMan-Ford算法"><a href="#24-1-BellMan-Ford算法" class="headerlink" title="24.1 BellMan-Ford算法"></a>24.1 BellMan-Ford算法</h2><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA24-%E5%8D%95%E6%BA%90%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98-%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230115171856296.png" alt="image-20230115171856296"></p><h3 id="引理24-2"><a href="#引理24-2" class="headerlink" title="引理24.2"></a>引理24.2</h3><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA24-%E5%8D%95%E6%BA%90%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98-%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230115172209607.png" alt="image-20230115172209607"></p><h3 id="推论24-3"><a href="#推论24-3" class="headerlink" title="推论24.3"></a>推论24.3</h3><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA24-%E5%8D%95%E6%BA%90%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98-%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230115172229708.png" alt="image-20230115172229708"></p><h3 id="定理（24-4）Bellman-Ford算法的正确性"><a href="#定理（24-4）Bellman-Ford算法的正确性" class="headerlink" title="定理（24.4）Bellman-Ford算法的正确性"></a>定理（24.4）Bellman-Ford算法的正确性</h3><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA24-%E5%8D%95%E6%BA%90%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98-%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230115172302546.png" alt="image-20230115172302546"></p><h2 id="24-2-有向无环图的单源最短路径问题"><a href="#24-2-有向无环图的单源最短路径问题" class="headerlink" title="24.2 有向无环图的单源最短路径问题"></a>24.2 有向无环图的单源最短路径问题</h2><p>​按照拓扑排序的次序对结点进行一遍处理，每次对结点进行处理时，我们对该结点发出的所有的边进行松弛操作。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c">DAG-SHORTEST-PATHS(G,w,s)<br><span class="hljs-number">1</span>topologically sort the vertices of G<br><span class="hljs-number">2</span>INITIALIZE-SINGLE-SOURCE(G,s)<br><span class="hljs-number">3</span><span class="hljs-keyword">for</span> each vertex u,taken in topologically sorted order<br><span class="hljs-number">4</span><span class="hljs-keyword">for</span> each vertex v∈G.Adj[u]<br><span class="hljs-number">5</span>RELAX(u,v,w)<br></code></pre></td></tr></table></figure><h3 id="运行时间"><a href="#运行时间" class="headerlink" title="运行时间"></a>运行时间</h3><p>​$\theta(V+E)$</p><p>​第一行拓扑排序的运行时间为$\theta(V+E)$，第二行为$\theta(V)$。</p><p>​对于以邻接链表法表示的图来说，这个时间为$\theta(V+E)$。</p><h3 id="定理24-5"><a href="#定理24-5" class="headerlink" title="定理24.5"></a>定理24.5</h3><p>​<img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA24-%E5%8D%95%E6%BA%90%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98-%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230115175306932.png" alt="image-20230115175306932"></p><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA24-%E5%8D%95%E6%BA%90%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98-%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230115175707030.png" alt="image-20230115175707030"></p><h2 id="24-3-Dijkstra算法"><a href="#24-3-Dijkstra算法" class="headerlink" title="24.3 Dijkstra算法"></a>24.3 Dijkstra算法</h2><ul><li>解决问题：带权重的有向图上单源最短路径问题</li><li>要求：所有边的权重都为 <strong><u>非负值</u></strong></li></ul><h3 id="算法伪代码"><a href="#算法伪代码" class="headerlink" title="算法伪代码"></a>算法伪代码</h3><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA24-%E5%8D%95%E6%BA%90%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98-%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230115180309026.png" alt="image-20230115180309026"></p><h3 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h3><ul><li>算法所维持的不变式为: Q&#x3D;V-S</li><li>算法4-8行的while循环的执行次数刚好为|V|次</li><li>因为Dijkstra算法总是选择集合V-S中“最轻”或“最近”的结点来加入到集合S中，该算法使用的是 <strong>贪心策略</strong>。</li></ul><h3 id="算法正确性的证明"><a href="#算法正确性的证明" class="headerlink" title="算法正确性的证明"></a>算法正确性的证明</h3><h5 id="定理24-6"><a href="#定理24-6" class="headerlink" title="定理24.6"></a>定理24.6</h5><h5 id=""><a href="#" class="headerlink" title=""></a><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA24-%E5%8D%95%E6%BA%90%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98-%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230115204057995.png" alt="image-20230115204057995"></h5><h5 id="推论24-7"><a href="#推论24-7" class="headerlink" title="推论24.7"></a>推论24.7</h5><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA24-%E5%8D%95%E6%BA%90%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98-%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230115204521518.png" alt="image-20230115204521518"></p><h3 id="算法运行时间分析"><a href="#算法运行时间分析" class="headerlink" title="算法运行时间分析"></a>算法运行时间分析</h3><ul><li><p>Dijkstra算法执行以下三种优先队列操作来维持优先队列Q</p><ul><li>Q&#x3D;G.V所隐含的INSERT操作</li><li>u&#x3D;EXTRACT-MIN(Q)操作</li><li>RELAX(u,v,w)所隐含的DECREASE-KEY（减小对应结点的key值）<ol><li>由于所有邻接链表中边的总数是|E|，因此7-8行的for循环执行次数共为|E|次，DESCRESE-KEY操作执行的次数也为|E|次。</li></ol></li></ul></li><li><p>Dijkstra算法的总运行时间依赖于<strong>最小优先队列的实现</strong>，共有三种：</p><ol><li><p><strong>通过利用结点的编号为1~|V|来维持最小优先队列</strong></p><p>算法的总运行时间为$O(V^2+E)&#x3D;O(V^2)$</p></li><li><p>使用<strong>二叉堆</strong>来实现最小优先队列，进而改善算法的运行时间——稀疏图，E&#x3D;$o(V^2&#x2F;lgV)$</p><p>算法的总运行时间为$O((V+E)lgV)$</p><ul><li>若所有结点都可以从源节点到达，则该结点为$O(ElgV)$</li><li>若$E&#x3D;o(V^2&#x2F;lgV)$，则该时间成本相对于直接实现的O($V^2$)成本有所改善</li></ul></li><li><p>使用<strong>斐波纳契堆</strong>来实现最小优先队列</p><p>算法的总运行时间为$O(VlgV+E)$</p></li></ol></li><li><p>Dijkstra算法既类似于广度优先搜索，也类似于计算最小生成树的Prim算法</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>算法导论</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法导论</tag>
      
      <tag>单源最短路径问题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>A new journey to handle the variety of data论文阅读笔记</title>
    <link href="/2022/12/07/A%20New%20Journey%20to%20Handle%20the%20Variety%20of%20Data/"/>
    <url>/2022/12/07/A%20New%20Journey%20to%20Handle%20the%20Variety%20of%20Data/</url>
    
    <content type="html"><![CDATA[<p>以下是我在阅读论文的过程中画的思维导图,放大可查看详情:</p><img src="/images/A%20New%20Journey%20to%20Handle%20the%20Variety%20of%20Data/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE.png" alt="思维导图" style="zoom:50%;" /><h1 align="center"> A New Journey to Handle the Variety of Data</h1><h2 align="center">10205101530-赵晗瑜-论文笔记和总结</h2><p>[TOC]</p><h2 id="以下是我读完后对论文的总结与体悟："><a href="#以下是我读完后对论文的总结与体悟：" class="headerlink" title="以下是我读完后对论文的总结与体悟："></a>以下是我读完后对论文的总结与体悟：</h2><h2 id="首先，什么是muti-model呢？"><a href="#首先，什么是muti-model呢？" class="headerlink" title="首先，什么是muti-model呢？"></a>首先，什么是muti-model呢？</h2><p>​文章在开头处便给出了定义:</p><blockquote><p>It is worthy to mention the difference between multi-modal databases and multimodel databases. The former means the multi-media databases where the types of data may include speech, images, videos, handwritten text and fingerprints. But the latter stands for a system to manage data with different models such as relational, tree, graph and object models. The scope of this survey restricts to the latter one, i.e.<br>multi-model databases.</p></blockquote><p>​multi-model即为管理有着不同模型的数据的系统，像是<strong>关系模型，树模型，图模型和对象模型</strong>等，而这篇论文即针对这一方面进行阐述。</p><p>​那么，现在常用的存储的逻辑模型有哪几种呢？</p><p>​文中给出了四种，分别是：<em>relation  model  ,semi-structured Model  for JSON and XML Documents, key&#x2F;value model ,Graph model</em>，文章先是简要地概述了这四种常见的模型（并且这些模型是被大多数multi-model database所支持的），然后就开始从很多不同的角度对<em>multi-model DBMSs</em>进行了分类和对比，分类的维度有很多种，比如文中的表格有按照对<em>multi-model</em>的扩展策略来分、按照<em>multi-model DBMSs</em>支持的数据模型来分、按照对<em>SQL</em>扩展的支持来划分等等，从多个角度对<em>multi-model DBMSs</em>的应用和可扩展性、语言特性、是否支持云端存储、索引、支持的数据格式、存储的策略等多个角度进行了对比分析，最后得出了这样的结论：</p><blockquote><p>The data models supported by multi-model databases include relational, column, key&#x2F;value, document, XML, graph, and object.<br>—Multi-model databases employ cross-model languages based on the extension of SQL, XML, and graph languages.<br>—The data indices in multi-model databases include inverted index, B-tree, materialized view, hashing, and bitmap index. Most of them are based on an extension for relational or XML databases.</p><p>The existing multi-model databases have the features of data sharding, flexible schema, and a version for cloud. But they still lack of the support for multi-model transactions.</p></blockquote><p>​可见，能够支持<em>multi-model</em>的数据模型覆盖广泛，<em>multi-model</em>所使用的语言也是针对<em>single model</em>语言的扩展，数据的索引也是基于关系型和<em>XML</em>数据库的扩展，可以看出，<em>multi-model</em>已经有很好的闪光点，像是<em>data sharding(数据碎片）,flexible schema, a version for cloud</em>，但是现有的<em>multi-model database</em>缺乏对于<em>multi-model</em>事物（<em>transaction</em>）的支持。</p><p>​随后文章用大量的篇幅对<em>multi-database</em>进行了多维度的分类:</p><h2 id="第一种分类是根据原本的数据模型来分类："><a href="#第一种分类是根据原本的数据模型来分类：" class="headerlink" title="第一种分类是根据原本的数据模型来分类："></a>第一种分类是根据原本的数据模型来分类：</h2><img src="/images/A%20New%20Journey%20to%20Handle%20the%20Variety%20of%20Data/image-20221209154024003.png" alt="image-20221209154024003" style="zoom: 80%;" /><p>​从上图和文中的分析可以得出以下结论：</p><ul><li>multi-model database可以对关系数据库，所有四种非关系数据库和其他诸如对象数据库进行相应的拓展</li></ul><h2 id="第二种分类是按照多模型拓展的策略来分的，拓展的方法分别是"><a href="#第二种分类是按照多模型拓展的策略来分的，拓展的方法分别是" class="headerlink" title="第二种分类是按照多模型拓展的策略来分的，拓展的方法分别是:"></a>第二种分类是按照多模型拓展的策略来分的，拓展的方法分别是:</h2><ul><li>适用于新模型的新的存储策略</li><li>对原存储策略的拓展</li><li>在不改变原策略的基础上提供一个针对新策略的接口</li></ul><p>针对这种分类，我们可以得出：第一种分类策略的代表支持XML并且利用XML进行高效存储和查询的数据库；第二种分类策略的代表是ArangoDB，这是一种document数据库；第三种分类策略的代表是Sinew，它在关系存储策略之上开辟了一个新的层</p><h2 id="第三种分类是按照在multi-model数据库中支持的数据模型有哪些来分类的"><a href="#第三种分类是按照在multi-model数据库中支持的数据模型有哪些来分类的" class="headerlink" title="第三种分类是按照在multi-model数据库中支持的数据模型有哪些来分类的"></a>第三种分类是按照在multi-model数据库中支持的数据模型有哪些来分类的</h2><p>​<img src="/images/A%20New%20Journey%20to%20Handle%20the%20Variety%20of%20Data/image-20221209160440338.png" alt="image-20221209160440338" style="zoom:67%;" /></p><p>​从上图和文中的分析可以得出以下结论：</p><p>​从图中可以观察到所有的Document都支持JSON数据模型，同时，文中着重强调了RDF模型，指出RDF模型对于研究multi-model有很大作用，而支持RDF存储作为系统的一部分的DBMSs是真正的multi-model，文中还给出了针对RDF支持的系统的研究链接。</p><h2 id="第四种分类是从支持的格式、存储策略、查询语言、索引等多方面对multi-model-single-database-DBMSs的对比"><a href="#第四种分类是从支持的格式、存储策略、查询语言、索引等多方面对multi-model-single-database-DBMSs的对比" class="headerlink" title="第四种分类是从支持的格式、存储策略、查询语言、索引等多方面对multi-model single database DBMSs的对比"></a>第四种分类是从支持的格式、存储策略、查询语言、索引等多方面对multi-model single database DBMSs的对比</h2><img src="/images/A%20New%20Journey%20to%20Handle%20the%20Variety%20of%20Data/image-20221210124427562.png" alt="image-20221210124427562" style="zoom:80%;" /><img src="/images/A%20New%20Journey%20to%20Handle%20the%20Variety%20of%20Data/image-20221210124526565.png" alt="image-20221210124526565" style="zoom:80%;" /><p>​上图对系统的关键特性进行了总结，这两张表的侧重点在于：</p><ul><li>支持的数据格式</li><li>处理多样的数据时采取的存储策略</li><li>支持的查询语言是什么以及为了查询优化支持什么样的索引，而这个点在第七种分类中有更为详细的介绍</li></ul><h2 id="第五种分类是从数据分布、schema的灵活性、跨模型的查询、云版本、multi-model事务等多方面对multi-model-single-database-DBMSs的对比"><a href="#第五种分类是从数据分布、schema的灵活性、跨模型的查询、云版本、multi-model事务等多方面对multi-model-single-database-DBMSs的对比" class="headerlink" title="第五种分类是从数据分布、schema的灵活性、跨模型的查询、云版本、multi-model事务等多方面对multi-model single database DBMSs的对比"></a>第五种分类是从数据分布、schema的灵活性、跨模型的查询、云版本、multi-model事务等多方面对multi-model single database DBMSs的对比</h2><p>​<img src="/images/A%20New%20Journey%20to%20Handle%20the%20Variety%20of%20Data/image-20221210125046755.png" alt="image-20221210125046755" style="zoom:80%"/></p><p>​从上图和文中的分析可以得出以下结论：</p><ul><li>绝大多数系统都支持data distribution</li><li>灵活的schema并不是所有系统都有，但是对于NoSQL来说是</li><li>跨multi-model的查询是multi-model database 所必须的，以此所有系统都提供了对于此的支持</li><li>但是，有一个很大的问题就是对于跨多模的事物管理的处理，这是一个非常棘手的问题</li></ul><h2 id="第六种分类是从multi-model-databases能够支持的SQL扩展的语言出发进行的分类"><a href="#第六种分类是从multi-model-databases能够支持的SQL扩展的语言出发进行的分类" class="headerlink" title="第六种分类是从multi-model databases能够支持的SQL扩展的语言出发进行的分类"></a>第六种分类是从multi-model databases能够支持的SQL扩展的语言出发进行的分类</h2><img src="/images/A%20New%20Journey%20to%20Handle%20the%20Variety%20of%20Data/image-20221210125922807.png" alt="image-20221210125922807" style="zoom:80%;" /><p>从上图和文中的分析可以得出以下结论：</p><ul><li>在所有类型的multi-model database中都可以看到SQL语言的支持，可以看出SQL应用的普遍</li></ul><h2 id="第七种分类是从multi-model-databases中的查询优化策略出发进行的分类"><a href="#第七种分类是从multi-model-databases中的查询优化策略出发进行的分类" class="headerlink" title="第七种分类是从multi-model databases中的查询优化策略出发进行的分类"></a>第七种分类是从multi-model databases中的查询优化策略出发进行的分类</h2><img src="/images/A%20New%20Journey%20to%20Handle%20the%20Variety%20of%20Data/image-20221210131035218.png" alt="image-20221210131035218" style="zoom:80%;" /><p>从上图和文中分析可以得到以下结论：</p><ul><li>最普遍的优化查询的策略是B+&#x2F;B-树索引</li><li>与此同时，hashing也是在不同种类的DBMSs使用的普遍策略</li><li>但是，总的来说没有一个通用的multi-model查询优化的合适的办法</li></ul><h2 id="综上所述，针对文章从多个维度对multi-model-databases进行的讨论，可以得出以下结论："><a href="#综上所述，针对文章从多个维度对multi-model-databases进行的讨论，可以得出以下结论：" class="headerlink" title="综上所述，针对文章从多个维度对multi-model databases进行的讨论，可以得出以下结论："></a>综上所述，针对文章从多个维度对multi-model databases进行的讨论，可以得出以下结论：</h2><ul><li>支持multi-model databases的数据模型包括key&#x2F;value,column,relational,document,XML,graph和object</li><li>multi-model databases应用了在SQL、XML、graph language基础上拓展的跨模型的语言</li><li>在multi-model databases中使用的数据索引包括inverted index, B- tree,materialized view,hashing和bitmap index。而这些中的大多数都支持对于relational或XML数据库的扩展</li></ul><h2 id="然后，文章对不同的multi-model-databases进行了详细的介绍，重点介绍每一类代表的关键闪光点"><a href="#然后，文章对不同的multi-model-databases进行了详细的介绍，重点介绍每一类代表的关键闪光点" class="headerlink" title="然后，文章对不同的multi-model databases进行了详细的介绍，重点介绍每一类代表的关键闪光点"></a>然后，文章对不同的multi-model databases进行了详细的介绍，重点介绍每一类代表的关键闪光点</h2><h2 id="Relational-Stores"><a href="#Relational-Stores" class="headerlink" title="Relational Stores"></a>Relational Stores</h2><p>​文章第一部分介绍的便是关系数据库存储——multi-model system的最大集合之一。</p><p>​文中提到了关系型数据的拓展性、通用性和易用性几个特点。</p><p>​文中首先介绍了PosgreSQL——一个非常经典和具有年代感的关系型DBMS，此处提到了json和jsonb这类multi-model数据组织类型，并简单对比了两者的优缺点：</p><ul><li>json插入快但取用慢</li><li>jsonb作为json的解析二进制格式，插入慢但取用快</li></ul><p>​此处还介绍了存储在PosgreSQL中的数据类型可以通过一种SQL扩展的语言进行查询得到，如-&gt; int,-&gt;string,#&gt;text,@&gt;,@&lt;,?,?&amp;,?|,||,-int,#-text[]等。</p><p>​下图便是一个查询的例子：</p><img src="/images/A%20New%20Journey%20to%20Handle%20the%20Variety%20of%20Data/image-20221210133430731.png" alt="image-20221210133430731" style="zoom:80%;" /><p>​沿着jsonb，本小节还介绍了其索引相关的知识，简单提到了<strong>GIN</strong>以及B-tree，特别是<strong>GIN索引结构</strong>的两种情况：posting tree和posting list，而这与HashMap的存储策略非常类似。</p><p>​接着，文章又介绍了SQL Server、DB2、Oracle、MySQL对Relational Data和key&#x2F;value Data的multi-model操作支持，对XML、JSON数据类型的支持以及对应的数据操作、索引机制。</p><p>​最后文章简单介绍了基于以上传统Relational database所研发的没有固定数据模型的Sinew数据库，它可以支持上述提到的多种数据模型的灵活操作。</p><h2 id="Column-Stores"><a href="#Column-Stores" class="headerlink" title="Column Stores"></a>Column Stores</h2><p>​在介绍Column Store之前，文章先对“column store”进行了解读：</p><ul><li><strong>单列存储</strong>：一个列里面只存储单个属性</li><li><strong>列簇存储</strong>：一个列里面存储多个属性，以列簇的形式呈现</li></ul><p>​该部分主要对列簇式存储数据库进行了探讨</p><p>​文章首先介绍了Cassandra并提出了以下几个特性：</p><ul><li><p><strong>存储机制</strong></p><p>内部的数据存储在SSTable中，SStable会进一步划分为block，SStable是immutable的，因此修改的数据会存储到一个新的SStable并且使用compaction策略进行合并。</p><p>同时，其同样支持json格式，但需要提前指定schema，如下图是一个json schema从里向外层层嵌套预定义以及对应的数据插入例子：</p><img src="/images/A%20New%20Journey%20to%20Handle%20the%20Variety%20of%20Data/image-20221210140207101.png" alt="image-20221210140207101" style="zoom:80%;" /></li><li><p><strong>查询语言</strong></p><p>可以把它当作SQL的子集，支持SQL常见操作。</p><p>但是在针对列簇数据进行where查询和索引时会受到一些限制</p></li><li><p><strong>索引机制</strong></p><p>primary key:using an inverted index</p><p>secondary indices:使用B+ tree以支持范围查询</p><p>虽然合适的索引可以增加查询效率，但是并不推荐针对频繁修改、删除、大范围查询的数据表进行索引的建立</p></li></ul><p>​然后，文章简单介绍了Column-oriented数据库CrateDb查询层⾯的Lucence索引支持，这是一种动态的schema数据库，</p><p>​然后，文章介绍的DynamoDB可作为云部署的、具有动态Schema、分布式的高性能数据库，它支持json和key&#x2F;value的灵活的数据模型，同时还介绍了在Dynamo中一个item由哪些部分组成。</p><p>​然后，介绍了Dynamo中使用哪些API对item进行各种操作。</p><p>​然后，介绍了在Dynamo中使用的两种primary key：</p><ul><li><strong>partition key</strong></li><li><strong>sort key</strong></li></ul><p>​最后文章提到了HPE高性能分布式数据库中的virtual column和real column之间的转换，如virtual column可以转换成real column以获得更高的查询性能。</p><p>​Dynamo和HPE都提到了相应的SQL操作、索引、针对json和其他数据模型的支持。</p><h2 id="Key-x2F-value-Stores"><a href="#Key-x2F-value-Stores" class="headerlink" title="Key&#x2F;value Stores"></a>Key&#x2F;value Stores</h2><p>​键值数据库是最简单的非关系数据库，只需要通过id进行API的调用来实现数据的存储和获取。</p><p>​Riak作为经典的kv数据库，其基于Sorl的集成提供了高效的索引机制，另外其还具有分布式、高可用、高扩展等特性。</p><p>​c-treeACE同时支持SQL和NoSQL两种操作模式。</p><p>​最后介绍的Oracle NoSQL除了具备json、index外，还添加了RDF、Graph module、Child table等机制</p><h2 id="Document-Stores"><a href="#Document-Stores" class="headerlink" title="Document Stores"></a>Document Stores</h2><p>​文档数据库可以看作键值数据库的增强模式，其索引与kv数据库类似。综合来看，文档数据库更加贴近multi-model database。</p><p>​文章首先介绍了ArangDB这一原生多模型、开源的数据库，其强大的AQL查询支持在一个单个查询中混合使用kv、doc和graph三种数据模型。</p><p>​此外，其具有着和json类似的文档存储组织的存储方式；</p><p>​同时，文章还介绍了其文档之间的关系图模型和对应图算法的操作，如图遍历和求最短路径；</p><p>​同时，文章还介绍了Hashing和SkipList索引方式及其之间的差别：</p><ul><li>Hashing不支持范围查询而SkipList支持</li></ul><p>​随后，文章介绍了Couchbase这一基于内存的高性能文档数据库，其特性总结如下：</p><ul><li>对于json存储格式的数据无需预先创建schema，这使得其数据操作更加flexible</li><li>其针对频繁操作的document进行了缓存，可以提供更加高效的服务响应</li><li>其基于SQL的查询语言$N_1QL$提供了对json、kv和geographical data的方便访问</li><li>其提供了B+ tree和B+ trie两种索引，其中B+ trie在tree上构造更短的depth来获得更好的查询效率</li></ul><p>​随后，文章介绍了MongoDB这一最流行的文档数据库，文章介绍了其flexible schema、json数据查询、Manual references和DBRefs references、BSON作为JSON的二进制高效表示等主要特性。</p><p>​随后文章介绍了Cosmos DB和MarkLogic这两款数据库，其除了最基本的文档数据库所具有的特性之外，还具有着其各自的特性：</p><ul><li>Cosmos DB的（constistent&#x2F;lazy&#x2F;none）索引更新策略</li><li>MarkLogic的基于树状存储结构为XML和JSON提供的统一索引管理方式</li><li>MarkLogic还提供了kv互换下的两种范围索引数据结构：kv和vk型</li></ul><h2 id="Gragh-Stores"><a href="#Gragh-Stores" class="headerlink" title="Gragh Stores"></a>Gragh Stores</h2><p>​图数据库以图论为数学基础，各种复杂的算法都集中在图结构中</p><p>​文章针对OrientDB这一图数据库的代表从存储结构、数据操作、索引等关键点进行了分析。</p><p>​OrientDB支持针对云环境的支持，这意味着其能够提供DAAS平台层面的服务。即其支持类型继承以及类间关系的建立如引用。</p><p>​文章介绍了两种类间关系模式：</p><ol><li><p>引用（Refreneced）</p><p>引用通过存储对应的物理连接来维持关系</p></li><li><p>嵌入（Embedded）</p><p>嵌入通过直接将实际数据存储在对应的数据对象下形成共生依赖</p></li></ol><p>​下图是在OrientDB中存储multi-model data的一个例子：</p><img src="/images/A%20New%20Journey%20to%20Handle%20the%20Variety%20of%20Data/image-20221210144454383.png" alt="image-20221210144454383" style="zoom:80%;" /><h2 id="Other-Stores"><a href="#Other-Stores" class="headerlink" title="Other Stores"></a>Other Stores</h2><p>​除了上述几种主流的数据存储模型之外，还存在一些潜在的多模数据存储模型，如object-model、multi-use-case stores</p><ul><li><p>object-model</p><p>从面向对象的角度来看，其可以存储任何类型，因为“万物皆对象”。</p><p>object-model data model的代表是InterSystems Cache，其所支持的schemaless、schema-based的存储策略对于数据定义操作提供了更大的灵活性</p></li><li><p>Multi-use-case</p><p>multi-use-case的核心思想是：“one size fits all”</p></li></ul><h2 id="接着，文章说了一些挑战和问题"><a href="#接着，文章说了一些挑战和问题" class="headerlink" title="接着，文章说了一些挑战和问题"></a>接着，文章说了一些挑战和问题</h2><p>​文章将遇到的挑战和问题划分成了四类：</p><ul><li>multi-model查询处理和优化</li><li>multi-model schema的设计和优化</li><li>multi-model的演变问题</li><li>multi-model的扩展性问题</li></ul><h2 id="最后："><a href="#最后：" class="headerlink" title="最后："></a>最后：</h2><p>​文章对比了各种数据模型的典型的数据库产品，并重点针对数据存储模型、查询操作语言、索引、可扩展性等特性进行阐述，但存在一个问题是：</p><p><strong><u>我们还没有一个较为成熟的、可针对多种数据模型提供一个统一操作接口的数据库技术</u></strong></p><p>​而在大数据的背景下，针对volume、velocity、variety、veracity、value  5v问题急需一个统一的数据库技术来操作多种数据库模型，打破各个数据模型之间的壁垒，进而才能提高数据处理的效率、降低数据处理的难度、节约企业数据处理的成本。</p><p>​我非常相信多年以后一定能有这些问题的解决办法，或许某一天就会出现一个这样统一的数据库技术针对各种数据模型进行统一的处理。</p><p>​希望早日到达“one size fits a bunch”的境地。</p>]]></content>
    
    
    <categories>
      
      <category>非关系数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>非关系数据库</tag>
      
      <tag>论文阅读</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法导论22.4-拓扑排序-期末复习</title>
    <link href="/2022/12/03/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA22.4-%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F-%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/"/>
    <url>/2022/12/03/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA22.4-%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F-%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="算法导论22-4-拓扑排序-期末复习"><a href="#算法导论22-4-拓扑排序-期末复习" class="headerlink" title="算法导论22.4-拓扑排序-期末复习"></a>算法导论22.4-拓扑排序-期末复习</h1><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA22.4-%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F-%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230119143110556.png" alt="image-20230119143110556"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">TOPOLOGICAL-SORT(G)<br>call <span class="hljs-title function_">DFS</span><span class="hljs-params">(G)</span> to compute finishing times v.f <span class="hljs-keyword">for</span> each vertex v<br>as each vertex is finished,insert it onto the front of a linked <span class="hljs-built_in">list</span><br><span class="hljs-keyword">return</span> the linked <span class="hljs-built_in">list</span> of verticles<br></code></pre></td></tr></table></figure><p>拓扑排序的时间复杂度:<br>$$<br>\theta(V+E)<br>$$</p><h2 id="拓扑排序算法的正确性"><a href="#拓扑排序算法的正确性" class="headerlink" title="拓扑排序算法的正确性"></a>拓扑排序算法的正确性</h2><p>证明时要用到有向无环图的特征<br>$$<br>一个有向图G&#x3D;(V,E)是无环的当且仅当对其进行的深度优先搜索不产生后向边<br>$$<br>正确性：<br>$$<br>拓扑排序算法TOPOLOGICAL-SORT生成的是有向无环图的拓扑排序<br>$$</p><h2 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h2><h2 id="22-4-2-拓扑排序计算有向无环图简单路径的条数"><a href="#22-4-2-拓扑排序计算有向无环图简单路径的条数" class="headerlink" title="22.4-2 拓扑排序计算有向无环图简单路径的条数"></a>22.4-2 拓扑排序计算有向无环图简单路径的条数</h2><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA22.4-%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F-%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230119143129306.png" alt="image-20230119143129306"></p><p>算法的实现思路为：</p><p>令u.path_count属性表示u结点到v节点简单路径的条数</p><ul><li>如果u结点和v结点相同，则只有一条路径；</li><li>如果u结点和v结点不相同，并且u.path_count&#x3D;NIL(这表示递归还未结束，递归结束时，这个值应该是一个Integer，而不是一个NIL)时，遍历u的邻接链表中的所有结点，递归调用SIMPLE-PATH-NUMBER函数，累加path_count，因为每一条从u到v的路径一定会经过u的邻接结点；</li><li>如果u结点和v结点不相同并且u.path_count!&#x3D;NIL,表示递归已经调用结束，路径条数已经求出，可以return。</li><li>该算法的时间复杂度是$O(V+E)$，是线性时间算法。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c">SIMPLE-PATH-NUMBER(u,v)<br><span class="hljs-keyword">if</span>(u==v) <br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(u.path_count!=NIL) <br><span class="hljs-keyword">return</span> u.path_count<br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">for</span> each w ∈ Adj[u] <span class="hljs-keyword">do</span><br>u.path_count=u.path_count+SIMPLE-PATH-NUMBER(w,v)<br><span class="hljs-keyword">return</span> u.path_count<br></code></pre></td></tr></table></figure><h2 id="22-4-5-寻找入度为0的结点的方法实现拓扑排序"><a href="#22-4-5-寻找入度为0的结点的方法实现拓扑排序" class="headerlink" title="22.4-5 寻找入度为0的结点的方法实现拓扑排序"></a>22.4-5 寻找入度为0的结点的方法实现拓扑排序</h2><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA22.4-%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F-%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230119143141495.png" alt="image-20230119143141495"></p><p>找出入度为0的节点，删除该点并删除该点所有的出边，删除的顺序就是拓扑排序的顺序</p><h4 id="实现思想："><a href="#实现思想：" class="headerlink" title="实现思想："></a>实现思想：</h4><ol><li>遍历所有邻接链表，统计每个结点的入度，时间复杂度为O(E)</li><li>找出一个入度为0的结点u，将u的所有出边(u,v)的目的点v的入读减一，时间复杂度为O(V+E)</li><li>循环步骤1</li></ol><h4 id="如果G包含环路："><a href="#如果G包含环路：" class="headerlink" title="如果G包含环路："></a>如果G包含环路：</h4><ol><li>若G中包含环路，则会找不到入度为0的结点，且G中仍然有结点不能删除（剩下的就是G的回路）。</li></ol><h1 id="23-1-11"><a href="#23-1-11" class="headerlink" title="23.1-11"></a>23.1-11</h1><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA22.4-%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F-%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230119143152403.png" alt="image-20230119143152403"></p><p>Consider edge E is the edge whose weight is decreased by one unit.</p><p><strong>createUpdatedMST(MST T, edge E)</strong></p><p>  <strong>Step 1 :</strong> Sort the edges in the MST  T in decreasing order by weight.</p><p>  <strong>Step 2 :</strong> Select the <strong>maximum weight edge</strong> from the above sorted list which is not yet selected. Let this edge be <strong>e.</strong></p><p>  <strong>Step 3 :</strong> If weight of edge <strong>E</strong> is more than weight of edge <strong>e</strong>, exit the algorithm as <strong>given MST T is the actual MST of the graph.</strong>(不做任何改变)</p><p>   <strong>Step 4 :</strong> Else if weight of edge E is less than weight of edge e selected from the list, check if adding <strong>E</strong> to the MST and removing <strong>e</strong> from MST results in a cycle.</p><p>   <strong>Step 5 :</strong> If a cycle is not formed return the new updated MST with edge <strong>E.</strong></p><p>   <strong>Step 6 :</strong> If the cycle is formed, go to step 2 and check the next highest weight edge from the sorted list.</p><h1 id="23-2-7"><a href="#23-2-7" class="headerlink" title="23.2-7"></a>23.2-7</h1><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA22.4-%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F-%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230119143203274.png" alt="image-20230119143203274"></p><p>线性时间</p><ol><li><p>The greedy method works on the basis of this selection policy: <strong>choose the minimum-weight remaining edge.</strong> If that edge does not create a cycle in the evolving tree, add it to the tree.</p></li><li><p>For finding and deleting the min-weight edge, use a minheap where its nodes are the labels+weights of the graph edges.</p></li><li><p>For <strong>cycle detection</strong>, note that</p></li></ol><ul><li>T is a forest at any given time,</li><li>adding an edge eliminates two trees from the forest and replaces them by a new tree containg the union of the nodes of the two old trees, and</li><li>and edge $e&#x3D;(x,y)$ creates a cycle if both x and y belong to the same tree in the forest.</li></ul><p>Complexity: </p><ul><li>$O(|E|)$ to build the heap</li><li>up to |E| calls to U and F, taking  $ O(|E|log n)$ time</li></ul><p>therefore, the total time is $O(|E|log |E|).$</p>]]></content>
    
    
    <categories>
      
      <category>算法导论</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法导论</tag>
      
      <tag>深拓扑排序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法导论22.3-深度优先搜索-期末复习</title>
    <link href="/2022/12/03/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA22.3-%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2-%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/"/>
    <url>/2022/12/03/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA22.3-%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2-%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="算法导论22-3-深度优先搜索-期末复习"><a href="#算法导论22-3-深度优先搜索-期末复习" class="headerlink" title="算法导论22.3-深度优先搜索-期末复习"></a>算法导论22.3-深度优先搜索-期末复习</h1><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA22.3-%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2-%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230119141701213.png" alt="image-20230119141701213"></p><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA22.3-%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2-%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230119141722098.png" alt="image-20230119141722098"></p><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA22.3-%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2-%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230119141733677.png" alt="image-20230119141733677"></p><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA22.3-%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2-%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230119141746614.png" alt="image-20230119141746614"></p><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA22.3-%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2-%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230119141759501.png" alt="image-20230119141759501"></p><p>并且是两颗深度优先树</p><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA22.3-%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2-%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230119141809599.png" alt="image-20230119141809599"></p><h2 id="边的分类："><a href="#边的分类：" class="headerlink" title="边的分类："></a>边的分类：</h2><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA22.3-%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2-%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230119141823024.png" alt="image-20230119141823024"></p><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA22.3-%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2-%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230119141839717.png" alt="image-20230119141839717"></p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA22.3-%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2-%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230119141851749.png" alt="image-20230119141851749" style="zoom:80%;" /><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA22.3-%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2-%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230119141901956.png" alt="image-20230119141901956" style="zoom:67%;" /><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA22.3-%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2-%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230119141926849.png" alt="image-20230119141926849"></p><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA22.3-%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2-%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230119141943223.png" alt="image-20230119141943223"></p>]]></content>
    
    
    <categories>
      
      <category>算法导论</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法导论</tag>
      
      <tag>深度优先</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法导论22.2-广度优先搜索-期末复习</title>
    <link href="/2022/12/03/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA22.2-%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2-%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/"/>
    <url>/2022/12/03/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA22.2-%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2-%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="算法导论22-2-广度优先搜索-期末复习"><a href="#算法导论22-2-广度优先搜索-期末复习" class="headerlink" title="算法导论22.2-广度优先搜索-期末复习"></a>算法导论22.2-广度优先搜索-期末复习</h1><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA22.2-%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2-%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230119142127918.png" alt="image-20230119142127918"></p><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA22.2-%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2-%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230119142148814.png" alt="image-20230119142148814"></p><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA22.2-%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2-%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230119142209273.png" alt="image-20230119142209273"></p>]]></content>
    
    
    <categories>
      
      <category>算法导论</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法导论</tag>
      
      <tag>广度优先</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法导论22.1-图的表示-期末复习</title>
    <link href="/2022/12/03/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA22.1-%E5%9B%BE%E7%9A%84%E8%A1%A8%E7%A4%BA-%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/"/>
    <url>/2022/12/03/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA22.1-%E5%9B%BE%E7%9A%84%E8%A1%A8%E7%A4%BA-%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="算法导论22-1-图的表示-期末复习"><a href="#算法导论22-1-图的表示-期末复习" class="headerlink" title="算法导论22.1-图的表示-期末复习"></a>算法导论22.1-图的表示-期末复习</h1><h2 id="G-x3D-V-E-的两种标准表示方法："><a href="#G-x3D-V-E-的两种标准表示方法：" class="headerlink" title="G&#x3D;(V,E)的两种标准表示方法："></a>G&#x3D;(V,E)的两种标准表示方法：</h2><ol><li><h3 id="邻接链表"><a href="#邻接链表" class="headerlink" title="邻接链表"></a>邻接链表</h3><ul><li><p>对于有向图</p><p>对于边(u,v)来说，节点v将出现在链表Adj[u]里，所有邻接链表的长度之和等于|E|，</p></li><li><p>对于无向图</p><p>对于边(u,v)来说，节点v将出现在链表Adj[u]，节点u将出现在链表Adj[v]中，所有邻接链表的长度之和等于2|E|，</p></li><li><p>邻接链表表示法的存储空间需求为$\theta(V+E)$</p></li><li><p>权重图</p><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA22.1-%E5%9B%BE%E7%9A%84%E8%A1%A8%E7%A4%BA-%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230119143241560.png" alt="image-20230119143241560"></p></li></ul></li><li><h3 id="邻接矩阵"><a href="#邻接矩阵" class="headerlink" title="邻接矩阵"></a>邻接矩阵</h3><ul><li><p>定义</p><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA22.1-%E5%9B%BE%E7%9A%84%E8%A1%A8%E7%A4%BA-%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230119143253274.png" alt="image-20230119143253274"></p></li><li><p>存储空间需求为$\theta(V^2)$</p></li><li><p>权重图</p><p><img src="/images/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA22.1-%E5%9B%BE%E7%9A%84%E8%A1%A8%E7%A4%BA-%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20230119143305557.png" alt="image-20230119143305557"></p></li><li><p>表示图的属性</p><ul><li>v.d表示节点v的属性d</li><li>边（u,v）.f表示边(u,v)的属性f</li></ul></li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>算法导论</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法导论</tag>
      
      <tag>图的表示</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/12/01/10205101530-%E8%B5%B5%E6%99%97%E7%91%9C-%E7%AE%97%E6%B3%95%E4%BD%9C%E4%B8%9A12.1/"/>
    <url>/2022/12/01/10205101530-%E8%B5%B5%E6%99%97%E7%91%9C-%E7%AE%97%E6%B3%95%E4%BD%9C%E4%B8%9A12.1/</url>
    
    <content type="html"><![CDATA[<p><img src="C:/Users/zhy19/AppData/Roaming/Typora/typora-user-images/image-20221201102246569.png" alt="image-20221201102246569"></p><p><img src="C:/Users/zhy19/AppData/Roaming/Typora/typora-user-images/image-20221201102305049.png" alt="image-20221201102305049"></p><p><img src="C:/Users/zhy19/AppData/Roaming/Typora/typora-user-images/image-20221201102318659.png" alt="image-20221201102318659"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>32.3 - android-批量上传图片</title>
    <link href="/2022/11/28/32.3---android-%E6%89%B9%E9%87%8F%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87/"/>
    <url>/2022/11/28/32.3---android-%E6%89%B9%E9%87%8F%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87/</url>
    
    <content type="html"><![CDATA[<h1 id="32-3-android-批量上传图片"><a href="#32-3-android-批量上传图片" class="headerlink" title="32.3 - android-批量上传图片"></a>32.3 - android-批量上传图片</h1><p>定义接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 上传单张文件</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> file</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> flavor</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@Multipart</span><br>   <span class="hljs-meta">@POST(&quot;v1/r&quot;)</span><br>   Observable&lt;DetailResponse&lt;BaseId&gt;&gt; <span class="hljs-title function_">uploadFile</span><span class="hljs-params">(<span class="hljs-meta">@Part</span> MultipartBody.Part file, <span class="hljs-meta">@Part(&quot;flavor&quot;)</span>RequestBody flavor)</span>;<br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 上传多张文件</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> file</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> flavor</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@Multipart</span><br>   <span class="hljs-meta">@POST(&quot;v1/r/multi&quot;)</span><br>   Observable&lt;ListResonse&lt;BaseId&gt;&gt; <span class="hljs-title function_">uploadFiles</span><span class="hljs-params">(<span class="hljs-meta">@Part</span> List&lt;MultipartBody.Part&gt; file, <span class="hljs-meta">@Part(&quot;flavor&quot;)</span>RequestBody flavor)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 上传单张图片</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span>  Observable&lt;DetailResponse&lt;BaseId&gt;&gt; <span class="hljs-title function_">uploadFile</span><span class="hljs-params">(MultipartBody.Part file, RequestBody flavor)</span>&#123;<br>    <span class="hljs-keyword">return</span> service.uploadFile(file,flavor)<br>            .subscribeOn(Schedulers.io())<br>            .observeOn(AndroidSchedulers.mainThread());<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 上传多张图片</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> Observable&lt;ListResonse&lt;BaseId&gt;&gt; <span class="hljs-title function_">uploadFiles</span><span class="hljs-params">(List&lt;MultipartBody.Part&gt; file,RequestBody flavor)</span>&#123;<br>    <span class="hljs-keyword">return</span> service.uploadFiles(file,flavor)<br>            .subscribeOn(Schedulers.io())<br>            .observeOn(AndroidSchedulers.mainThread());<br>&#125;<br></code></pre></td></tr></table></figure><p>在PublishFeedActivity中，当用户点击发布时，首先判断用户有没有选择图片:</p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
      <tag>批量上传图片</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>android-32.2- 选择图片交互功能</title>
    <link href="/2022/11/28/android-32.2--%E9%80%89%E6%8B%A9%E5%9B%BE%E7%89%87%E4%BA%A4%E4%BA%92%E5%8A%9F%E8%83%BD/"/>
    <url>/2022/11/28/android-32.2--%E9%80%89%E6%8B%A9%E5%9B%BE%E7%89%87%E4%BA%A4%E4%BA%92%E5%8A%9F%E8%83%BD/</url>
    
    <content type="html"><![CDATA[<h1 id="android-32-2-选择图片交互功能"><a href="#android-32-2-选择图片交互功能" class="headerlink" title="android-32.2-选择图片交互功能"></a>android-32.2-选择图片交互功能</h1><p>使用第三方框架:</p><p>选择图片和压缩图片</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>图片选择<br><span class="hljs-regexp">//</span>https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/LuckSiege/</span>PictureSelector<br>implementation <span class="hljs-string">&#x27;io.github.lucksiege:pictureselector:v3.0.9&#x27;</span><br>implementation <span class="hljs-string">&#x27;io.github.lucksiege:compress:v3.0.9&#x27;</span><br><br></code></pre></td></tr></table></figure><p>九宫格图片是RecyclerView</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--        图片列表控件--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">androidx.recyclerview.widget.RecyclerView</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/list&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_marginHorizontal</span>=<span class="hljs-string">&quot;@dimen/d16&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_marginVertical</span>=<span class="hljs-string">&quot;@dimen/d16&quot;</span>&gt;</span><br>            <br>        <span class="hljs-tag">&lt;/<span class="hljs-name">androidx.recyclerview.widget.RecyclerView</span>&gt;</span><br></code></pre></td></tr></table></figure><p>设置默认加号图片</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml">    @Override<br>    protected void initDatum() &#123;<br>        super.initDatum();<br>        imageAdapter = new ImageAdapter(R.layout.item_image);<br>        binding.list.setAdapter(imageAdapter);<br>//        为adapter填数据<br>        setData(new ArrayList<span class="hljs-tag">&lt;&gt;</span>());<br>    &#125;<br><br>    private void setData(List<span class="hljs-tag">&lt;<span class="hljs-name">Object</span>&gt;</span> data) &#123;<br>        if(data.size()&lt;9)&#123;<br>//            添加一个加号<br>            data.add(R.drawable.add_fill);<br>        &#125;<br>        imageAdapter.setNewInstance(data);<br>    &#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (o <span class="hljs-keyword">instanceof</span> Integer)&#123;<br>           <span class="hljs-comment">//本地图片</span><br>           iconView.setImageResource((<span class="hljs-type">int</span>)o);<br>       &#125;<br></code></pre></td></tr></table></figure><p>设置layoutManager,在PublishFeedActivity中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initViews</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">super</span>.initViews();<br>    GridLayoutManager layoutManager=<span class="hljs-keyword">new</span> <span class="hljs-title class_">GridLayoutManager</span>(getHostActivity(),<span class="hljs-number">4</span>);<br>    binding.list.setLayoutManager(layoutManager);<br>&#125;<br>   <span class="hljs-comment">//添加分割线</span><br>    <span class="hljs-type">GridDividerItemDecoration</span> <span class="hljs-variable">divider</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GridDividerItemDecoration</span>(getHostActivity(), (<span class="hljs-type">int</span>) DensityUtil.dip2px(getHostActivity(), <span class="hljs-number">5</span>));<br>    binding.list.addItemDecoration(divider);<br><br></code></pre></td></tr></table></figure><p>监听加号点击事件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">imageAdapter.setOnItemClickListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OnItemClickListener</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onItemClick</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> BaseQuickAdapter&lt;?, ?&gt; adapter, <span class="hljs-meta">@NonNull</span> View view, <span class="hljs-type">int</span> position)</span> &#123;<br>                <span class="hljs-keyword">if</span>(imageAdapter.getItem(position) <span class="hljs-keyword">instanceof</span> Integer)&#123;<br>                    <span class="hljs-comment">//点击的是按钮</span><br>                    selectImage();<br>                &#125;<br>            &#125;<br>        &#125;);<br></code></pre></td></tr></table></figure><p>选择图片,使用GlideEngine加载图片</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">selectImage</span><span class="hljs-params">()</span> &#123;<br>    PictureSelector.create(<span class="hljs-built_in">this</span>)<br>            .openGallery(SelectMimeType.ofImage())<br>        <br>        <br>            .setImageEngine(GlideEngine.createGlideEngine())<br>        <br>        <br>            .setMaxSelectNum(<span class="hljs-number">9</span>)<span class="hljs-comment">// 最大图片选择数量 int</span><br>            .setMinSelectNum(<span class="hljs-number">1</span>)<span class="hljs-comment">// 最小选择数量 int</span><br>            .setImageSpanCount(<span class="hljs-number">3</span>)<span class="hljs-comment">// 每行显示个数 int</span><br>            .setSelectionMode(SelectModeConfig.MULTIPLE)<span class="hljs-comment">// 多选 or 单选 MULTIPLE or SINGLE</span><br>            .isPreviewImage(<span class="hljs-literal">true</span>)<span class="hljs-comment">// 是否可预览图片 true or false</span><br>            .isDisplayCamera(<span class="hljs-literal">true</span>)<span class="hljs-comment">// 是否显示拍照按钮 true or false</span><br>            .setCameraImageFormat(PictureMimeType.JPEG)<span class="hljs-comment">// 拍照保存图片格式后缀,默认jpeg</span><br>            <span class="hljs-comment">//压缩</span><br>            .setCompressEngine(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CompressFileEngine</span>() &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onStartCompress</span><span class="hljs-params">(Context context, ArrayList&lt;Uri&gt; source, OnKeyValueResultCallbackListener call)</span> &#123;<br>                    Luban.with(context).load(source).ignoreBy(<span class="hljs-number">100</span>)<br>                            .setCompressListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OnNewCompressListener</span>() &#123;<br>                                <span class="hljs-meta">@Override</span><br>                                <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onStart</span><span class="hljs-params">()</span> &#123;<br><br>                                &#125;<br><br>                                <span class="hljs-meta">@Override</span><br>                                <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onSuccess</span><span class="hljs-params">(String source, File compressFile)</span> &#123;<br>                                    <span class="hljs-keyword">if</span> (call != <span class="hljs-literal">null</span>) &#123;<br>                                        call.onCallback(source, compressFile.getAbsolutePath());<br>                                    &#125;<br>                                &#125;<br><br>                                <span class="hljs-meta">@Override</span><br>                                <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onError</span><span class="hljs-params">(String source, Throwable e)</span> &#123;<br>                                    <span class="hljs-keyword">if</span> (call != <span class="hljs-literal">null</span>) &#123;<br>                                        call.onCallback(source, <span class="hljs-literal">null</span>);<br>                                    &#125;<br>                                &#125;<br>                            &#125;).launch();<br>                &#125;<br>            &#125;)<br>            .forResult(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OnResultCallbackListener</span>&lt;LocalMedia&gt;() &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onResult</span><span class="hljs-params">(ArrayList&lt;LocalMedia&gt; result)</span> &#123;<br>                    setData(Lists.newArrayList(result));<br>                &#125;<br><br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCancel</span><span class="hljs-params">()</span> &#123;<br><br>                &#125;<br>            &#125;);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>在imageAdapter中,为了显示选择的图片，:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">&#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-comment">//选择的图片</span><br>            LocalMedia data=(LocalMedia) o;<br>            ImageUtil.showLocalImage(iconView,data.getCompressPath());<br>            holder.setGone(R.id.close,<span class="hljs-literal">false</span>);<span class="hljs-comment">//设置该属性可选择是否显示删除图片按钮</span><br>        &#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showLocalImage</span><span class="hljs-params">(ImageView view, String data)</span> &#123;<br>    RequestOptions options=getCommonRequestOptions();<br>    <span class="hljs-comment">//使用Glide加载图片</span><br>    Glide.with(view.getContext())<br>            .load(data)<br>            .apply(options)<br>            .into(view);<br>&#125;<br></code></pre></td></tr></table></figure><p>实现删除图片，子控件的点击事件:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">imageAdapter.addChildClickViewIds(R.id.close);<br>imageAdapter.setOnItemChildClickListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OnItemChildClickListener</span>() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onItemChildClick</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> BaseQuickAdapter&lt;?, ?&gt; adapter, <span class="hljs-meta">@NonNull</span> View view, <span class="hljs-type">int</span> position)</span> &#123;<br>        imageAdapter.removeAt(position);<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
      <tag>选择图片交互功能</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>android-32.1- 发布文本动态</title>
    <link href="/2022/11/28/android-32.1--%E5%8F%91%E5%B8%83%E6%96%87%E6%9C%AC%E5%8A%A8%E6%80%81/"/>
    <url>/2022/11/28/android-32.1--%E5%8F%91%E5%B8%83%E6%96%87%E6%9C%AC%E5%8A%A8%E6%80%81/</url>
    
    <content type="html"><![CDATA[<h1 id="android-32-1-发布文本动态"><a href="#android-32-1-发布文本动态" class="headerlink" title="android-32.1- 发布文本动态"></a>android-32.1- 发布文本动态</h1><p>设置浮动按钮：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    浮动按钮--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">com.google.android.material.floatingactionbutton.FloatingActionButton</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_gravity</span>=<span class="hljs-string">&quot;right|bottom&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:src</span>=<span class="hljs-string">&quot;@drawable/edit&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_marginRight</span>=<span class="hljs-string">&quot;@dimen/padding_outer&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_marginBottom</span>=<span class="hljs-string">&quot;@dimen/padding_outer&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">com.google.android.material.floatingactionbutton.FloatingActionButton</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="实现发布动态布局"><a href="#实现发布动态布局" class="headerlink" title="实现发布动态布局"></a>实现发布动态布局</h2><p>没有什么特殊需求的时候，根布局就用CoordinateLayout</p><p>要注意的是，用到CoordinateLayout时，不想让LiearLayout盖住Toolbar，要给LiearLayout添加一个属性:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">app:layout_behavior=&quot;com.google.android.material.appbar.AppBarLayout$ScrollingViewBehavior&quot;<br></code></pre></td></tr></table></figure><p>toolbar下方是一个垂直排列的LinearLayout，</p><p>LinearLayout中首先是一个输入框，然后是一个RecyclerView</p><p>输入框采用相对布局，因为显示的字数可以用相对布局定位到输入框的右下角</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs xml">    <span class="hljs-tag">&lt;<span class="hljs-name">LinearLayout</span> <span class="hljs-attr">android:layout_marginTop</span>=<span class="hljs-string">&quot;@dimen/padding_outer&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_behavior</span>=<span class="hljs-string">&quot;com.google.android.material.appbar.AppBarLayout$ScrollingViewBehavior&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:orientation</span>=<span class="hljs-string">&quot;vertical&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--        输入框--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">RelativeLayout</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;150dp&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">EditText</span></span><br><span class="hljs-tag">                <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/content&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">android:layout_marginHorizontal</span>=<span class="hljs-string">&quot;@dimen/d16&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">android:gravity</span>=<span class="hljs-string">&quot;left|top&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">android:hint</span>=<span class="hljs-string">&quot;发一条动态吧~&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">android:lineSpacingMultiplier</span>=<span class="hljs-string">&quot;1.2&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">android:maxLength</span>=<span class="hljs-string">&quot;150&quot;</span>&gt;</span><br><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">EditText</span>&gt;</span><br><span class="hljs-comment">&lt;!--            字数统计--&gt;</span><br><span class="hljs-comment">&lt;!--            将文本控件通过relativeLayout定位到右侧--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">TextView</span></span><br><span class="hljs-tag">                <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/count&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">android:layout_alignParentRight</span>=<span class="hljs-string">&quot;true&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">android:layout_alignParentBottom</span>=<span class="hljs-string">&quot;true&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">android:layout_margin</span>=<span class="hljs-string">&quot;@dimen/d16&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;0/140&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">android:textColor</span>=<span class="hljs-string">&quot;@color/black80&quot;</span>&gt;</span><br>                <br>            <span class="hljs-tag">&lt;/<span class="hljs-name">TextView</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">RelativeLayout</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">LinearLayout</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>在右上角添加发布按钮,创建一个Menu：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">onCreateOptionsMenu</span><span class="hljs-params">(Menu menu)</span> &#123;<br>    getMenuInflater().inflate(R.menu.publish,menu);<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.onCreateOptionsMenu(menu);<br>&#125;<br></code></pre></td></tr></table></figure><p>新建一个Publish.xml:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">menu</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:app</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res-auto&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/publish&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:title</span>=<span class="hljs-string">&quot;@string/publish&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">app:showAsAction</span>=<span class="hljs-string">&quot;always&quot;</span></span><br><span class="hljs-tag">    /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">menu</span>&gt;</span><br></code></pre></td></tr></table></figure><p>监听发布按钮点击事件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">onOptionsItemSelected</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> MenuItem item)</span> &#123;<br>    <span class="hljs-keyword">switch</span> (item.getItemId())&#123;<br>        <span class="hljs-keyword">case</span> R.id.publish:<br>            sendClick();<br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.onOptionsItemSelected(item);<br>&#125;<br></code></pre></td></tr></table></figure><p>sendClick方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendClick</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//获取用户在输入框填写的动态文本</span><br>    content = binding.content.getText().toString().trim();<br>    <span class="hljs-keyword">if</span>(StringUtils.isBlank(content))&#123;<br>        SuperToast.show(<span class="hljs-string">&quot;您还没有填写哦~&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    saveFeed(content);<br>&#125;<br></code></pre></td></tr></table></figure><p>调用发布动态的Http:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 点击发布按钮后发布动态</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> content</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveFeed</span><span class="hljs-params">(String content)</span> &#123;<br><span class="hljs-comment">//        调用网络接口发布动态</span><br>        Feed feed=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Feed</span>();<br>        feed.setContent(content);<br>        DefaultRepository.getInstance().createFeed(feed).subscribe(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpObserver</span>&lt;DetailResponse&lt;BaseId&gt;&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onSucceeded</span><span class="hljs-params">(DetailResponse&lt;BaseId&gt; data)</span> &#123;<br>                <span class="hljs-comment">//发布动态成功</span><br>                finish();<br>            &#125;<br>        &#125;);<br>    &#125;<br></code></pre></td></tr></table></figure><p>关闭当前界面后，希望刷新动态列表，该怎么做呢？想想登录以后，怎么重新加载一遍动态数据的，是调用成功登录接口时，使用EventBus广播一条登录状态改变的消息，然后在FeedFragment中监听这条消息,然后调用一次加载数据的方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 登录状态改变了,重新加载一次数据</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Subscribe(threadMode = ThreadMode.MAIN)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">LoginStatusChangedEvent</span><span class="hljs-params">(LoginStatusChangedEvent event)</span>&#123;<br>    loadData();<br>&#125;<br><br></code></pre></td></tr></table></figure><p>那么，现在使用EventBus广播一条Feed更改了的消息:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">EventBus.getDefault().post(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FeedChangedEvent</span>());<br></code></pre></td></tr></table></figure><p>监听更改:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 动态改变了</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Subscribe(threadMode = ThreadMode.MAIN)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">FeedChangedEvent</span><span class="hljs-params">(FeedChangedEvent event)</span>&#123;<br>    loadData();<br>&#125;<br><br></code></pre></td></tr></table></figure><p>给每一个http请求都添加一个公共请求参数，服务端没用到就不用管，正常请求，用到了就会进行token的校验，过期了就不会调用成功</p><p>相当于是一个登录拦截器，当没有登录的时候，不能发布动态，会提示“登录状态过期”</p><p>不需要登录状态的，不用管这个请求头</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java">builder.addNetworkInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Interceptor</span>() &#123;<br>    <span class="hljs-meta">@NonNull</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Response <span class="hljs-title function_">intercept</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> Chain chain)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//执行每个网络请求时，在这里可以拦截到</span><br>        PreferenceUtil sp=PreferenceUtil.getInstance(AppContext.getInstance());<br>        Request request=chain.request();<br>        <span class="hljs-keyword">if</span>(sp.isLogin())&#123;<br>            <span class="hljs-comment">//如果登录了，获取token</span><br>            <span class="hljs-comment">//如果没有登录，服务器端就获取不到这个请求头，网络请求会中断</span><br>            String session=sp.getSession();<br>            <span class="hljs-comment">//为网络请求添加请求头</span><br>            request=request.newBuilder()<br>                    .addHeader(<span class="hljs-string">&quot;Authorization&quot;</span>,session)<br>                    .build();<br>        &#125;<br>        <span class="hljs-comment">//继续执行网络请求</span><br>        <span class="hljs-keyword">return</span> chain.proceed(request);<br>    &#125;<br>&#125;);<br><br></code></pre></td></tr></table></figure><p>但是还有一个问题，当我们点击发布界面的时候，需要判断一下用户是否登录</p><p>实现登录拦截</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">binding.primary.setOnClickListener(v -&gt; &#123;<br>   <span class="hljs-keyword">if</span>(sp.isLogin())&#123;<br>       startActivity(PublishFeedActivity.class);<br>   &#125;<span class="hljs-keyword">else</span>&#123;<br>       startActivity(LoginActivity.class);<br>   &#125;<br>&#125;);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
      <tag>发布文本动态</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>android-31.5-下拉刷新和上拉加载更多</title>
    <link href="/2022/11/28/android-31.5-%E4%B8%8B%E6%8B%89%E5%88%B7%E6%96%B0%E5%92%8C%E4%B8%8A%E6%8B%89%E5%8A%A0%E8%BD%BD%E6%9B%B4%E5%A4%9A/"/>
    <url>/2022/11/28/android-31.5-%E4%B8%8B%E6%8B%89%E5%88%B7%E6%96%B0%E5%92%8C%E4%B8%8A%E6%8B%89%E5%8A%A0%E8%BD%BD%E6%9B%B4%E5%A4%9A/</url>
    
    <content type="html"><![CDATA[<h1 id="android-31-5-下拉刷新和上拉加载更多"><a href="#android-31-5-下拉刷新和上拉加载更多" class="headerlink" title="android-31.5-下拉刷新和上拉加载更多"></a>android-31.5-下拉刷新和上拉加载更多</h1><h2 id="使用第三方框架"><a href="#使用第三方框架" class="headerlink" title="使用第三方框架"></a>使用第三方框架</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//region 下拉刷新，上来加载更多</span><br><span class="hljs-comment">//下拉刷新框架</span><br><span class="hljs-comment">//https://github.com/scwang90/SmartRefreshLayout</span><br>implementation  <span class="hljs-string">&#x27;io.github.scwang90:refresh-layout-kernel:2.0.5&#x27;</span><br>implementation  <span class="hljs-string">&#x27;io.github.scwang90:refresh-header-classics:2.0.5&#x27;</span>     <span class="hljs-comment">//经典刷新头</span><br>implementation  <span class="hljs-string">&#x27;io.github.scwang90:refresh-footer-classics:2.0.5&#x27;</span>    <span class="hljs-comment">//经典加载头</span><br><span class="hljs-comment">//endregion</span><br></code></pre></td></tr></table></figure><h2 id="在FragmentFeedBinding-xml文件中使用"><a href="#在FragmentFeedBinding-xml文件中使用" class="headerlink" title="在FragmentFeedBinding.xml文件中使用"></a>在FragmentFeedBinding.xml文件中使用</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    //实现上拉加载和下拉刷新加载更多--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">com.scwang.smart.refresh.layout.SmartRefreshLayout</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/refresh&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--        下拉刷新头--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">com.scwang.smart.refresh.header.ClassicsHeader</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">app:srlTextSizeTitle</span>=<span class="hljs-string">&quot;15sp&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!--        列表控件--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">androidx.recyclerview.widget.RecyclerView</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/list&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">app:layoutManager</span>=<span class="hljs-string">&quot;androidx.recyclerview.widget.LinearLayoutManager&quot;</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">            /&gt;</span><br><span class="hljs-comment">&lt;!--        上拉加载更多尾部--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">com.scwang.smart.refresh.footer.ClassicsFooter</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h2 id="在FeedFragment-java中监听下拉刷新和上拉加载更多"><a href="#在FeedFragment-java中监听下拉刷新和上拉加载更多" class="headerlink" title="在FeedFragment.java中监听下拉刷新和上拉加载更多"></a>在FeedFragment.java中监听下拉刷新和上拉加载更多</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initListeners</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>.initListeners();<br><span class="hljs-comment">//        下拉刷新监听器</span><br>        binding.refresh.setOnRefreshListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OnRefreshListener</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onRefresh</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> RefreshLayout refreshLayout)</span> &#123;<br>                loadData();<br>            &#125;<br>        &#125;);<br><span class="hljs-comment">//        上拉加载更多监听器</span><br>        binding.refresh.setOnLoadMoreListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OnLoadMoreListener</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onLoadMore</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> RefreshLayout refreshLayout)</span> &#123;<br>                loadmore();<br>            &#125;<br>        &#125;);<br>    &#125;<br><br></code></pre></td></tr></table></figure><h2 id="如果是下拉刷新，调用loadData方法，始终返回第一页数据"><a href="#如果是下拉刷新，调用loadData方法，始终返回第一页数据" class="headerlink" title="如果是下拉刷新，调用loadData方法，始终返回第一页数据:"></a>如果是下拉刷新，调用loadData方法，始终返回第一页数据:</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">loadData</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//下拉刷新</span><br>    isRefresh=<span class="hljs-literal">true</span>;<br>    <span class="hljs-comment">//使用获取第一页数据</span><br>    pageMeta=<span class="hljs-literal">null</span>;<br>    loadmore();<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="如果是上拉加载更多，调用loadmore方法，请求下一页数据，使用Meta类"><a href="#如果是上拉加载更多，调用loadmore方法，请求下一页数据，使用Meta类" class="headerlink" title="如果是上拉加载更多，调用loadmore方法，请求下一页数据，使用Meta类"></a>如果是上拉加载更多，调用loadmore方法，请求下一页数据，使用Meta类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">loadmore</span><span class="hljs-params">()</span> &#123;<br>        HashMap&lt;String,String&gt; param = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-comment">//添加分页参数</span><br>        param.put(Constant.PAGE,String.valueOf(Meta.nextPage(pageMeta)));<br>        DefaultRepository.getInstance()<br>                .feeds(param)<br>                .subscribe(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpObserver</span>&lt;ListResonse&lt;Feed&gt;&gt;() &#123;<br>                    <span class="hljs-meta">@Override</span><br>                    <span class="hljs-comment">//调用API成功，返回的数据为data</span><br>                    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onSucceeded</span><span class="hljs-params">(ListResonse&lt;Feed&gt; data)</span> &#123;<br>                        pageMeta=data.getData();<br><span class="hljs-comment">//                        结束刷新</span><br>                        binding.refresh.finishRefresh(<span class="hljs-number">2000</span>,<span class="hljs-literal">true</span>,<span class="hljs-literal">false</span>);<br>                        binding.refresh.finishLoadMore(<span class="hljs-number">2000</span>,<span class="hljs-literal">true</span>,pageMeta.getNext()==<span class="hljs-literal">null</span>);<br>                        <span class="hljs-keyword">if</span>(isRefresh)&#123;<br>                            isRefresh=<span class="hljs-literal">false</span>;<br><span class="hljs-comment">//                            下拉刷新</span><br>                            <span class="hljs-comment">//如果是下拉刷新，设置一个新的第一页的数据</span><br>                            adapter.setNewInstance(data.getData().getData());<br>                        &#125;<span class="hljs-keyword">else</span>&#123;<br>                            <span class="hljs-comment">//如果是上拉加载更多，添加一页数据</span><br>                            adapter.addData(data.getData().getData());<br>                        &#125;<br>                    &#125;<br>                &#125;);<br>    &#125;<br><br></code></pre></td></tr></table></figure><h2 id="Meta类中的获取下一页的方法"><a href="#Meta类中的获取下一页的方法" class="headerlink" title="Meta类中的获取下一页的方法:"></a>Meta类中的获取下一页的方法:</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取下一页</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> data</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">nextPage</span><span class="hljs-params">(Meta data)</span> &#123;<br>    <span class="hljs-keyword">if</span>(data==<span class="hljs-literal">null</span>||data.next==<span class="hljs-literal">null</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> data.next;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
      <tag>下拉刷新和上拉加载共更多</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>android-26.7-实现播放列表删除功能</title>
    <link href="/2022/11/25/android-26.7-%E5%AE%9E%E7%8E%B0%E6%92%AD%E6%94%BE%E5%88%97%E8%A1%A8%E5%88%A0%E9%99%A4%E5%8A%9F%E8%83%BD/"/>
    <url>/2022/11/25/android-26.7-%E5%AE%9E%E7%8E%B0%E6%92%AD%E6%94%BE%E5%88%97%E8%A1%A8%E5%88%A0%E9%99%A4%E5%8A%9F%E8%83%BD/</url>
    
    <content type="html"><![CDATA[<h1 id="android-26-7-实现播放列表删除功能"><a href="#android-26-7-实现播放列表删除功能" class="headerlink" title="android-26.7-实现播放列表删除功能"></a>android-26.7-实现播放列表删除功能</h1>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
      <tag>实现播放列表删除功能</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/11/23/10205101530-%E8%B5%B5%E6%99%97%E7%91%9C-%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93hw4/"/>
    <url>/2022/11/23/10205101530-%E8%B5%B5%E6%99%97%E7%91%9C-%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93hw4/</url>
    
    <content type="html"><![CDATA[<h1 align="center">非关系数据库hw4</h1><h2 align="right">10205101530-赵晗瑜</h2><h2 id="1-RocksDB-是一种用于快速存储的嵌入式持久存储，请查阅官方网站或相关文献，完成以下两项工作："><a href="#1-RocksDB-是一种用于快速存储的嵌入式持久存储，请查阅官方网站或相关文献，完成以下两项工作：" class="headerlink" title="1. RocksDB﻿是一种用于快速存储的嵌入式持久存储，请查阅官方网站或相关文献，完成以下两项工作："></a>1. RocksDB﻿是一种用于快速存储的嵌入式持久存储，请查阅官方网站或相关文献，完成以下两项工作：</h2><h4 id="RocksDB简介："><a href="#RocksDB简介：" class="headerlink" title="RocksDB简介："></a>RocksDB简介：</h4><p>​RocksDB是Facebook公司基于Google的LevelDB代码库创建的高性能、持久键值的嵌入式单机存储引擎。它针对固态存储驱动器（SSD）的某些特性做了优化，主要面向大规模（分布式）应用程序，并被设计为嵌入在更高级别应用程序中的组件。因此，每个RocksDB实例只管理单个服务器节点的存储设备上的数据；它不处理任何跨应用间操作，例如数据复制和负载均衡，也不执行高级操作，例如快照，检查点，它将这些操作的实现留给上层应用程序，但提供适当的备份还原、故障恢复等支持，以便它们可以更高效的执行和有效的控制。</p><h4 id="1-理解并介绍RocksDB的数据模型和RocksDB的存储引擎（因为发现数据模型和存储引擎的关系比较紧密，所以就放在一起写了）"><a href="#1-理解并介绍RocksDB的数据模型和RocksDB的存储引擎（因为发现数据模型和存储引擎的关系比较紧密，所以就放在一起写了）" class="headerlink" title="(1)理解并介绍RocksDB的数据模型和RocksDB的存储引擎（因为发现数据模型和存储引擎的关系比较紧密，所以就放在一起写了）"></a>(1)理解并介绍RocksDB的数据模型和RocksDB的存储引擎（因为发现数据模型和存储引擎的关系比较紧密，所以就放在一起写了）</h4><p>RocksDB按照Key-Value形式存储数据，数据在内部根据Key进行排序</p><ol><li><h4 id="RocksDB按顺序组织所有数据，通用操作包括"><a href="#RocksDB按顺序组织所有数据，通用操作包括" class="headerlink" title="RocksDB按顺序组织所有数据，通用操作包括"></a>RocksDB按顺序组织所有数据，通用操作包括</h4><ul><li>Get(key)</li><li>Put(key)</li><li>Delete(key)</li><li>NewIterator(key)</li></ul></li><li><h4 id="RocksDB的三种数据结构"><a href="#RocksDB的三种数据结构" class="headerlink" title="RocksDB的三种数据结构"></a>RocksDB的三种数据结构</h4><ul><li>memtable<ol><li>内存数据结构</li><li>所有写入的请求都会进入memtable，选择性进入logfile</li></ol></li><li>ssfile<ol><li>当memtable被填满时，他会被刷到ssfile文件并存储起来，然后相关的logfile会在之后被安全地删除</li><li>ssfile中的数据都是排序好的，以便根据key进行快速搜索</li></ol></li><li>logfile<ol><li>有序写数据结构</li></ol></li></ul></li><li><h4 id="RocksDB采用-Log-Structured-Merge（LSM）-trees作为基本的数据结构，整体数据模型如下图所示："><a href="#RocksDB采用-Log-Structured-Merge（LSM）-trees作为基本的数据结构，整体数据模型如下图所示：" class="headerlink" title="RocksDB采用 Log-Structured Merge（LSM） trees作为基本的数据结构，整体数据模型如下图所示："></a>RocksDB采用 <strong>Log-Structured Merge（LSM） trees</strong>作为基本的数据结构，整体数据模型如下图所示：</h4><img src="C:/Users/zhy19/AppData/Roaming/Typora/typora-user-images/image-20221123151822339.png" alt="image-20221123151822339" style="zoom:67%;" /><ul><li>为了保证数据的有序性，插入、搜索的高效性，MemTable基于 <strong>跳表</strong>实现</li><li>WAL用于故障发生时的数据恢复，可选择关闭</li><li>BlockCache：RocksDB 在内存中缓存数据以供读取的地方。一个Cache对象可以被同一个进程中的多个RocksDB实例共享，用户可以控制整体的缓存容量。有LRUCache和ClockCache两类</li><li>除了第0层的SST文件，其余层的SST文件之间都是有序的</li><li>将数据写入sst则是通过异步的flush和compaction 后台线程进行的</li></ul></li><li><h4 id="RocksDB的LSM基本操作"><a href="#RocksDB的LSM基本操作" class="headerlink" title="RocksDB的LSM基本操作"></a>RocksDB的LSM基本操作</h4><img src="C:/Users/zhy19/AppData/Roaming/Typora/typora-user-images/image-20221123152112999.png" alt="image-20221123152112999" style="zoom:80%;" /><ul><li><h4 id="写数据"><a href="#写数据" class="headerlink" title="写数据"></a>写数据</h4><p>​当发起一个<u><strong>写请求</strong></u>时，RocksDB首先会进行一个预写的操作，将数据首先以日志的形式写入到持久化存储中（主要是为了防止数据的不一致性），也就是说，为了数据的一致性，同时，也可以为后续故障恢复做一个记录。</p><p>​预写入时，采用的是连续写入的方式，这比随机写入的效率要高，尤其是针对持久化存储。接下来，RocksDB会将数据写入到内存中，RocksDB采用内存中一个叫做MemTable的数据结构。</p><p>​RocksDB采用跳表的数据结构主要是为了提高读写性能，当内存表写满之后，RocksDB会将Memtable内存表转化成只读状态（read-only），同时新建一个内存表保证后续的写入，只读内存表会通过flush的操作刷到磁盘上，也就意味着每一个只读内存表都会完完整整地写入到磁盘文件中，在RocksDB中文件的名称叫做SST。</p></li><li><h4 id="读数据"><a href="#读数据" class="headerlink" title="读数据"></a>读数据</h4><p>​当外界发起一个**<u>读请求</u>**时，RocksDB会同时从内存表、只读内存表和持久化存储上同时去读取这些数据，主要是因为它查询的数据可能在任何一个地方，并且可能有多条记录</p><p>​<strong>那么所以RocksDB读到相同数据的时候，如何保证哪一个是最新的呢？即哪一个是用户想要的呢？</strong></p><p>​这就涉及到RocksDB的一个重要概念——版本机制，RocksDB会给每一个内存表记录一个<strong>递增的版本号</strong>，那么通过简单的对比我们就可以知道版本信息，即可得出哪一个是最新的</p><p>​与此同时，为了加速持久化存储数据结构的效率，SST的每一个文件都自带一个<strong>布隆过滤器</strong>，特点是节省空间，但是偶尔也会有一些误判，</p></li><li><h4 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h4><p>​虽然LSM tree的顺序写入保证了写性能，但是其<strong>本身的存储结构却牺牲了读性能</strong>，所以需要通过compaction这样的机制随着IO的持续写入来不断调整数据存储系统的结构，来降低对读的影响。</p><p>Rocksdb有多种compaction策略：</p><ul><li>size-tiered compaction：每层允许的SST文件<strong>最大数量</strong>都有个相同的阈值，随着memtable不断flush成SST，某层的SST数达到阈值时，就把<strong>该层所有SST全部合并成一个大的新SST</strong>，并放到较高一层去。</li><li>leveled compaction：对于L1层及以上的数据，将size-tiered compaction中原本的大SST拆开，成为多个key互不相交的小SST的序列（L0层是从memtable flush过来的新SST，该层各个SST的key是可以相交的），并且其数量阈值单独控制。可见，leveled compaction与size-tiered compaction相比，每次做compaction时不必再选取一层内所有的数据，并且每层中SST的key区间都是不相交的，重复key减少了。</li></ul></li></ul></li><li><h4 id="跳表（MemTable）："><a href="#跳表（MemTable）：" class="headerlink" title="跳表（MemTable）："></a>跳表（MemTable）：</h4><p>跳表（Skiplist）是一个特殊的链表，相比一般的链表，有更高的查找效率。平均期望的**查找、插入、删除时间复杂度都是O(logn)**。Redis中的有序集合zset；LevelDB、RocksDB、HBase中Memtable都采用跳表实现。</p><p><img src="C:/Users/zhy19/AppData/Roaming/Typora/typora-user-images/image-20221123152511645.png" alt="image-20221123152511645"></p></li><li><h4 id="演化思路："><a href="#演化思路：" class="headerlink" title="演化思路："></a>演化思路：</h4><p>对于单链表来说，即使数据是已经排好序的，想要查询其中的一个数据，只能从头开始遍历链表，这样效率很低，时间复杂度很高，是 O(n)。为了提高查询的效率，可以为链表建立一个“索引”。 （查找15的过程：1-&gt;7-&gt;14-&gt;14-&gt;14-&gt;15）</p><p><img src="C:/Users/zhy19/AppData/Roaming/Typora/typora-user-images/image-20221123152549824.png" alt="image-20221123152549824"></p><p>​每两个节点建立一个索引，跳表高度：log(n)。若在查询跳表的时，每一层都需要遍历 k 个结点，最终的时间复杂度为 O(k*log(n))。</p><p>​可以得到k&#x3D;2，原因如下：</p><p>​最高一级索引只有两个结点，每下一层索引在上一层索引两个结点之间增加了一个结点，也就是<strong>上一层索引两结点的中值</strong>。因此在搜索过程中，搜索指针pointer从顶层头结点开始，进行类似于二分查找的判断，并确定新的头结点的索引列。这样可以得到，在每一行最多遍历2个节点。</p><p><img src="C:/Users/zhy19/AppData/Roaming/Typora/typora-user-images/image-20221123152629660.png" alt="image-20221123152629660"></p><p>可以看出，跳表的效率比链表高了，但是跳表需要额外存储多级索引，所以需要的更多的内存空间（空间换时间）。</p></li><li><h4 id="插入、删除"><a href="#插入、删除" class="headerlink" title="插入、删除"></a>插入、删除</h4><p>跳表的查询的时间复杂度为 O(log(n)），因为找到位置之后插入和删除的时间复杂度很低，为 O(1)，所以最终插入和删除的时间复杂度也为 O(log(n))。</p><p>一些注意的点：删除时，可能需要将索引中的节点一并删除；不停插入之后，可能造成索引之间的结点过多，因此需要维护。</p></li><li><h4 id="SST"><a href="#SST" class="headerlink" title="SST"></a>SST</h4><p>LSM tree保证了数据是有序写入 (memtable – skiplist)，提高了写性能，但是因为其本身的分层结构，牺牲了读性能（一个key若存储在了低级别的level，从上到下每一层都要进行查找，代价极大）。所以，针对读的性能提升有了很多的优化：bloom filter(高效判断一个key是否不存在)，index-filter （二分查找，消耗低内存的情况下）索引key-value数据。这一些数据都需要存储在SST文件之中，用来进行k-v数据的有序管理。</p><p>SST结构可以抽象为下图：</p><img src="C:/Users/zhy19/AppData/Roaming/Typora/typora-user-images/image-20221123152736479.png" alt="image-20221123152736479" style="zoom:67%;" /><ul><li>Footer：主要是用来索引 meta index block 和 index block</li><li>meta index block：主要是为了索引列出的多个meta block</li><li>index block：是属于一种meta block，它是用来索引data block</li><li>metablock：index block、filter block、range_del block，compression block，properties block<ol><li>filter block：用来保存一些bloom filter用来加速查找;</li><li>range_del block是保存客户端针对key有DeleteRange的操作而标记的一批key；</li><li>compression block保存了通过字典压缩的key的前缀数据，也是为了加速读；</li><li>properties block保存了当前SST文件内部的属性数据，像有多少个datablock，多少个index block，整个SST文件有多大等各维度的数据。</li></ol></li></ul></li><li><h5 id="WAL"><a href="#WAL" class="headerlink" title="WAL"></a>WAL</h5><p>WAL主要作用是用来恢复节点断电，死机时 memtable中的未commited中的数据。 所以WAL 的写入需要优先于memtable，且每一次写入都需要flush ，这也是write head的由来。</p></li></ol><h2 id="2-阅读文献-Sanjay-Ghemawat-Howard-Gobioff-Shun-Tak-Leung-The-Google-file-system-In-Proceedings-of-the-nineteenth-ACM-symposium-on-Operating-systems-principles-October-2003-理解并介绍GFS的数据一致性策略。"><a href="#2-阅读文献-Sanjay-Ghemawat-Howard-Gobioff-Shun-Tak-Leung-The-Google-file-system-In-Proceedings-of-the-nineteenth-ACM-symposium-on-Operating-systems-principles-October-2003-理解并介绍GFS的数据一致性策略。" class="headerlink" title="2. 阅读文献:Sanjay Ghemawat, Howard Gobioff, Shun-Tak Leung. The Google file system. In Proceedings of the nineteenth ACM symposium on Operating systems principles October 2003.理解并介绍GFS的数据一致性策略。"></a>2. 阅读文献:Sanjay Ghemawat, Howard Gobioff, Shun-Tak Leung. The Google file system. In Proceedings of the nineteenth ACM symposium on Operating systems principles October 2003.理解并介绍GFS的数据一致性策略。</h2><h4 id="GFS的一致性模型"><a href="#GFS的一致性模型" class="headerlink" title="GFS的一致性模型"></a>GFS的一致性模型</h4><h4 id="概念定义"><a href="#概念定义" class="headerlink" title="概念定义"></a>概念定义</h4><ol><li><p>客户端读取不同的 Replica 时可能会读取到不同的内容，那这部分文件是<strong>inconsistent</strong>的</p></li><li><p>所有客户端无论读取哪个 Replica 都会读取到相同的内容，那这部分文件就是<strong>consistent</strong></p></li><li><p>所有客户端都能看到上一次修改的所有完整内容，且这部分文件是一致的，那么我们说这部分文件是<strong>defined</strong></p></li></ol><h5 id="保证："><a href="#保证：" class="headerlink" title="保证："></a>保证：</h5><ol><li><h5 id="文件命名空间的修改（例如，文件创建）是原子性的。"><a href="#文件命名空间的修改（例如，文件创建）是原子性的。" class="headerlink" title="文件命名空间的修改（例如，文件创建）是原子性的。"></a>文件命名空间的修改（例如，文件创建）是<strong>原子性</strong>的。</h5></li><li><h5 id="文件数据修改："><a href="#文件数据修改：" class="headerlink" title="文件数据修改："></a>文件数据修改：</h5><ul><li><p>如果一次写入操作成功且没有与其他并发的写入操作发生重叠，那这部分的文件是defined</p></li><li><p>如果有若干个写入操作并发地执行成功，那么这部分文件会是consistent但会是undefined。在这种情况下，客户端所能看到的数据通常不能直接体现出其中的任何一次修改</p></li><li><p>失败的写入操作会让文件进入inconsistent的状态</p><p><img src="C:/Users/zhy19/AppData/Roaming/Typora/typora-user-images/image-20221123153512020.png" alt="image-20221123153512020"></p></li></ul></li><li><h5 id="随机写与追加写"><a href="#随机写与追加写" class="headerlink" title="随机写与追加写"></a>随机写与追加写</h5><ul><li><p><strong>随机写</strong></p><p>​当写入时，指定的数据会被直接写入到客户端指定的偏移位置中，覆盖原有的数据。GFS 并未为该操作提供太多的一致性保证：如果不同的客户端并发地写入同一块文件区域，操作完成后这块区域的数据可能由各次写入的数据碎片所组成，即进入不确定的状态。</p></li><li><p><strong>追加写</strong></p><p>​所有的追加写入都会成功，<strong>但是有可能被执行了多次</strong>，而且每次追加的文件偏移量由GFS自己计算。</p><p>​GFS返回给客户端一个偏移量，表示了包含了写入记录的、已定义的region的起点。</p></li></ul></li><li><h5 id="Leases"><a href="#Leases" class="headerlink" title="Leases"></a>Leases</h5><p>​每个mutation都要在一个chunk的所有replica上执行成功才能应答客户端，因此，从所有replica中选择一个作为<strong>primary</strong>，负责给mutation定序，其他replica按相同顺序执行mutation。</p><p>​primary由master选择，然后给primary授予lease（初始为60秒）。<strong>primary定期请求master延长lease</strong>（heartbeat请求中携带），一旦lease过期，master可以认为primary故障，选其他replica作为新的primary。</p></li><li><p><strong>GFS支持一个宽松的一致性模型</strong></p><p>[GFS has a relaxed consistency model that supports our highly distributed applications well but remains relatively simple and efficient to implement.]: </p><p>首先，文件命名空间的修改，如文件创建是原子性的，仅由master控制：命名空间锁提供了原子性和正确性、master操作日志定义了这些操作在全局的顺序。</p><p>对于文件的数据修改，文件状态会进入以下三种状态之一：</p><p>[The state of a file region after a data mutation depends on the type of mutation, whether it succeeds or fails, and whether there are concurrent mutations.]: </p><ul><li>一致的（consistent）：对于一个chunk，所有client看到的副本内容都是一样的</li><li><strong>不一致的(Inconsistent)<strong>：客户端读取不同的 Replica 时可能会读取到不同的内容，那这部分文件是</strong>不一致</strong>的</li><li>**定义的 (defined)**：数据修改后是一致的，且 <strong>client</strong> 可以看到写入操作的全部内容（ 换句话说，可以看到每步操作修改后的内容 ）</li></ul><p>一个文件的当前状态将取决于此次修改以及修改是否成功</p><img src="C:/Users/zhy19/AppData/Roaming/Typora/typora-user-images/image-20221123221145055.png" alt="image-20221123221145055" style="zoom:67%;" /><ul><li>当一个数据写操作成功执行，且没有并发写入，那么影响的 <strong>region</strong> 就是 <strong>defined</strong>：所有 <strong>client</strong> 都能看到写入的内容。（ 隐含了 <strong>consistent</strong> ）</li><li>当并行修改写完成之后，<strong>region</strong> 处于 <strong>consistent but undefined</strong> 状态：所有 <strong>client</strong> 看到同样的数据，但是无法读到任何一次写入操作写入的数据 （ 因为可能有并行写操作覆盖了同一区域 ）。</li><li>失败的写操作导致 <strong>region</strong> 处于 <strong>inconsistent</strong> 状态（ 同时也是 <strong>undifined</strong> 的 ）：不同 <strong>client</strong> 在不同时间会看到不同的数据。</li><li>当对文件进行追加操作，若追加操作成功，那么 <strong>region</strong> 处于 <strong>defined and consistent</strong> 状态；若某次追加操作失败，<strong>client</strong> 重新请求后会导致数据填充和重复数据的情况，此时 <strong>region</strong> 处于 <strong>defined but inconsistent</strong> 状态。</li></ul></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>软件测试第二次月考复习笔记</title>
    <link href="/2022/11/20/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%AC%AC%E4%BA%8C%E6%AC%A1%E6%9C%88%E8%80%83%E5%A4%8D%E4%B9%A0/"/>
    <url>/2022/11/20/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%AC%AC%E4%BA%8C%E6%AC%A1%E6%9C%88%E8%80%83%E5%A4%8D%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="软件测试第二次月考复习笔记"><a href="#软件测试第二次月考复习笔记" class="headerlink" title="软件测试第二次月考复习笔记"></a>软件测试第二次月考复习笔记</h1><h2 id="全定义覆盖："><a href="#全定义覆盖：" class="headerlink" title="全定义覆盖："></a>全定义覆盖：</h2><h2 id="该定义使用路径集合覆盖了每个变量的每个定义和其某个使用之间的某条定义使用路径，因此满足全定义覆盖。"><a href="#该定义使用路径集合覆盖了每个变量的每个定义和其某个使用之间的某条定义使用路径，因此满足全定义覆盖。" class="headerlink" title="该定义使用路径集合覆盖了每个变量的每个定义和其某个使用之间的某条定义使用路径，因此满足全定义覆盖。"></a>该定义使用路径集合覆盖了每个变量的<u>每个定义</u>和其<u>某个使用</u>之间的某条定义使用路径，因此满足全定义覆盖。</h2><h2 id="Def-and-use"><a href="#Def-and-use" class="headerlink" title="Def and use"></a>Def and use</h2><p><img src="/images/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%AC%AC%E4%BA%8C%E6%AC%A1%E6%9C%88%E8%80%83%E5%A4%8D%E4%B9%A0/image-20221120102818444-16689113047401.png" alt="image-20221120102818444"></p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%AC%AC%E4%BA%8C%E6%AC%A1%E6%9C%88%E8%80%83%E5%A4%8D%E4%B9%A0/image-20221120105846498.png" alt="image-20221120105846498"></p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%AC%AC%E4%BA%8C%E6%AC%A1%E6%9C%88%E8%80%83%E5%A4%8D%E4%B9%A0/image-20221120110717334-16689136388473.png" alt="image-20221120110717334"></p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%AC%AC%E4%BA%8C%E6%AC%A1%E6%9C%88%E8%80%83%E5%A4%8D%E4%B9%A0/image-20221120110946676.png" alt="image-20221120110946676"></p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%AC%AC%E4%BA%8C%E6%AC%A1%E6%9C%88%E8%80%83%E5%A4%8D%E4%B9%A0/image-20221120111013086.png" alt="image-20221120111013086"></p><h2 id="Def-Clear"><a href="#Def-Clear" class="headerlink" title="Def Clear"></a>Def Clear</h2><p><img src="/images/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%AC%AC%E4%BA%8C%E6%AC%A1%E6%9C%88%E8%80%83%E5%A4%8D%E4%B9%A0/image-20221120111447550.png" alt="image-20221120111447550"></p><h2 id="Du-Pairs-and-Du-Paths"><a href="#Du-Pairs-and-Du-Paths" class="headerlink" title="Du Pairs and Du Paths"></a>Du Pairs and Du Paths</h2><p><img src="/images/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%AC%AC%E4%BA%8C%E6%AC%A1%E6%9C%88%E8%80%83%E5%A4%8D%E4%B9%A0/image-20221120112643597.png" alt="image-20221120112643597"></p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%AC%AC%E4%BA%8C%E6%AC%A1%E6%9C%88%E8%80%83%E5%A4%8D%E4%B9%A0/image-20221120111558384.png" alt="image-20221120111558384"></p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%AC%AC%E4%BA%8C%E6%AC%A1%E6%9C%88%E8%80%83%E5%A4%8D%E4%B9%A0/image-20221120113115743.png" alt="image-20221120113115743"></p><h2 id="全定义覆盖"><a href="#全定义覆盖" class="headerlink" title="全定义覆盖"></a>全定义覆盖</h2><ul><li><p>衡量被测代码中变量每个定义得到使用的程度</p></li><li><p>Example</p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%AC%AC%E4%BA%8C%E6%AC%A1%E6%9C%88%E8%80%83%E5%A4%8D%E4%B9%A0/image-20221120113848982.png" alt="image-20221120113848982"></p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%AC%AC%E4%BA%8C%E6%AC%A1%E6%9C%88%E8%80%83%E5%A4%8D%E4%B9%A0/image-20221120114036129.png" alt="image-20221120114036129"></p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%AC%AC%E4%BA%8C%E6%AC%A1%E6%9C%88%E8%80%83%E5%A4%8D%E4%B9%A0/image-20221120114110012.png" alt="image-20221120114110012"></p></li></ul><h2 id="全使用覆盖"><a href="#全使用覆盖" class="headerlink" title="全使用覆盖"></a>全使用覆盖</h2><ul><li>测量被测代码中变量的每个使用得到执行的程度</li></ul><p><img src="/images/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%AC%AC%E4%BA%8C%E6%AC%A1%E6%9C%88%E8%80%83%E5%A4%8D%E4%B9%A0/image-20221120114623626.png" alt="image-20221120114623626"></p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%AC%AC%E4%BA%8C%E6%AC%A1%E6%9C%88%E8%80%83%E5%A4%8D%E4%B9%A0/image-20221120114803107.png" alt="image-20221120114803107"></p><h2 id="全定义使用覆盖"><a href="#全定义使用覆盖" class="headerlink" title="全定义使用覆盖"></a>全定义使用覆盖</h2><ul><li>衡量被测代码中变量的每条定义使用路径得到执行的程度</li></ul><p><img src="/images/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%AC%AC%E4%BA%8C%E6%AC%A1%E6%9C%88%E8%80%83%E5%A4%8D%E4%B9%A0/image-20221120115716669.png" alt="image-20221120115716669"></p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%AC%AC%E4%BA%8C%E6%AC%A1%E6%9C%88%E8%80%83%E5%A4%8D%E4%B9%A0/image-20221120115754998.png" alt="image-20221120115754998"></p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%AC%AC%E4%BA%8C%E6%AC%A1%E6%9C%88%E8%80%83%E5%A4%8D%E4%B9%A0/image-20221120115803696.png" alt="image-20221120115803696"></p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%AC%AC%E4%BA%8C%E6%AC%A1%E6%9C%88%E8%80%83%E5%A4%8D%E4%B9%A0/image-20221120115814994.png" alt="image-20221120115814994"></p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p><img src="/images/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%AC%AC%E4%BA%8C%E6%AC%A1%E6%9C%88%E8%80%83%E5%A4%8D%E4%B9%A0/image-20221120115920051.png" alt="image-20221120115920051"></p><h2 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h2><p><img src="/images/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%AC%AC%E4%BA%8C%E6%AC%A1%E6%9C%88%E8%80%83%E5%A4%8D%E4%B9%A0/image-20221120130651629.png" alt="image-20221120130651629"></p><p>根据定义，若测试集合满足待测代码的全定义覆盖，则测试用例集合需满足 s1, s2, a, b, anagram, i, return variable（语句 2 return false 处的临时变量）等各个变量的全定义覆盖。列出各个变量的定义使用路径：</p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%AC%AC%E4%BA%8C%E6%AC%A1%E6%9C%88%E8%80%83%E5%A4%8D%E4%B9%A0/image-20221120134122339.png" alt="image-20221120134122339"></p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%AC%AC%E4%BA%8C%E6%AC%A1%E6%9C%88%E8%80%83%E5%A4%8D%E4%B9%A0/image-20221120140735034.png" alt="image-20221120140735034"></p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%AC%AC%E4%BA%8C%E6%AC%A1%E6%9C%88%E8%80%83%E5%A4%8D%E4%B9%A0/image-20221120140805239.png" alt="image-20221120140805239"></p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%AC%AC%E4%BA%8C%E6%AC%A1%E6%9C%88%E8%80%83%E5%A4%8D%E4%B9%A0/image-20221120141001167.png" alt="image-20221120141001167"></p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%AC%AC%E4%BA%8C%E6%AC%A1%E6%9C%88%E8%80%83%E5%A4%8D%E4%B9%A0/image-20221120141009491.png" alt="image-20221120141009491"></p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%AC%AC%E4%BA%8C%E6%AC%A1%E6%9C%88%E8%80%83%E5%A4%8D%E4%B9%A0/image-20221120141023908.png" alt="image-20221120141023908"></p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%AC%AC%E4%BA%8C%E6%AC%A1%E6%9C%88%E8%80%83%E5%A4%8D%E4%B9%A0/image-20221120141032697.png" alt="image-20221120141032697"></p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%AC%AC%E4%BA%8C%E6%AC%A1%E6%9C%88%E8%80%83%E5%A4%8D%E4%B9%A0/image-20221120141043956.png" alt="image-20221120141043956"></p><h2 id="Mutation-testing"><a href="#Mutation-testing" class="headerlink" title="Mutation testing"></a>Mutation testing</h2><p><img src="/images/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%AC%AC%E4%BA%8C%E6%AC%A1%E6%9C%88%E8%80%83%E5%A4%8D%E4%B9%A0/image-20221120174129401.png" alt="image-20221120174129401"></p><p>​<img src="/images/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%AC%AC%E4%BA%8C%E6%AC%A1%E6%9C%88%E8%80%83%E5%A4%8D%E4%B9%A0/image-20221120180055147.png" alt="image-20221120180055147"></p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%AC%AC%E4%BA%8C%E6%AC%A1%E6%9C%88%E8%80%83%E5%A4%8D%E4%B9%A0/image-20221120180109082.png" alt="image-20221120180109082"></p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%AC%AC%E4%BA%8C%E6%AC%A1%E6%9C%88%E8%80%83%E5%A4%8D%E4%B9%A0/image-20221120214107414.png" alt="image-20221120214107414"></p>]]></content>
    
    
    <categories>
      
      <category>软件测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软件测试</tag>
      
      <tag>月考</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>android-26.4-实现高斯模糊效果</title>
    <link href="/2022/11/19/android-26.4-%E5%AE%9E%E7%8E%B0%E9%AB%98%E6%96%AF%E6%A8%A1%E7%B3%8A%E6%95%88%E6%9E%9C/"/>
    <url>/2022/11/19/android-26.4-%E5%AE%9E%E7%8E%B0%E9%AB%98%E6%96%AF%E6%A8%A1%E7%B3%8A%E6%95%88%E6%9E%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="android-26-4-实现高斯模糊效果"><a href="#android-26-4-实现高斯模糊效果" class="headerlink" title="android-26.4-实现高斯模糊效果"></a>android-26.4-实现高斯模糊效果</h1><p>使用第三方框架</p><p><a href="https://github.com/wasabeef/glide-transformations">wasabeef&#x2F;glide-transformations: An Android transformation library providing a variety of image transformations for Glide. (github.com)</a></p><p>在build.grade中：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs clean">dependencies &#123;<br>  <span class="hljs-keyword">implementation</span> <span class="hljs-string">&#x27;jp.wasabeef:glide-transformations:4.3.0&#x27;</span><br>  <span class="hljs-comment">// If you want to use the GPU Filters</span><br>  <span class="hljs-keyword">implementation</span> <span class="hljs-string">&#x27;jp.co.cyberagent.android:gpuimage:2.1.0&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在MusicPlayerActivity的showInitData方法中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 将背景设置为高斯模糊效果</span><br><span class="hljs-comment">         */</span><br>        RequestBuilder&lt;Drawable&gt; requestBuilder = Glide.with(<span class="hljs-built_in">this</span>).asDrawable();<br>        <span class="hljs-keyword">if</span>(StringUtils.isBlank(data.getIcon()))&#123;<br>            <span class="hljs-comment">//使用默认封面图</span><br>            requestBuilder.load(R.drawable.default_cover);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-comment">//使用真实的图片</span><br>            requestBuilder.load(ResourceUtil.resourceUri(data.getIcon()));<br>        &#125;<br>        <span class="hljs-comment">//实现高斯模糊</span><br>        <span class="hljs-type">RequestOptions</span> <span class="hljs-variable">requestOptions</span> <span class="hljs-operator">=</span> RequestOptions.bitmapTransform(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BlurTransformation</span>(<span class="hljs-number">25</span>,<span class="hljs-number">3</span>));<br>        <span class="hljs-comment">//加载图片</span><br>        requestBuilder.apply(requestOptions)<br>                        .into(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CustomTarget</span>&lt;Drawable&gt;() &#123;<br>                            <span class="hljs-comment">/**</span><br><span class="hljs-comment">                             * 图片加载完成</span><br><span class="hljs-comment">                             * <span class="hljs-doctag">@param</span> resource</span><br><span class="hljs-comment">                             * <span class="hljs-doctag">@param</span> transition</span><br><span class="hljs-comment">                             */</span><br>                            <span class="hljs-meta">@Override</span><br>                            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onResourceReady</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> Drawable resource, <span class="hljs-meta">@Nullable</span> Transition&lt;? <span class="hljs-built_in">super</span> Drawable&gt; transition)</span> &#123;<br>                                <span class="hljs-comment">//将背景图片设置为高斯模糊后的照片</span><br>                                binding.background.setImageDrawable(resource);<br>                            &#125;<br><br>                            <span class="hljs-meta">@Override</span><br>                            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onLoadCleared</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> Drawable placeholder)</span> &#123;<br><br>                            &#125;<br>                        &#125;);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
      <tag>实现高斯模糊效果</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>android-26.6-实现显示播放列表功能</title>
    <link href="/2022/11/19/android-26.6-%E5%AE%9E%E7%8E%B0%E6%98%BE%E7%A4%BA%E6%92%AD%E6%94%BE%E5%88%97%E8%A1%A8%E5%8A%9F%E8%83%BD/"/>
    <url>/2022/11/19/android-26.6-%E5%AE%9E%E7%8E%B0%E6%98%BE%E7%A4%BA%E6%92%AD%E6%94%BE%E5%88%97%E8%A1%A8%E5%8A%9F%E8%83%BD/</url>
    
    <content type="html"><![CDATA[<h1 id="android-26-6-实现显示播放列表功能"><a href="#android-26-6-实现显示播放列表功能" class="headerlink" title="android-26.6-实现显示播放列表功能"></a>android-26.6-实现显示播放列表功能</h1><p>在musicplayeractivity中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 播放列表按钮点击事件</span><br><span class="hljs-comment">         */</span><br>        binding.listButton.setOnClickListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">View</span>.OnClickListener() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onClick</span><span class="hljs-params">(View view)</span> &#123;<br>                <br>            &#125;<br>        &#125;);<br></code></pre></td></tr></table></figure><p>定义一个MusicPlayDialogFragment继承自BottomSheetDialogFragment</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 播放列表</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MusicPlayListDialogFragment</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BottomSheetDialogFragment</span> &#123;<br>    <br>&#125;<br><br></code></pre></td></tr></table></figure><p>封装BottomSheetDialogFragment的基本逻辑，分为三个方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java">**<br> * 所有BottomSheetDialogFragment的父类<br> */<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseBottomSheetDialogFragment</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BottomSheetDialogFragment</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将Fragment中的方法划分为三个部分，便于管理</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 找控件</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initViews</span><span class="hljs-params">()</span>&#123;<br><br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置数据</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initDatum</span><span class="hljs-params">()</span>&#123;<br><br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 绑定监听器</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initListeners</span><span class="hljs-params">()</span>&#123;<br><br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 返回显示的控件</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> inflater</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> container</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> savedInstanceState</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Nullable</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> View <span class="hljs-title function_">onCreateView</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> LayoutInflater inflater, <span class="hljs-meta">@Nullable</span> ViewGroup container, <span class="hljs-meta">@Nullable</span> Bundle savedInstanceState)</span> &#123;<br>        View view=getLayoutView(inflater,container,savedInstanceState);<br>        <span class="hljs-keyword">return</span> view;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 子类进行重写的方法</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> inflater</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> container</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> savedInstanceState</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">abstract</span> View <span class="hljs-title function_">getLayoutView</span><span class="hljs-params">(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)</span> ;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * view创建之后调用</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> view</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> savedInstanceState</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onViewCreated</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> View view, <span class="hljs-meta">@Nullable</span> Bundle savedInstanceState)</span> &#123;<br>        <span class="hljs-built_in">super</span>.onViewCreated(view, savedInstanceState);<br>        initViews();<br>        initDatum();<br>        initListeners();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
      <tag>实现高斯模糊效果</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>android-26.3-实现显示黑椒唱片信息</title>
    <link href="/2022/11/19/android-26.3-%E5%AE%9E%E7%8E%B0%E6%98%BE%E7%A4%BA%E9%BB%91%E6%A4%92%E5%94%B1%E7%89%87%E4%BF%A1%E6%81%AF/"/>
    <url>/2022/11/19/android-26.3-%E5%AE%9E%E7%8E%B0%E6%98%BE%E7%A4%BA%E9%BB%91%E6%A4%92%E5%94%B1%E7%89%87%E4%BF%A1%E6%81%AF/</url>
    
    <content type="html"><![CDATA[<h1 id="android-26-3-实现显示黑椒唱片信息"><a href="#android-26-3-实现显示黑椒唱片信息" class="headerlink" title="android-26.3-实现显示黑椒唱片信息"></a>android-26.3-实现显示黑椒唱片信息</h1><h2 id="新建一个View"><a href="#新建一个View" class="headerlink" title="新建一个View"></a>新建一个View</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhy.view;<br><br><span class="hljs-keyword">import</span> android.content.Context;<br><span class="hljs-keyword">import</span> android.util.AttributeSet;<br><span class="hljs-keyword">import</span> android.widget.LinearLayout;<br><br><span class="hljs-keyword">import</span> androidx.annotation.Nullable;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 黑椒唱片页面View</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RecordPageView</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">LinearLayout</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">RecordPageView</span><span class="hljs-params">(Context context)</span> &#123;<br>        <span class="hljs-built_in">super</span>(context);<br>        init();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">RecordPageView</span><span class="hljs-params">(Context context, <span class="hljs-meta">@Nullable</span> AttributeSet attrs)</span> &#123;<br>        <span class="hljs-built_in">super</span>(context, attrs);<br>        init();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">RecordPageView</span><span class="hljs-params">(Context context, <span class="hljs-meta">@Nullable</span> AttributeSet attrs, <span class="hljs-type">int</span> defStyleAttr)</span> &#123;<br>        <span class="hljs-built_in">super</span>(context, attrs, defStyleAttr);<br>        init();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">RecordPageView</span><span class="hljs-params">(Context context, AttributeSet attrs, <span class="hljs-type">int</span> defStyleAttr, <span class="hljs-type">int</span> defStyleRes)</span> &#123;<br>        <span class="hljs-built_in">super</span>(context, attrs, defStyleAttr, defStyleRes);<br>        init();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="添加一个布局view-record-page-xml-然后将其加载进去"><a href="#添加一个布局view-record-page-xml-然后将其加载进去" class="headerlink" title="添加一个布局view_record_page.xml,然后将其加载进去"></a>添加一个布局view_record_page.xml,然后将其加载进去</h2><p>创建一个线性布局，在activity中有可以不用创建，但是在View中没有，需要创建一个布局</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">ViewRecordPageBinding.inflate(LayoutInflater.from(getContext()),<span class="hljs-built_in">this</span>,<span class="hljs-literal">true</span>);<br><span class="hljs-comment">//最后一个是true，说明会自动调用getRoot（）方法,自动添加到布局</span><br></code></pre></td></tr></table></figure><h2 id="在布局中，采用约束布局，方便利用大小的百分比，更好兼容"><a href="#在布局中，采用约束布局，方便利用大小的百分比，更好兼容" class="headerlink" title="在布局中，采用约束布局，方便利用大小的百分比，更好兼容"></a>在布局中，采用约束布局，方便利用大小的百分比，更好兼容</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml">app:layout_constraintWidth_percent=&quot;0.731&quot;<br>//当前控件与父控件成一定的比例<br>app:layout_constraintDimensionRatio=&quot;H,1:1&quot;<br>//当前控件宽=高<br></code></pre></td></tr></table></figure><h2 id="背景采用第三方控件："><a href="#背景采用第三方控件：" class="headerlink" title="背景采用第三方控件："></a>背景采用第三方控件：</h2><p>（方便选抓）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">de.hdodenhof.circleimageview.CircleImageView</span></span><br><span class="hljs-tag">                <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/icon&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">tools:src</span>=<span class="hljs-string">&quot;@drawable/placeholder&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">app:layout_constraintWidth_percent</span>=<span class="hljs-string">&quot;0.64&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">app:layout_constraintDimensionRatio</span>=<span class="hljs-string">&quot;H,1:1&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">app:layout_constraintStart_toStartOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">app:layout_constraintEnd_toEndOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">app:layout_constraintTop_toTopOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">app:layout_constraintBottom_toBottomOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;0dp&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;0dp&quot;</span>&gt;</span><br><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">de.hdodenhof.circleimageview.CircleImageView</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    黑胶唱片指针--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ImageView</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/record_thumb&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;92dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;138dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:src</span>=<span class="hljs-string">&quot;@drawable/cd_thumb&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintStart_toStartOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintEnd_toEndOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintTop_toTopOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        &gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ImageView</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="添加黑胶唱片"><a href="#添加黑胶唱片" class="headerlink" title="添加黑胶唱片"></a>添加黑胶唱片</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--        添加黑椒唱片控件--&gt;</span><br>//采用权重和高占用剩余空间<br>        <span class="hljs-tag">&lt;<span class="hljs-name">com.zhy.view.RecordPageView</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;0dp&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_weight</span>=<span class="hljs-string">&quot;1&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h2 id="显示封面信息"><a href="#显示封面信息" class="headerlink" title="显示封面信息"></a>显示封面信息</h2><p>在MusicPlayerActivity中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 显示初始化数据</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showInitData</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//获取当前播放的音乐以显示标题</span><br>    Song data= getMusicListManager().getData();<br>    <span class="hljs-comment">//显示当前歌曲标题</span><br>    setTitle(data.getTitle());<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 显示歌手信息</span><br><span class="hljs-comment">     */</span><br>    toolbar.setSubtitle(data.getSinger().getNickname());<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 显示背景</span><br><span class="hljs-comment">     */</span><br>    ImageUtil.show(binding.record.binding.icon,data.getIcon());<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="让黑胶唱片转起来"><a href="#让黑胶唱片转起来" class="headerlink" title="让黑胶唱片转起来"></a>让黑胶唱片转起来</h2><p>在showProgress方法中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">binding.record.incrementRotate();<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
      <tag>实现显示黑胶唱片信息</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>26.2-android-实现播放暂停相关功能</title>
    <link href="/2022/11/19/26.2-android-%E5%AE%9E%E7%8E%B0%E6%92%AD%E6%94%BE%E6%9A%82%E5%81%9C%E7%9B%B8%E5%85%B3%E5%8A%9F%E8%83%BD/"/>
    <url>/2022/11/19/26.2-android-%E5%AE%9E%E7%8E%B0%E6%92%AD%E6%94%BE%E6%9A%82%E5%81%9C%E7%9B%B8%E5%85%B3%E5%8A%9F%E8%83%BD/</url>
    
    <content type="html"><![CDATA[<h1 id="26-2-android-实现播放暂停相关功能"><a href="#26-2-android-实现播放暂停相关功能" class="headerlink" title="26.2-android-实现播放暂停相关功能"></a>26.2-android-实现播放暂停相关功能</h1><h2 id="播放暂停："><a href="#播放暂停：" class="headerlink" title="播放暂停："></a>播放暂停：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 播放按钮点击事件</span><br><span class="hljs-comment">         */</span><br>        binding.play.setOnClickListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">View</span>.OnClickListener() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onClick</span><span class="hljs-params">(View view)</span> &#123;<br>                <span class="hljs-keyword">if</span>(musicPlayerManager.isPlaying())&#123;<br>                    getMusicListManager().pause();<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    getMusicListManager().resume();<br>                &#125;<br>            &#125;<br>        &#125;);<br></code></pre></td></tr></table></figure><h2 id="上一曲、下一曲："><a href="#上一曲、下一曲：" class="headerlink" title="上一曲、下一曲："></a>上一曲、下一曲：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">        * 下一曲点击事件</span><br><span class="hljs-comment">        */</span><br>       binding.next.setOnClickListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">View</span>.OnClickListener() &#123;<br>           <span class="hljs-meta">@Override</span><br>           <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onClick</span><span class="hljs-params">(View view)</span> &#123;<br>               Song data=getMusicListManager().next();<br>               getMusicListManager().play(data);<br>           &#125;<br>       &#125;);<br></code></pre></td></tr></table></figure><h2 id="更改循环模式："><a href="#更改循环模式：" class="headerlink" title="更改循环模式："></a>更改循环模式：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 循环模式点击事件</span><br><span class="hljs-comment">         */</span><br>        binding.loopModel.setOnClickListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">View</span>.OnClickListener() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onClick</span><span class="hljs-params">(View view)</span> &#123;<br>                <span class="hljs-comment">//更改循环模式</span><br>                getMusicListManager().changeLoopModel();<br>                <span class="hljs-comment">//显示循环模式</span><br>                showLoopModel();<br>            &#125;<br>        &#125;);<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 显示循环模式</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showLoopModel</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">int</span> model=getMusicListManager().getLoopModel();<br>        <span class="hljs-keyword">switch</span> (model)&#123;<br>            <span class="hljs-keyword">case</span> MusicListManager.MODEL_LOOP_LIST:<br>                binding.loopModel.setImageResource(R.drawable.music_repeat_list);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> MusicListManager.MODEL_LOOP_RANDOM:<br>                binding.loopModel.setImageResource(R.drawable.music_repeat_random);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                binding.loopModel.setImageResource(R.drawable.music_repeat_one);<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br><span class="hljs-comment">//在MusicListManager中：</span><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 更改循环模式</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">changeLoopModel</span><span class="hljs-params">()</span> &#123;<br>        model++;<br>        <span class="hljs-keyword">if</span> (model &gt; MODEL_LOOP_RANDOM) &#123;<br>            model = MODEL_LOOP_LIST;<br>        &#125;<br>        <span class="hljs-comment">//单曲循环</span><br>        <span class="hljs-keyword">if</span> (MODEL_LOOP_ONE==model) &#123;<br>            musicPlayerManager.setLooping(<span class="hljs-literal">true</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//其他模式关闭单曲循环</span><br>            musicPlayerManager.setLooping(<span class="hljs-literal">false</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> model;<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="界面显示时执行的OnResume方法："><a href="#界面显示时执行的OnResume方法：" class="headerlink" title="界面显示时执行的OnResume方法："></a>界面显示时执行的OnResume方法：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onResume</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">super</span>.onResume();<br>    <span class="hljs-comment">//显示初始化数据</span><br>    showInitData();<br>    <span class="hljs-comment">//显示音乐播放状态</span><br>    showMusicPLayStatus();<br>    <span class="hljs-comment">//显示音乐总时长</span><br>    showDuration();<br>    <span class="hljs-comment">//显示音乐进度</span><br>    showProgress();<br>    <span class="hljs-comment">//显示循环模式</span><br>    showLoopModel();<br>    <span class="hljs-comment">//设置播放监听器</span><br>    musicPlayerManager.addMusicPlayerListener(<span class="hljs-built_in">this</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="显示初始化数据"><a href="#显示初始化数据" class="headerlink" title="显示初始化数据"></a>显示初始化数据</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 显示初始化数据</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showInitData</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//获取当前播放的音乐以显示标题</span><br>    Song data= getMusicListManager().getData();<br>    <span class="hljs-comment">//显示当前歌曲标题</span><br>    setTitle(data.getTitle());<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 显示歌手信息</span><br><span class="hljs-comment">     */</span><br>    toolbar.setSubtitle(data.getSinger().getNickname());<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 显示背景</span><br><span class="hljs-comment">     */</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="显示音乐播放进度"><a href="#显示音乐播放进度" class="headerlink" title="显示音乐播放进度"></a>显示音乐播放进度</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 显示音乐播放进度</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showProgress</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//如果当前在拖拽，不显示当前进度</span><br>        <span class="hljs-keyword">if</span>(isSeekTracking)&#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">//音乐的播放进度</span><br>        <span class="hljs-type">int</span> progress=getMusicListManager().getData().getProgress();<br><span class="hljs-comment">//        格式化进度</span><br>        binding.start.setText(SuperDateUtil.ms2ms(progress));<br>        <span class="hljs-comment">//将进度设置到播放条上去</span><br>        binding.progress.setProgress(progress);<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="显示音乐播放状态"><a href="#显示音乐播放状态" class="headerlink" title="显示音乐播放状态"></a>显示音乐播放状态</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 首次显示播放状态</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showMusicPLayStatus</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">if</span>(musicPlayerManager.isPlaying())&#123;<br>        showPauseStatus();<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        showPlayStatus();<br>    &#125;<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 显示播放状态</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showPlayStatus</span><span class="hljs-params">()</span> &#123;<br>    binding.play.setImageResource(R.drawable.music_play);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 显示暂停状态</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showPauseStatus</span><span class="hljs-params">()</span> &#123;<br>    binding.play.setImageResource(R.drawable.music_pause);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="显示音乐播放总时长"><a href="#显示音乐播放总时长" class="headerlink" title="显示音乐播放总时长"></a>显示音乐播放总时长</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 显示音乐总时长</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showDuration</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> duration=getMusicListManager().getData().getDuration();<br>    binding.end.setText(SuperDateUtil.ms2ms(duration));<br>    binding.progress.setMax(duration);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="设置拖拽进度条的监听器"><a href="#设置拖拽进度条的监听器" class="headerlink" title="设置拖拽进度条的监听器"></a>设置拖拽进度条的监听器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//        设置拖拽进度空间的监听器</span><br>        binding.progress.setOnSeekBarChangeListener(<span class="hljs-built_in">this</span>);<br></code></pre></td></tr></table></figure><h2 id="进度条监听器-上句代码被执行，就会执行对应的监听器代码"><a href="#进度条监听器-上句代码被执行，就会执行对应的监听器代码" class="headerlink" title="进度条监听器,上句代码被执行，就会执行对应的监听器代码"></a>进度条监听器,上句代码被执行，就会执行对应的监听器代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//region 进度条监听器</span><br><br> <span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 进度改变了</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> seekBar</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> progress   当前进度</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> fromUser  是否是用户拖拽的</span><br><span class="hljs-comment">  */</span><br> <span class="hljs-meta">@Override</span><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onProgressChanged</span><span class="hljs-params">(SeekBar seekBar, <span class="hljs-type">int</span> progress, <span class="hljs-type">boolean</span> fromUser)</span> &#123;<br>     <span class="hljs-keyword">if</span>(fromUser)&#123;<br>         getMusicListManager().seekTo(progress);<br>     &#125;<br> &#125;<br><br> <span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 开始拖拽进度时</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> seekBar</span><br><span class="hljs-comment">  */</span><br> <span class="hljs-meta">@Override</span><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onStartTrackingTouch</span><span class="hljs-params">(SeekBar seekBar)</span> &#123;<br>     isSeekTracking=<span class="hljs-literal">true</span>;<br> &#125;<br><br><br> <span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 停止拖拽</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> seekBar</span><br><span class="hljs-comment">  */</span><br> <span class="hljs-meta">@Override</span><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onStopTrackingTouch</span><span class="hljs-params">(SeekBar seekBar)</span> &#123;<br>     isSeekTracking=<span class="hljs-literal">false</span>;<br> &#125;<br><br> <span class="hljs-comment">//endregion</span><br></code></pre></td></tr></table></figure><h2 id="在onResume方法中执行musicPlayerManager-addMusicPlayerListener-this-后会执行对应的播放监听器代码"><a href="#在onResume方法中执行musicPlayerManager-addMusicPlayerListener-this-后会执行对应的播放监听器代码" class="headerlink" title="在onResume方法中执行musicPlayerManager.addMusicPlayerListener(this)后会执行对应的播放监听器代码"></a>在onResume方法中执行musicPlayerManager.addMusicPlayerListener(this)后会执行对应的播放监听器代码</h2><h4 id="不仅在初始的时候（onResume）要展示播放状态、进度等信息；音乐的播放状态等每变化一次就要调用一次展示状态的函数。"><a href="#不仅在初始的时候（onResume）要展示播放状态、进度等信息；音乐的播放状态等每变化一次就要调用一次展示状态的函数。" class="headerlink" title="不仅在初始的时候（onResume）要展示播放状态、进度等信息；音乐的播放状态等每变化一次就要调用一次展示状态的函数。"></a>不仅在初始的时候（onResume）要展示播放状态、进度等信息；音乐的播放状态等每变化一次就要调用一次展示状态的函数。</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//region 播放监听器</span><br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 播放监听器</span><br><span class="hljs-comment">    * 从暂停到播放</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> data</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onPaused</span><span class="hljs-params">(Song data)</span> &#123;<br>       showPlayStatus();<br>   &#125;<br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 从播放到暂停</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> data</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onPlaying</span><span class="hljs-params">(Song data)</span> &#123;<br>       showPauseStatus();<br>   &#125;<br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 音乐播放中</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> data</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onProgress</span><span class="hljs-params">(Song data)</span> &#123;<br>       <span class="hljs-comment">//显示音乐进度</span><br>       showProgress();<br>   &#125;<br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 显示总进度</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> mp</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> data</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onPrepared</span><span class="hljs-params">(MediaPlayer mp, Song data)</span> &#123;<br>       <span class="hljs-comment">//显示初始化数据</span><br>       showInitData();<br>       <span class="hljs-comment">//显示总时长</span><br>       showDuration();<br>   &#125;<br>   <span class="hljs-comment">//endregion</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
      <tag>实现黑胶唱片暂停相关功能</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>android-26.1-实现黑胶唱片布局功能</title>
    <link href="/2022/11/19/android-26.1-%E5%AE%9E%E7%8E%B0%E9%BB%91%E8%83%B6%E5%94%B1%E7%89%87%E5%B8%83%E5%B1%80%E5%8A%9F%E8%83%BD/"/>
    <url>/2022/11/19/android-26.1-%E5%AE%9E%E7%8E%B0%E9%BB%91%E8%83%B6%E5%94%B1%E7%89%87%E5%B8%83%E5%B1%80%E5%8A%9F%E8%83%BD/</url>
    
    <content type="html"><![CDATA[<h1 id="android-26-1-实现黑胶唱片布局功能"><a href="#android-26-1-实现黑胶唱片布局功能" class="headerlink" title="android-26.1-实现黑胶唱片布局功能"></a>android-26.1-实现黑胶唱片布局功能</h1><ol><li><h2 id="创建MusicPlayerActivity"><a href="#创建MusicPlayerActivity" class="headerlink" title="创建MusicPlayerActivity"></a>创建MusicPlayerActivity</h2></li><li><h2 id="在BaseLogicActivity中实现界面的跳转"><a href="#在BaseLogicActivity中实现界面的跳转" class="headerlink" title="在BaseLogicActivity中实现界面的跳转"></a>在BaseLogicActivity中实现界面的跳转</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 特有逻辑</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseLogicActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseCommonActivity</span> &#123;<br><span class="hljs-comment">//    进入音乐播放界面</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">startMusicPlayerActivity</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-comment">//        简单播放界面</span><br><span class="hljs-comment">//        startActivity(SimplePlayerActivity.class);</span><br><span class="hljs-comment">//        黑胶唱片界面</span><br>        startActivity(MusicPlayerActivity.class);<br>    &#125;<br><span class="hljs-comment">//    获取播放列表管理器</span><br>    <span class="hljs-keyword">protected</span> MusicListManager <span class="hljs-title function_">getMusicListManager</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> MusicListManager.getInstance(getHostActivity());<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><h2 id="布局界面"><a href="#布局界面" class="headerlink" title="布局界面"></a>布局界面</h2><p>沉浸式状态栏</p><p>跳过状态栏显示：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">android:</span>fitsSystemWindows=<span class="hljs-string">&quot;true&quot;</span><br></code></pre></td></tr></table></figure></li><li><h2 id="设置按钮点击事件"><a href="#设置按钮点击事件" class="headerlink" title="设置按钮点击事件"></a>设置按钮点击事件</h2><ul><li><p>设置沉浸式状态栏：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initViews</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>.initViews();<br><span class="hljs-comment">//        设置沉浸式状态栏</span><br>        QMUIStatusBarHelper.translucent(<span class="hljs-built_in">this</span>);<br>    &#125;<br></code></pre></td></tr></table></figure></li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
      <tag>实现黑胶唱片布局功能</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>android-25-实现全局显示音乐信息</title>
    <link href="/2022/11/19/android-25-%E5%AE%9E%E7%8E%B0%E5%85%A8%E5%B1%80%E6%98%BE%E7%A4%BA%E9%9F%B3%E4%B9%90%E4%BF%A1%E6%81%AF/"/>
    <url>/2022/11/19/android-25-%E5%AE%9E%E7%8E%B0%E5%85%A8%E5%B1%80%E6%98%BE%E7%A4%BA%E9%9F%B3%E4%B9%90%E4%BF%A1%E6%81%AF/</url>
    
    <content type="html"><![CDATA[<h1 id="android-25-实现全局显示音乐信息"><a href="#android-25-实现全局显示音乐信息" class="headerlink" title="android-25-实现全局显示音乐信息"></a>android-25-实现全局显示音乐信息</h1><h2 id="使用第三方控件："><a href="#使用第三方控件：" class="headerlink" title="使用第三方控件："></a>使用第三方控件：</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>圆形图形控件<br>implementation <span class="hljs-string">&#x27;de.hdodenhof:circleimageview:+&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="自定义View："><a href="#自定义View：" class="headerlink" title="自定义View："></a>自定义View：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zhy.view;<br><br><span class="hljs-keyword">import</span> android.content.Context;<br><span class="hljs-keyword">import</span> android.util.AttributeSet;<br><span class="hljs-keyword">import</span> android.view.LayoutInflater;<br><span class="hljs-keyword">import</span> android.widget.LinearLayout;<br><br><span class="hljs-keyword">import</span> androidx.annotation.Nullable;<br><br><span class="hljs-keyword">import</span> com.zhy.zhycloudmusic.databinding.ViewSmallMusicControlBinding;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 迷你音乐控制器view</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SmallMusicControlView</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">LinearLayout</span> &#123;<br>    <span class="hljs-keyword">private</span> ViewSmallMusicControlBinding binding;<br><span class="hljs-comment">//当init执行以后，就会把绑定的view_small_music_control加载到这个自定义的View中，在主布局中添加这个自定义View即可把布局放进去。</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> &#123;<br>        binding = ViewSmallMusicControlBinding.inflate(LayoutInflater.from(getContext()),<br>                <span class="hljs-built_in">this</span>, <span class="hljs-literal">true</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="其对应的布局文件-view-small-music-control-xml"><a href="#其对应的布局文件-view-small-music-control-xml" class="headerlink" title="其对应的布局文件:view_small_music_control.xml"></a>其对应的布局文件:view_small_music_control.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">LinearLayout</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;@dimen/d50&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;@dimen/d50&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:tools</span>=<span class="hljs-string">&quot;http://schemas.android.com/tools&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">RelativeLayout</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--        黑胶唱片--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ImageView</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:src</span>=<span class="hljs-string">&quot;@drawable/cd_background&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!--        封面--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">de.hdodenhof.circleimageview.CircleImageView</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/icon&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_margin</span>=<span class="hljs-string">&quot;@dimen/d5&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">tools:src</span>=<span class="hljs-string">&quot;@drawable/placeholder&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">RelativeLayout</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">LinearLayout</span>&gt;</span><br></code></pre></td></tr></table></figure><p>将布局文件加载进来，把布局转化成一个view添加进去</p><p>在activity_main.xml中加载自定义的View：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml">    <span class="hljs-tag">&lt;<span class="hljs-name">RelativeLayout</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;0dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_weight</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">androidx.viewpager.widget.ViewPager</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/list&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;0dp&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_weight</span>=<span class="hljs-string">&quot;1&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">layout</span>=<span class="hljs-string">&quot;@layout/divider&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!--        放在底部的布局会盖住相对布局上面的布局--&gt;</span><br>        //自定义控件不能只写类名，要写全部的包名<br>        <span class="hljs-tag">&lt;<span class="hljs-name">com.zhy.view.SmallMusicControlView</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/music_control&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_marginLeft</span>=<span class="hljs-string">&quot;@dimen/padding_outer&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_marginBottom</span>=<span class="hljs-string">&quot;@dimen/padding_outer&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_alignParentBottom</span>=<span class="hljs-string">&quot;true&quot;</span></span><br><span class="hljs-tag">            &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">com.zhy.view.SmallMusicControlView</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">RelativeLayout</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="在MainActicity中找到这个控件设置数据"><a href="#在MainActicity中找到这个控件设置数据" class="headerlink" title="在MainActicity中找到这个控件设置数据"></a>在MainActicity中找到这个控件设置数据</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//        音乐迷你控制器点击事件，点击进入播放界面</span><br>        binding.musicControl.setOnClickListener(v -&gt; startMusicPlayerActivity());<br></code></pre></td></tr></table></figure><h2 id="显示迷你播放器的封面和转动效果"><a href="#显示迷你播放器的封面和转动效果" class="headerlink" title="显示迷你播放器的封面和转动效果"></a>显示迷你播放器的封面和转动效果</h2><h4 id="在MainActicity中将OnResume和OnPause方法回调到SmallMusicControlView中去"><a href="#在MainActicity中将OnResume和OnPause方法回调到SmallMusicControlView中去" class="headerlink" title="在MainActicity中将OnResume和OnPause方法回调到SmallMusicControlView中去"></a>在MainActicity中将OnResume和OnPause方法回调到SmallMusicControlView中去</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onResume</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">super</span>.onResume();<br>    binding.musicControl.onResume();<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onPause</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">super</span>.onPause();<br>    binding.musicControl.onPause();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="在SmallMusicControlView中："><a href="#在SmallMusicControlView中：" class="headerlink" title="在SmallMusicControlView中："></a>在SmallMusicControlView中：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 迷你音乐控制器view</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SmallMusicControlView</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">LinearLayout</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">MusicPlayerListener</span> &#123;<br><span class="hljs-comment">//    旋转角度</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">float</span> recordRotation;<br>    <span class="hljs-keyword">private</span> ViewSmallMusicControlBinding binding;<br>    <span class="hljs-keyword">private</span> MusicPlayerManager musicPlayerManager;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SmallMusicControlView</span><span class="hljs-params">(Context context)</span> &#123;<br>        <span class="hljs-built_in">super</span>(context);<br>        init();<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SmallMusicControlView</span><span class="hljs-params">(Context context, <span class="hljs-meta">@Nullable</span> AttributeSet attrs)</span> &#123;<br>        <span class="hljs-built_in">super</span>(context, attrs);<br>        init();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SmallMusicControlView</span><span class="hljs-params">(Context context, <span class="hljs-meta">@Nullable</span> AttributeSet attrs, <span class="hljs-type">int</span> defStyleAttr)</span> &#123;<br>        <span class="hljs-built_in">super</span>(context, attrs, defStyleAttr);<br>        init();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SmallMusicControlView</span><span class="hljs-params">(Context context, AttributeSet attrs, <span class="hljs-type">int</span> defStyleAttr, <span class="hljs-type">int</span> defStyleRes)</span> &#123;<br>        <span class="hljs-built_in">super</span>(context, attrs, defStyleAttr, defStyleRes);<br>        init();<br>    &#125;<br><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> &#123;<br>        binding = ViewSmallMusicControlBinding.inflate(LayoutInflater.from(getContext()),<br>                <span class="hljs-built_in">this</span>, <span class="hljs-literal">true</span>);<br>        initDatum();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initDatum</span><span class="hljs-params">()</span> &#123;<br>        musicPlayerManager = MusicPlayerManager.getInstance(getContext());<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 主界面可见了</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onResume</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">//        显示初始化数据</span><br>        showInitData();<br><span class="hljs-comment">//        显示播放进度</span><br>        showProgress();<br><span class="hljs-comment">//        设置播放监听器</span><br>        musicPlayerManager.addMusicPlayerListener(<span class="hljs-built_in">this</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showProgress</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">//        旋转</span><br>        incrementRotate();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">incrementRotate</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">//        判断旋转角度边界</span><br>        <span class="hljs-keyword">if</span>(recordRotation&gt;<span class="hljs-number">360</span>)&#123;<br>            recordRotation=<span class="hljs-number">0</span>;<br>        &#125;<br>        recordRotation+= Constant.ROTATION_PER;<br><span class="hljs-comment">//        旋转</span><br>        binding.content.setRotation(recordRotation);<br><br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showInitData</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">//        获取当前播放的音乐</span><br>        Song data= MusicListManager.getInstance(getContext()).getData();<br>        <span class="hljs-keyword">if</span>(data==<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        ImageUtil.show(binding.icon,data.getIcon());<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onPause</span><span class="hljs-params">()</span> &#123;<br>        musicPlayerManager.removeMusicPlayerListener(<span class="hljs-built_in">this</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//音乐监听接口实现，音乐准备播放了就初始化数据</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onPrepared</span><span class="hljs-params">(MediaPlayer mp, Song data)</span> &#123;<br>        showInitData();<br>    &#125;<br>   <span class="hljs-comment">//音乐在播放中就显示进度，旋转</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onProgress</span><span class="hljs-params">(Song data)</span> &#123;<br>        showProgress();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
      <tag>实现全局显示音乐信息</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>android-24.3-从数据库恢复播放列表</title>
    <link href="/2022/11/18/android-24.2-%E4%BB%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E6%81%A2%E5%A4%8D%E6%92%AD%E6%94%BE%E5%88%97%E8%A1%A8/"/>
    <url>/2022/11/18/android-24.2-%E4%BB%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E6%81%A2%E5%A4%8D%E6%92%AD%E6%94%BE%E5%88%97%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="android-24-3-从数据库恢复播放列表"><a href="#android-24-3-从数据库恢复播放列表" class="headerlink" title="android-24.3-从数据库恢复播放列表"></a>android-24.3-从数据库恢复播放列表</h1><p>在MusicListManager（播放列表管理器）创建时恢复，即构造方法中恢复:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//初始化列表</span><br>initPlayList();<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initPlayList</span><span class="hljs-params">()</span> &#123;<br>       <span class="hljs-comment">/**</span><br><span class="hljs-comment">        * 查询播放列表</span><br><span class="hljs-comment">        */</span><br>       List&lt;Song&gt; datum=orm.queryPlayList();<br>       <span class="hljs-keyword">if</span>(!datum.isEmpty())&#123;<br>           <span class="hljs-built_in">this</span>.datum.clear();<br>           <span class="hljs-built_in">this</span>.datum.addAll(datum);<br>           <span class="hljs-comment">/**</span><br><span class="hljs-comment">            * 获取最后播放音乐的id</span><br><span class="hljs-comment">            */</span><br>           String id=sp.getLastPlaySongId();<br>           <span class="hljs-keyword">if</span>(StringUtils.isNotBlank(id))&#123;<br>               <span class="hljs-comment">/**</span><br><span class="hljs-comment">                * 根据id找到该音乐</span><br><span class="hljs-comment">                */</span><br>               <span class="hljs-keyword">for</span> (Song it:datum)&#123;<br>                   <span class="hljs-keyword">if</span>(it.getId().equals(id))&#123;<br>                       data=it;<br>                       <span class="hljs-keyword">break</span>;<br>                   &#125;<br>               &#125;<br>               <span class="hljs-keyword">if</span>(data==<span class="hljs-literal">null</span>)&#123;<br>                   defaultPlaySong();<br>               &#125;<br>           &#125;<span class="hljs-keyword">else</span>&#123;<br>               <span class="hljs-comment">/**</span><br><span class="hljs-comment">                * 默认是第一首音乐</span><br><span class="hljs-comment">                */</span><br>               defaultPlaySong();<br>           &#125;<br>       &#125;<br><br>   &#125;<br></code></pre></td></tr></table></figure><h2 id="在MusicListManager的resume方法中，判断是否需要继续播放（上一次有没有播放音乐的id，最近一次的）"><a href="#在MusicListManager的resume方法中，判断是否需要继续播放（上一次有没有播放音乐的id，最近一次的）" class="headerlink" title="在MusicListManager的resume方法中，判断是否需要继续播放（上一次有没有播放音乐的id，最近一次的）:"></a>在MusicListManager的resume方法中，判断是否需要继续播放（上一次有没有播放音乐的id，最近一次的）:</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java">   <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 继续播放</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">resume</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span>(isPlay)&#123;<br><span class="hljs-comment">//            调用过play方法，即可调用resume</span><br>            musicPlayerManager.resume();<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-comment">//应用第一次打开时，第一次点击继续播放，而这时内部还没有准备播放，所以应该调用play</span><br>            play(data);<br>            <span class="hljs-comment">/**</span><br><span class="hljs-comment">             * 判断是否需要继续播放</span><br><span class="hljs-comment">             */</span><br>            <span class="hljs-keyword">if</span>(data.getProgress()&gt;<span class="hljs-number">0</span>)&#123;<br>                musicPlayerManager.seekTo(data.getProgress());<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
      <tag>从数据库恢复播放列表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>android-24.3-从数据库恢复播放列表</title>
    <link href="/2022/11/18/android-24.3-%E4%BB%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E6%81%A2%E5%A4%8D%E6%92%AD%E6%94%BE%E5%88%97%E8%A1%A8/"/>
    <url>/2022/11/18/android-24.3-%E4%BB%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E6%81%A2%E5%A4%8D%E6%92%AD%E6%94%BE%E5%88%97%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="android-24-2-从数据库恢复播放列表"><a href="#android-24-2-从数据库恢复播放列表" class="headerlink" title="android-24.2-从数据库恢复播放列表"></a>android-24.2-从数据库恢复播放列表</h1><p>在MusicListManager（播放列表管理器）创建时恢复，即构造方法中恢复:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//初始化列表</span><br>initPlayList();<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initPlayList</span><span class="hljs-params">()</span> &#123;<br>       <span class="hljs-comment">/**</span><br><span class="hljs-comment">        * 查询播放列表</span><br><span class="hljs-comment">        */</span><br>       List&lt;Song&gt; datum=orm.queryPlayList();<br>       <span class="hljs-keyword">if</span>(!datum.isEmpty())&#123;<br>           <span class="hljs-built_in">this</span>.datum.clear();<br>           <span class="hljs-built_in">this</span>.datum.addAll(datum);<br>           <span class="hljs-comment">/**</span><br><span class="hljs-comment">            * 获取最后播放音乐的id</span><br><span class="hljs-comment">            */</span><br>           String id=sp.getLastPlaySongId();<br>           <span class="hljs-keyword">if</span>(StringUtils.isNotBlank(id))&#123;<br>               <span class="hljs-comment">/**</span><br><span class="hljs-comment">                * 根据id找到该音乐</span><br><span class="hljs-comment">                */</span><br>               <span class="hljs-keyword">for</span> (Song it:datum)&#123;<br>                   <span class="hljs-keyword">if</span>(it.getId().equals(id))&#123;<br>                       data=it;<br>                       <span class="hljs-keyword">break</span>;<br>                   &#125;<br>               &#125;<br>               <span class="hljs-keyword">if</span>(data==<span class="hljs-literal">null</span>)&#123;<br>                   defaultPlaySong();<br>               &#125;<br>           &#125;<span class="hljs-keyword">else</span>&#123;<br>               <span class="hljs-comment">/**</span><br><span class="hljs-comment">                * 默认是第一首音乐</span><br><span class="hljs-comment">                */</span><br>               defaultPlaySong();<br>           &#125;<br>       &#125;<br><br>   &#125;<br></code></pre></td></tr></table></figure><h2 id="在MusicListManager的resume方法中，判断是否需要继续播放（上一次有没有播放音乐的id，最近一次的）"><a href="#在MusicListManager的resume方法中，判断是否需要继续播放（上一次有没有播放音乐的id，最近一次的）" class="headerlink" title="在MusicListManager的resume方法中，判断是否需要继续播放（上一次有没有播放音乐的id，最近一次的）:"></a>在MusicListManager的resume方法中，判断是否需要继续播放（上一次有没有播放音乐的id，最近一次的）:</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java">   <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 继续播放</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">resume</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span>(isPlay)&#123;<br><span class="hljs-comment">//            调用过play方法，即可调用resume</span><br>            musicPlayerManager.resume();<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-comment">//应用第一次打开时，第一次点击继续播放，而这时内部还没有准备播放，所以应该调用play</span><br>            play(data);<br>            <span class="hljs-comment">/**</span><br><span class="hljs-comment">             * 判断是否需要继续播放</span><br><span class="hljs-comment">             */</span><br>            <span class="hljs-keyword">if</span>(data.getProgress()&gt;<span class="hljs-number">0</span>)&#123;<br>                musicPlayerManager.seekTo(data.getProgress());<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
      <tag>从数据库恢复播放列表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>android-24.2-实现保存播放列表信息</title>
    <link href="/2022/11/18/android-24.2%E5%AE%9E%E7%8E%B0%E4%BF%9D%E5%AD%98%E6%92%AD%E6%94%BE%E5%88%97%E8%A1%A8%E4%BF%A1%E6%81%AF/"/>
    <url>/2022/11/18/android-24.2%E5%AE%9E%E7%8E%B0%E4%BF%9D%E5%AD%98%E6%92%AD%E6%94%BE%E5%88%97%E8%A1%A8%E4%BF%A1%E6%81%AF/</url>
    
    <content type="html"><![CDATA[<h1 id="android-24-2-实现保存播放列表信息"><a href="#android-24-2-实现保存播放列表信息" class="headerlink" title="android-24.2-实现保存播放列表信息"></a>android-24.2-实现保存播放列表信息</h1><h2 id="封装数据库保存播放列表方法"><a href="#封装数据库保存播放列表方法" class="headerlink" title="封装数据库保存播放列表方法"></a>封装数据库保存播放列表方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//region 播放列表</span><br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 查询播放列表</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-keyword">public</span> List&lt;Song&gt; <span class="hljs-title function_">queryPlayList</span><span class="hljs-params">()</span>&#123;<br>       QueryBuilder&lt;Song&gt; queryBuilder = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryBuilder</span>&lt;&gt;(Song.class);<br>       queryBuilder.appendOrderDescBy(<span class="hljs-string">&quot;createAt&quot;</span>);<br>       <span class="hljs-keyword">return</span> localConverts(orm.query(queryBuilder));<br><br>   &#125;<br><br>   <span class="hljs-keyword">private</span> List&lt;Song&gt; <span class="hljs-title function_">localConverts</span><span class="hljs-params">(ArrayList&lt;Song&gt; data)</span> &#123;<br>       <span class="hljs-keyword">for</span>(Song it:data)&#123;<br>           it.localConvert();<br>       &#125;<br>       <span class="hljs-keyword">return</span> data;<br>   &#125;<br><br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 删除某一首音乐</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> data</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteSong</span><span class="hljs-params">(Song data)</span>&#123;<br>       orm.delete(data);<br>   &#125;<br><br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 删除所有</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteAll</span><span class="hljs-params">()</span>&#123;<br>       orm.deleteAll(Song.class);<br>   &#125;<br><br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 保存播放列表的所有音乐</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> data</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveAll</span><span class="hljs-params">(List&lt;Song&gt; data)</span>&#123;<br>       convertLocal(data);<br>       orm.save(data);<br>   &#125;<br><br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">convertLocal</span><span class="hljs-params">(List&lt;Song&gt; data)</span> &#123;<br>       <span class="hljs-keyword">for</span> (Song it:data)&#123;<br>           it.convertLocal();<br>       &#125;<br>   &#125;<br><br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 保存一首音乐</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">(Song data)</span>&#123;<br>       orm.save(data);<br>   &#125;<br>   <span class="hljs-comment">//endregion</span><br></code></pre></td></tr></table></figure><h2 id="使用：在MusicListManager中的setDatum方法中"><a href="#使用：在MusicListManager中的setDatum方法中" class="headerlink" title="使用：在MusicListManager中的setDatum方法中"></a>使用：在MusicListManager中的setDatum方法中</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDatum</span><span class="hljs-params">(List&lt;Song&gt; datum)</span> &#123;<br>       orm.deleteAllSong();<br>       <span class="hljs-comment">//清空原来的列表</span><br>       <span class="hljs-built_in">this</span>.datum.clear();<br>       <span class="hljs-comment">//添加新的播放列表</span><br>       <span class="hljs-built_in">this</span>.datum.addAll(datum);<br>       <span class="hljs-comment">//将播放列表保存至数据库</span><br>       orm.saveAll(datum);<br>   &#125;<br></code></pre></td></tr></table></figure><h2 id="实现下一次打开APP，能够从上一次播放的位置继续播放："><a href="#实现下一次打开APP，能够从上一次播放的位置继续播放：" class="headerlink" title="实现下一次打开APP，能够从上一次播放的位置继续播放："></a>实现下一次打开APP，能够从上一次播放的位置继续播放：</h2><p>保存上一次播放音乐的id</p><p>保存上一次（当前）播放音乐的进度,在musiclistmanager中，onProgressed()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//每两秒钟保存一次</span><br> <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onProgress</span><span class="hljs-params">(Song data)</span> &#123;<br>        <span class="hljs-type">long</span> currentTime=System.currentTimeMillis();<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 每两秒钟保存一次</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">if</span>(currentTime-lastTime&gt;=SAVE_PROGRESS_TIME)&#123;<br>            orm.save(data);<br>            lastTime=currentTime;<br>        &#125;<br>    <br></code></pre></td></tr></table></figure><h2 id=""><a href="#" class="headerlink" title=""></a></h2><p>加载播放列表</p><p>将user划分</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//歌手拆分</span><br><span class="hljs-meta">@Column(&quot;single_id&quot;)</span><br><span class="hljs-keyword">private</span> String singerId;<br><span class="hljs-meta">@Column(&quot;singer_nickname&quot;)</span><br><span class="hljs-keyword">private</span> String singerNickname;<br><span class="hljs-meta">@Column(&quot;singer_icon&quot;)</span><br><span class="hljs-keyword">private</span> String singerIcon;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 转化字段user</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">localConvert</span><span class="hljs-params">()</span>&#123;<br>    User user=<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>    user.setId(singerId);<br>    user.setNickname(singerNickname);<br>    user.setIcon(singerIcon);<br>    singer=user;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">convertLocal</span><span class="hljs-params">()</span>&#123;<br>    singerId=singer.getId();<br>    singerNickname=singer.getNickname();<br>    singerIcon=singer.getIcon();<br><br>&#125;<br></code></pre></td></tr></table></figure><p>修复bug，拖拽音乐后继续播放：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">seekTo</span><span class="hljs-params">(<span class="hljs-type">int</span> data)</span> &#123;<br>       <span class="hljs-keyword">if</span>(!musicPlayerManager.isPlaying())&#123;<br>           resume();<br>       &#125;<br>       musicPlayerManager.seekTo(data);<br>   &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
      <tag>保存播放列表信息</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>android-24.1-实现音乐列表持久化配置</title>
    <link href="/2022/11/18/android-24.1-%E5%AE%9E%E7%8E%B0%E9%9F%B3%E4%B9%90%E5%88%97%E8%A1%A8%E6%8C%81%E4%B9%85%E5%8C%96%E9%85%8D%E7%BD%AE%EF%BC%8C%E9%85%8D%E7%BD%AE%E8%A1%A8%E5%90%8D%EF%BC%8C%E4%B8%BB%E9%94%AE%EF%BC%8C%E5%BF%BD%E7%95%A5%E5%AD%97%E6%AE%B5%EF%BC%8C%E6%9B%B4%E6%94%B9%E5%AD%97%E6%AE%B5%E5%90%8D%E7%A7%B0%E7%AD%89%E3%80%82/"/>
    <url>/2022/11/18/android-24.1-%E5%AE%9E%E7%8E%B0%E9%9F%B3%E4%B9%90%E5%88%97%E8%A1%A8%E6%8C%81%E4%B9%85%E5%8C%96%E9%85%8D%E7%BD%AE%EF%BC%8C%E9%85%8D%E7%BD%AE%E8%A1%A8%E5%90%8D%EF%BC%8C%E4%B8%BB%E9%94%AE%EF%BC%8C%E5%BF%BD%E7%95%A5%E5%AD%97%E6%AE%B5%EF%BC%8C%E6%9B%B4%E6%94%B9%E5%AD%97%E6%AE%B5%E5%90%8D%E7%A7%B0%E7%AD%89%E3%80%82/</url>
    
    <content type="html"><![CDATA[<h1 id="android-24-1-实现音乐列表持久化配置，配置表名，主键，忽略字段，更改字段名称等。"><a href="#android-24-1-实现音乐列表持久化配置，配置表名，主键，忽略字段，更改字段名称等。" class="headerlink" title="android-24.1-实现音乐列表持久化配置，配置表名，主键，忽略字段，更改字段名称等。"></a>android-24.1-实现音乐列表持久化配置，配置表名，主键，忽略字段，更改字段名称等。</h1><h2 id="主键配置："><a href="#主键配置：" class="headerlink" title="主键配置："></a>主键配置：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseId</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Base</span>&#123;<br><br>    <span class="hljs-meta">@PrimaryKey(AssignType.BY_MYSELF)</span><br>    <span class="hljs-keyword">private</span> String id;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(String id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Table(&quot;song&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Song</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Common</span>&#123;<br>    <span class="hljs-keyword">private</span> String title;<br>    <span class="hljs-keyword">private</span> String icon;<br>    <span class="hljs-keyword">private</span> String uri;<br>    <span class="hljs-comment">//不存数据库的加ignore注解</span><br>    <span class="hljs-meta">@Ignore</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> clicksCount;<br>    <span class="hljs-meta">@Ignore</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> commentsCount;<br>    <span class="hljs-meta">@Ignore</span><br>    <span class="hljs-keyword">private</span> User user;<br>    <span class="hljs-meta">@Ignore</span><br>    <span class="hljs-keyword">private</span> User singer;<br><br>    <span class="hljs-comment">//播放后的值，总进度和当前进度</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> duration;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> progress;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 嵌套模型，拆分字段，方便后续查询和展示,比如，根据歌手昵称进行查询</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Column(&quot;single_id&quot;)</span><br>    <span class="hljs-keyword">private</span> String singerId;<br>    <span class="hljs-meta">@Column(&quot;singer_nickname&quot;)</span><br>    <span class="hljs-keyword">private</span> String singerNickname;<br>    <span class="hljs-meta">@Column(&quot;singer_icon&quot;)</span><br>    <span class="hljs-keyword">private</span> String singerIcon;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 转化字段user</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">localConvert</span><span class="hljs-params">()</span>&#123;<br>        User user=<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.setId(singerId);<br>        user.setNickname(singerNickname);<br>        user.setIcon(singerIcon);<br>        singer=user;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">convertLocal</span><span class="hljs-params">()</span>&#123;<br>        singerId=singer.getId();<br>        singerNickname=singer.getNickname();<br>        singerIcon=singer.getIcon();<br><br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
      <tag>音乐列表持久化配置</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>android-23.1-数据库框架使用方法</title>
    <link href="/2022/11/18/android-23.1-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <url>/2022/11/18/android-23.1-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="android-23-1-数据库框架使用方法"><a href="#android-23-1-数据库框架使用方法" class="headerlink" title="android-23.1-数据库框架使用方法"></a>android-23.1-数据库框架使用方法</h1><h2 id="创建数据库实例"><a href="#创建数据库实例" class="headerlink" title="创建数据库实例"></a>创建数据库实例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">LiteORMUtil</span><span class="hljs-params">(Context context)</span> &#123;<br>       <span class="hljs-built_in">this</span>.context=context;<br>       <span class="hljs-comment">//获取偏好设置工具类</span><br>       PreferenceUtil sp=PreferenceUtil.getInstance(context);<br>       <span class="hljs-comment">//创建数据库实例</span><br>       String databaseName=String.format(<span class="hljs-string">&quot;zhy_%s.db&quot;</span>,sp.getUserId());<br>       orm=LiteOrm.newSingleInstance(context,databaseName);<br>       <span class="hljs-comment">//设置调试模式</span><br>       orm.setDebugged(Config.DEBUG);<br>   &#125;<br></code></pre></td></tr></table></figure><h2 id="数据库的增删改查"><a href="#数据库的增删改查" class="headerlink" title="数据库的增删改查"></a>数据库的增删改查</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//region 搜索历史</span><br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 根据主键创建或更新历史</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> data</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">createOrUpdate</span><span class="hljs-params">(SearchHistory data)</span>&#123;<br>       orm.save(data);<br>   &#125;<br><br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 查询搜索历史，并按时间顺序倒序排序</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-keyword">public</span> List&lt;SearchHistory&gt; <span class="hljs-title function_">querySearchHistory</span><span class="hljs-params">()</span>&#123;<br>       QueryBuilder&lt;SearchHistory&gt; queryBuilder = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryBuilder</span>&lt;SearchHistory&gt;(SearchHistory.class)<br>               .appendOrderDescBy(<span class="hljs-string">&quot;createAt&quot;</span>);<br>       <span class="hljs-keyword">return</span> orm.query(queryBuilder);<br>   &#125;<br><br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 删除搜索历史</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> data</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteSearchHistory</span><span class="hljs-params">(SearchHistory data)</span>&#123;<br>       orm.delete(data);<br>   &#125;<br>   <span class="hljs-comment">//endregion</span><br></code></pre></td></tr></table></figure><h2 id="查看数据库数据，采用DB-Browser-for-SQLite"><a href="#查看数据库数据，采用DB-Browser-for-SQLite" class="headerlink" title="查看数据库数据，采用DB Browser for SQLite"></a>查看数据库数据，采用DB Browser for SQLite</h2><p><img src="/images/android-23.1-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/image-20221118104906681.png" alt="image-20221118104906681"></p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
      <tag>数据库框架Sqlite</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>android-24-实现持久化播放列表功能</title>
    <link href="/2022/11/18/android-24-%E5%AE%9E%E7%8E%B0%E6%8C%81%E4%B9%85%E5%8C%96%E6%92%AD%E6%94%BE%E5%88%97%E8%A1%A8%E5%8A%9F%E8%83%BD/"/>
    <url>/2022/11/18/android-24-%E5%AE%9E%E7%8E%B0%E6%8C%81%E4%B9%85%E5%8C%96%E6%92%AD%E6%94%BE%E5%88%97%E8%A1%A8%E5%8A%9F%E8%83%BD/</url>
    
    <content type="html"><![CDATA[<h1 id="android-24-实现持久化播放列表功能"><a href="#android-24-实现持久化播放列表功能" class="headerlink" title="android-24-实现持久化播放列表功能"></a>android-24-实现持久化播放列表功能</h1><p>通过将音乐播放列表持久化到SQLite数据库中实现持久化，并将用户id和上一次播放音乐的id进行保存（用户偏好设置）</p><p>并设置用户打开音乐列表时继续上一次的音乐</p><p>并修复暂停时拖拽音乐会自动播放bug</p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
      <tag>实现持久化播放列表功能</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OOAD月考复习</title>
    <link href="/2022/11/11/OOAD%E6%9C%88%E8%80%83%E5%A4%8D%E4%B9%A0/"/>
    <url>/2022/11/11/OOAD%E6%9C%88%E8%80%83%E5%A4%8D%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="GRASP：基于职责设计对象"><a href="#GRASP：基于职责设计对象" class="headerlink" title="GRASP：基于职责设计对象"></a>GRASP：基于职责设计对象</h1><h2 id="职责和职责驱动设计"><a href="#职责和职责驱动设计" class="headerlink" title="职责和职责驱动设计"></a>职责和职责驱动设计</h2><p>职责、角色和协作</p><ul><li><p><strong>行为职责（doing）</strong></p><ul><li>自身执行一些行为：创建对象或计算</li><li>初始化其他对象中的动作</li><li>控制和协调其他对象中的活动</li></ul></li><li><p><strong>认知职责（knowing）</strong></p><ul><li>对私有封装数据的认知</li><li>对相关对象的认知</li><li>对其能够导出或计算的事物的认知</li></ul></li></ul><p>职责并非与方法是同一种事物，职责是一种抽象，方法实现了职责</p>]]></content>
    
    
    <categories>
      
      <category>OOAD</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OOAD</tag>
      
      <tag>月考复习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hbase in action读书笔记</title>
    <link href="/2022/11/07/hbase%20in%20action%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/11/07/hbase%20in%20action%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 align="center">Hbase in action读书笔记</h1><h2 align="right">10205101530-赵晗瑜</h2><h2 id="Chapter-2-2-3-工作机制：HBase写路径"><a href="#Chapter-2-2-3-工作机制：HBase写路径" class="headerlink" title="Chapter 2.2.3 工作机制：HBase写路径"></a>Chapter 2.2.3 工作机制：HBase写路径</h2><ol><li><p><strong>在Hbase中增加新行&#x2F;修改已有的行时，内部流程是怎样的？</strong>:imp:</p><ul><li>Hbase接到命令</li><li>将写入动作记录在WAL(预写式日志 write-ahead log&#x2F;Hlog)和MemStore（内存里的写入缓冲区）</li><li>确认写入后，认为写动作完成</li></ul></li><li><p><strong>为什么要把把写入动作记录在这两个地方？</strong></p><ul><li>为了保证数据的持久化</li></ul></li><li><p><strong>什么是Hfile？</strong>:star:</p><ul><li>Hfile是Hbase使用的底层存储格式，对应于列族(一个列族可以有多个Hfile，但一个Hfile不能存储多个列族的数据)，当MemStore填满后，其中的数据会刷写到硬盘，生成一个Hfile</li></ul></li><li><p><strong>WAL的作用是什么？</strong>:star:</p><ul><li>Hbase是在写动作完成之前先写入WAL，而如果服务器宕机，没有从MemStore里写到Hfile的数据将可以通过<strong>回放WAL</strong>来恢复(Hbase内部机制中的恢复流程部分)</li></ul></li><li><p><strong>图示Hbase写路径原理</strong>:alien:</p><img src="/images/hbase%20in%20action%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20221106183638114.png" alt="image-20221106183638114" style="zoom:67%;" /></li><li><p><strong>为什么不建议禁用WAL？</strong></p><p>不写入WAL会在RegionServer故障时增加丢失数据的风险，关闭WAL，出现故障时Hbase可能无法恢复数据，没有刷写到硬盘的所有写入数据都会丢失。</p></li></ol><h2 id="Chapter-2-2-5-工作机制：Hbase读路径"><a href="#Chapter-2-2-5-工作机制：Hbase读路径" class="headerlink" title="Chapter 2.2.5 工作机制：Hbase读路径"></a>Chapter 2.2.5 工作机制：Hbase读路径</h2><p><img src="/images/hbase%20in%20action%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20221106184918063.png" alt="image-20221106184918063"></p><ol><li><strong>为什么要有BlockCache?</strong><ul><li>BlockCache设计用来保存从Hfile里读入内存的频繁访问的数据，避免频繁的硬盘读，每个列族都有自己的BlockCache(使用了:L LRU缓存技术)</li></ul></li><li><strong>Hfile的物理存放形式是什么？</strong><ul><li>Hfile物理存放形式是一个Block的序列外加这些Block的索引。这意味着，从Hbase里读取一个Block需要现在索引上查找一次该Block，然后从硬盘取出</li></ul></li><li><strong>什么时候用小一点的Block？</strong><ul><li>如果主要用于 <strong>随机查询</strong>，可能需要细粒度的索引。</li></ul></li><li><strong>什么时候用大一点的Block？</strong><ul><li>如果经常用于顺序扫描，一次读取多个Block，可能需要大一点儿的Block。Block变大意味着索引项变少，索引变小，因此节省内存</li></ul></li><li><strong>从Hbase读取一行的流程是怎样的？</strong>:imp:<ul><li><strong>首先检查MemStore等待修改的队列</strong></li><li><strong>然后检查BlockCache看包含该行的Block是否最近被访问过</strong></li><li><strong>最后访问硬盘上的Hfile</strong></li></ul></li><li><strong>note</strong><ul><li>Hfile存放某个时刻MemStore刷写的快照。一个完整的行的数据可能存放在多个Hfile里，为了读出完整行，Hbase可能需要读取包含该行信息的所有Hfile</li></ul></li></ol><h2 id="Chapter-4-2-反规范化（De-normalization）是Hbase世界里的词语"><a href="#Chapter-4-2-反规范化（De-normalization）是Hbase世界里的词语" class="headerlink" title="Chapter 4.2 反规范化（De-normalization）是Hbase世界里的词语"></a>Chapter 4.2 反规范化（De-normalization）是Hbase世界里的词语</h2><blockquote><p>规范化为写做优化，而反规范化为读做优化。—— <em>HBase In Action</em></p></blockquote><ul><li><p><strong>规范化：</strong></p><ul><li>优点：<ul><li>减少数据冗余，节约存储空间</li><li>加快了增、删、改的速度，不用担心更新时需要更新所有副本的复杂性</li></ul></li><li>缺点：<ul><li>查询需要使用JOIN连接，影响查询速度</li></ul></li></ul><p><strong>反规范化：</strong>增加冗余数据。</p><ul><li><p>优点：</p><ul><li>加快查询速度，避免开销很大的JOIN操作</li></ul></li><li><p>缺点：</p><ul><li>更新、增加数据更困难</li><li>数据存在冗余，需要更大的存储空间</li><li>数据不一致问题</li></ul></li></ul></li></ul><ol><li><p><strong>使用推贴为例，阐述反规范化处理</strong>？</p><p>在系统里为每个用户维护一个推贴流，一旦他们所关注的用户写了推贴，就把这个推贴加到自己的推贴流里。</p><p><strong>之前的操作：</strong>读取他们的关注用户列表，然后把列表中每个人的最新推贴集合起来形成自己的推贴流；</p><p><strong>后来的操作：</strong>有一个持续存在的来自于该用户推贴流的推贴列表。</p><p>这本质上是对表进行的表规范化处理</p></li><li><p><strong>规范化和反规范化的区别是什么？</strong></p><ul><li><p><strong>规范化</strong></p><ol><li>每种重复信息都会放进自己的一张表</li><li>好处：当发生更新或删除时，不用担心更新指定数据所有副本的的复杂性</li><li>通过保存单一副本而不是多个副本，减少了占用的存储空间</li><li>需要查询时，在SQL语句中使用JOIN子句重新联结这个数据</li></ol></li><li><p><strong>反规范化</strong></p><ol><li>数据是重复的，存在多个地方</li><li>不需要很大开销的JOIN操作，这使得查询数据变得更容易、更快</li></ol></li><li><p><strong>从性能角度来看，规范化和反规范化的区别是什么？</strong></p><p><img src="/images/hbase%20in%20action%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20221107185356949.png" alt="image-20221107185356949"></p><ol><li>规范化为 <strong>写</strong>优化</li><li>反规范化为 <strong>读</strong>优化</li><li>规范化为写操作时表进行优化，在读取时付出联结数据的开销</li><li>反规范化为读操作对表进行优化，但是在写入时付出多个副本的开销</li></ol></li></ul></li><li><p><strong>如何进行反规范化处理？</strong></p><ul><li>通过为推贴流给每个用户专门建立一张表的方式进行反规范化处理</li><li><strong>当一个用户登录进来，建立推贴流的流程如下：</strong><ol><li>获取这个用户的关注用户列表</li><li>获取每个被关注用户的推贴</li><li>集合这些推贴，按时间戳排序，最新的在最前面</li></ol></li><li>可以给users表增加一个列族来为每个用户维护一个推贴流</li><li><strong>推贴流的两种访问方式</strong><ol><li>当给定用户登录时读取推贴流，按建立时间戳倒序显示给用户</li><li>当用户关注的任何用户写了一条推贴流时，把这条推贴加到自己的推贴列表里</li></ol></li></ul></li></ol><h2 id="Chapter-4-5-IO考虑"><a href="#Chapter-4-5-IO考虑" class="headerlink" title="Chapter 4.5 IO考虑"></a>Chapter 4.5 IO考虑</h2><p>每个 RegionServer 包含多个 Region，而每个 Region 又对应多个 Store（多个列族）。每一个 Store 对应表中一个列族的存储，且每个 Store 由一个 MemStore 和多个 HFile 文件组成。</p><p>:shallow_pan_of_food:<strong>行键：</strong></p><ul><li>行键决定了访问HBase表时可以得到的性能，因为：<ul><li>region基于行键为区间内的行提供服务</li><li>HFile在硬盘里存储<strong>有序的行</strong></li><li>仔细的设计行键能够很好的改善性能，因为行按照行键排序</li></ul></li></ul><h2 id="Chapter-4-6-从关系型到非关系型"><a href="#Chapter-4-6-从关系型到非关系型" class="headerlink" title="Chapter 4.6 从关系型到非关系型"></a>Chapter 4.6 从关系型到非关系型</h2><p>:star:<strong>从关系型数据库映射到Hbase没有捷径，它们是不同的思考方式:star2:</strong></p><ol><li><p><strong>:deciduous_tree:实体：映射到表（table）</strong></p><ul><li>表映射到表，在关系型数据库和Hbase中，实体的容器（container）是表，表中每行代表实体的一个实例</li></ul></li><li><p>:deciduous_tree:<strong>属性：映射到列（column）</strong></p><ol><li><strong>:heart_decoration:识别属性（identifying attribute）</strong><ul><li>唯一精确识别出实体的一个实例（一行）</li><li>在关系表中，构成primary key</li><li>在Hbase中，称为rowkey的一部分</li><li>复合键（compound keys）：一个实体是由多个属性识别出来的<ol><li>关系型：复合键</li><li>非关系型：使用多个属性，把它们作为行键的一部分</li></ol></li></ul></li><li>:heart_decoration:<strong>非识别属性（non-identifying attribute）</strong><ul><li>在Hbase中非识别属性基本映射到 <strong>列限定符</strong></li><li>这些属性不需要唯一性保证</li></ul></li></ol></li><li><p><strong>:deciduous_tree:联系：映射到外键（foreign key）</strong></p><ul><li><p>逻辑关系模型使用两种主要联系：</p><ol><li>一对多：在关系型数据库中，建模为 <strong>foreign</strong> <strong>key</strong></li><li>多对多：在关系型数据库中，建模为 <strong>junction table</strong></li></ol></li><li><p>在Hbase中，通常归结为 <strong>数据反规范化处理</strong>，没有内建的联结（join）或约束（constrain），几乎不使用显示联系</p></li><li><p>在Hbase中如何实现不同数据记录之间的联结？</p><p>​ Hbase通过 <strong>隐式联系</strong>实现不同数据记录之间的联结：**:star:需要在系统外部写代码，先遍历所有被关注用户，然后对每个用户分别执行Hbase查表操作来找到它们的最新推贴**:star:</p></li><li><p>在SQL中如何实现不同数据记录之间的联结？</p><p><img src="/images/hbase%20in%20action%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20221106204800786.png" alt="image-20221106204800786"></p></li></ul></li><li><p><strong>:satisfied:嵌套实体</strong></p><img src="/images/hbase%20in%20action%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20221106205351197.png" alt="image-20221106205351197" style="zoom:67%;" /><img src="/images/hbase%20in%20action%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20221106210702782.png" alt="image-20221106210702782" style="zoom:67%;" /><ul><li><p><strong>什么是嵌套实体的能力？</strong></p><p>follows表的早期版本中每个用户有一行，每个被关注对象有一列（先是用整数计数器作为列限定符，然后是被关注用户的名字作为列限定符）</p><p>这代表了在一个父实体或主实体的行里嵌套另一个实体的能力</p></li><li><p><strong>嵌套的实体是从关系型映射到非关系型的又一个工具</strong></p><p>如果表是以父子，主从或其他严格的一对多联系存在，在Hbase中可以用一个单行来建模</p><ol><li>行键相当于父实体</li><li>嵌套的值将包含子实体，每个子实体得到一个包含识别属性的列限定符，以及包含其他非识别属性的值</li><li>子实体的记录存储为单个列</li></ol></li><li><p><strong>嵌套实体的局限性</strong></p><ol><li><strong>只能嵌套一层</strong>：但仍然可以在一个父实体下有多个不同的嵌套子实体，用识别属性作为列限定符</li><li><strong>效率问题</strong>:与访问另一张表的一行相比，在一行里访问在嵌套列限定符下存储的单个值效率不高</li></ol></li><li><p><strong>什么时候可以用嵌套子实体？</strong></p><ol><li>:upside_down_face: 如果得到子实体的唯一办法是通过父实体，并且希望在一个父实体的所有子实体上有事物级保护，这种技术是正确的选择</li></ol></li></ul></li><li><p>:pensive: <strong>没有被映射到的一些东西</strong></p><ul><li><p><strong>列族</strong>:dart:</p><p><strong>将列族理解为建模了一对一联系</strong></p><ol><li><p>在SQL中：</p><p>建模两张不同的物理表（SQL语句几乎总是命中这张或那张表，很少同时访问两张表，分成两张表性能更好）</p></li><li><p>:shamrock: 在Hbase中：</p><p>在一张表中使用两个列族正好合适</p></li></ol></li><li><p><strong>索引</strong>:dart:</p><p><strong>该怎么处理索引？</strong></p><ol><li><p><strong>在SQL中：</strong></p><p>很容易声明索引并且由数据库引擎自动维护</p></li><li><p><strong>在Hbase中：</strong></p><p>:shamrock: 没有索引，通过反规范化处理数据和写入多张表来或者这个特性等近似方法</p></li></ol></li><li><p><strong>时间版本</strong>:dart:</p><p><strong>关系数据库和非关系数据库之间在时间维度上有什么不同？</strong></p><ol><li><p><strong>在SQL中：</strong></p><p>把时间戳显式存储在某个地方；</p><p>时间戳的数据类型只有long；</p><p>在一种叫做 <strong>历史表</strong>的关系型模式里，通常使用和主表相同的主键外加一个时间戳，来保存基于时间的行的副本</p></li><li><p>:shamrock:<strong>在Hbase中：</strong></p><p>在Hbase单元中使用时间戳；</p><p>时间戳的数据类型不仅仅是64位的long；</p><p>用一个Hbase实体，只需在列族元数据里设定合理保存的时间版本数量即可；</p><p>在Hbase中，时间是一个维度</p></li></ol></li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>非关系数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>非关系数据库</tag>
      
      <tag>HBase</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据库系统概念查询处理题目</title>
    <link href="/2022/09/28/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E6%9F%A5%E8%AF%A2%E5%A4%84%E7%90%86%E9%A2%98%E7%9B%AE/"/>
    <url>/2022/09/28/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E6%9F%A5%E8%AF%A2%E5%A4%84%E7%90%86%E9%A2%98%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h1><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E6%9F%A5%E8%AF%A2%E5%A4%84%E7%90%86%E9%A2%98%E7%9B%AE/image-20220823140843960.png" alt="image-20220823140843960"></p><h1 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h1><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E6%9F%A5%E8%AF%A2%E5%A4%84%E7%90%86%E9%A2%98%E7%9B%AE/image-20220823141740379.png" alt="image-20220823141740379"></p><h1 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h1><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E6%9F%A5%E8%AF%A2%E5%A4%84%E7%90%86%E9%A2%98%E7%9B%AE/image-20220823143055232.png" alt="image-20220823143055232"></p><h1 id="4"><a href="#4" class="headerlink" title="4."></a>4.</h1><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E6%9F%A5%E8%AF%A2%E5%A4%84%E7%90%86%E9%A2%98%E7%9B%AE/image-20220823144352270.png" alt="image-20220823144352270"></p>]]></content>
    
    
    <categories>
      
      <category>数据库系统概念</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>数据库系统概念</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>并行程序设计期末复习</title>
    <link href="/2022/08/27/%E5%B9%B6%E8%A1%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/"/>
    <url>/2022/08/27/%E5%B9%B6%E8%A1%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="1-数据并行和任务并行"><a href="#1-数据并行和任务并行" class="headerlink" title="1.数据并行和任务并行"></a>1.数据并行和任务并行</h1><p><strong>任务必行</strong>是指将待解决问题所需要执行的<strong>各个任务</strong>分配到各个核上执行。</p><p><strong>（如果一个程序是通过将任务划分，分配给<u>各个进程或线程</u>实现并行，则它是任务并行；）</strong></p><p><strong>数据并行</strong>是指将待解决问题所需要处理的数据分配给各个核，每个核在分配到的数据集上执行大致相似的操作</p><p><strong>（通过将数据分配给<u>多个处理器</u>，然后让各个处理器执行相同的指令来操作数据子集实现并行化，这种并行称为数据并行。</strong>）</p><p>SPMD（单程序多数据流）既可以实现任务并行，也可以实现数据并行。</p><h1 id="2-负载均衡"><a href="#2-负载均衡" class="headerlink" title="2.负载均衡"></a>2.负载均衡</h1><p>需要在<strong>进程&#x2F;线程之间</strong>平均分配任务从而满足每个进程&#x2F;线程获得大致相等的工作量，这称为负载均衡</p><p>负载不均衡是指系统中<strong>某些处理器空闲而某些处理器有大量待处理任务</strong></p><p>每个<strong>核</strong>大致分配<strong>相同数目的数据</strong>进行计算</p><h1 id="3-并行、分布式、并发"><a href="#3-并行、分布式、并发" class="headerlink" title="3.并行、分布式、并发"></a>3.并行、分布式、并发</h1><ul><li>并发：一个程序的<strong>多个任务可以在一个时间段内同时执行</strong>（一个程序的多个任务）</li><li>分布式：一个程序需要与<strong>其他程序</strong>协作来解决某个问题（多个程序）</li><li>并行：一个程序通过<strong>多个任务紧密协作</strong>来解决某个问题（一个程序的多个任务）</li></ul><h1 id="4-MPI、OpenMP和Pthreads的区别"><a href="#4-MPI、OpenMP和Pthreads的区别" class="headerlink" title="4.  MPI、OpenMP和Pthreads的区别"></a>4.  MPI、OpenMP和Pthreads的区别</h1><ul><li>MPI和Pthreads是<strong>C语言的扩展库</strong>，可以在C程序中使用<strong>扩展的类型定义、函数和宏</strong>；OpenMP包含了一个<strong>扩展库</strong>以及<strong>对C编译器的部分修改。</strong></li><li>Pthreads和OpenMP是为共享内存系统的编程而设计的，它们提供访问共享内存的机制；MPI是为分布式内存系统的编程而设计的，它提供发送消息的机制。</li><li><strong>OpenMP对C语言有更高层次的扩展</strong>。</li><li>Pthreads提供了一些在OpenMP中不可用的协调构造。<strong>OpenMP更容易将程序并行化</strong>，<strong>而Pthreads提供的一些构造使得它并行化其他一些程序的能力更强。</strong></li><li>尽管openmp和pthreads都是针对共享内存变成的API，但他们有许多本质的不同，pthreads要求程序员显式地明确每个线程的行为。相反，openmp有时允许程序员只需要简单地声明一块代码应该并行执行，而由编译器和运行时系统来决定哪个线程具体执行哪个任务</li><li>pthreads（和MPI一样）是一个能够被链接到C程序的函数库，因此只要系统有pthreads库，pthreads程序就能够任意C编译器使用。相反，openmp要求编译器支持某些操作，所以完全有可能你使用的编译器无法把openmp程序编译成并行程序。</li><li>pthreads更底层，并且提供了虚拟地编写任何可知线程行为地能力。然而，这个功能有一定的代价：<strong>每个线程行为的每一个细节都得由我们自己来定义</strong>。相反，openmp允许编译器和运行时系统来决定线程行为的一些细节。因此使用openmp来编写一些并行行为更容易。但代价是<strong>很难对一些底层的线程交互进行编程。</strong></li></ul><h1 id="5-冯诺依曼架构-哈佛结构"><a href="#5-冯诺依曼架构-哈佛结构" class="headerlink" title="5.冯诺依曼架构         哈佛结构"></a>5.冯诺依曼架构         哈佛结构</h1><p><u>哈佛结构</u>是一种将<strong>程序指令</strong>储存和<strong>数据储存</strong>分开的存储器结构。</p><p><u>冯·诺伊曼结构</u>是一种将<strong>程序指令存储器</strong>和<strong>数据存储器合并在一起</strong>的电脑设计概念结构。</p><p>经典的冯诺依曼结构包括主存，中央处理单元处理器或核以及主存和CPU之间的互联结构。主存中由许多区域，每个区域都可以存储指令和数据。每个区域都有一个地址，可以通过这个地址来访问相应的区域及区域中存储的数据和指令。</p><h1 id="6-进程和线程"><a href="#6-进程和线程" class="headerlink" title="6.进程和线程"></a>6.进程和线程</h1><p>线程间的切换比进程间的切换更快。线程相对于进程而言是“<strong>轻量级</strong>”的。线程包含在进程中，所以线程可以使用<strong>相同的可执行代码</strong>，共享<strong>相同的内存</strong>和<strong>相同的I&#x2F;O设备</strong>。线程各自需要一个私有的<strong>程序计数器和函数调用栈</strong></p><h1 id="7-一个进程为什么要有fork和join"><a href="#7-一个进程为什么要有fork和join" class="headerlink" title="7.一个进程为什么要有fork和join"></a>7.一个进程为什么要有fork和join</h1><p>Fork&#x2F;Join它可以将一个大任务拆分成多个子任务进行并行处理，最后将子任务结果合并成最后的计算结果，并输出。Fork&#x2F;Join 框架要完成两件事情：</p><ul><li>Fork：把一个复杂任务进行拆分，大事化小。</li><li>Join：把拆分的结果进行合并。</li></ul><p>为了实现并行，通过fork函数利用主线程派生出多个线程，以将数据或任务并行地执行在各个线程上，通过join将主从线程合并，合并成最后的计算结果。</p><h1 id="8-为什么要用缓存-缓存有哪些替换策略"><a href="#8-为什么要用缓存-缓存有哪些替换策略" class="headerlink" title="8.为什么要用缓存 缓存有哪些替换策略"></a>8.为什么要用缓存 缓存有哪些替换策略</h1><p>主存与CPU之间的分离称为冯诺依曼瓶颈，而缓存是解决冯诺依曼瓶颈而最广泛使用的方法之一。CPU cache是一组相对于主存，CPU能更快速地访问的内存区域</p><p>缓存的访问时间比其他存储区域的访问时间短。</p><p>基于局部性原理，程序接下来可能会用到的指令和数据与最近访问过的指令和数据在物理上是邻近存放的。</p><p>为了利用局部性原理，系统采用更宽的互联结构来访问数据和指令。也就是：一次内存访问能存取一整块代码和数据，而不只是单条指令和单条数据。这些块称为高速缓存块或高速缓存行</p><p>在访问完一个内存区域后，程序会在不久的将来（时间局部性）访问邻近的区域（空间局部性）</p><ol><li>最不经常使用（LFU）算法</li><li>近期最少使用（LRU）算法</li><li>随机替换</li><li>自适应缓存替换（ARC）算法</li><li>最近最常使用算法（MRU）</li></ol><h1 id="9-什么叫-Cache命中和Cache缺失"><a href="#9-什么叫-Cache命中和Cache缺失" class="headerlink" title="9.什么叫 Cache命中和Cache缺失"></a>9.什么叫 Cache命中和Cache缺失</h1><p>当向cache查询信息时，如果cache中有信息，则称为cache命中或命中；如果信息不存在，则称cache缺失或缺失</p><h1 id="10-缓存的三个种类"><a href="#10-缓存的三个种类" class="headerlink" title="10.缓存的三个种类"></a>10.缓存的三个种类</h1><ul><li>直接映射：每个高速缓存行在Cache中仅有唯一的位置</li><li>全相连：每个高速缓存行能够放置在Cache中的任意位置</li><li>n路组相连：每个高速缓存行都能放置到Cache中n个不同区域位置中的一个4</li></ul><h1 id="11-什么叫虚拟内存"><a href="#11-什么叫虚拟内存" class="headerlink" title="11. 什么叫虚拟内存"></a>11. 什么叫虚拟内存</h1><p>虚拟内存是计算机系统内存管理的一种技术。它使得应用程序认为它拥有连续的可用的内存（一个连续完整的地址空间），而实际上，它通常是被分隔成多个物理内存碎片，还有部分暂时存储在外部磁盘存储器上，在需要时进行数据交换。在主存中存放当前执行程序所需要用到的部分，来利用时间和空间局部性；那些暂时用不到的部分存储在辅存的快中，称为交换空间</p><p>利用虚拟内存，使得主存可以作为辅存的缓存。它通过<strong>在主存中存放当前执行程序所需要用到的部分，来利用时间和空间局部性</strong>；那些<strong>暂时用不到的部分存储在辅存的块中，称为交换空间</strong>。与CPU cache类似，虚拟存储其也是对数据块和指令块进行操作，这些块通常称为页。因为访问辅存比访问内存要慢几十万倍，所以页通常比较大。</p><p>虚拟存储技术的基本思想是利用大容量外存来扩充内存，产生一个比有限的实际内存空间大得多的、逻辑的虚拟空间，简称虚存，以便能够有效地支持多道程序系统的实现和大型程序运行的需要，从而增强系统的处理能力。</p><h1 id="12-为什么要有虚拟内存"><a href="#12-为什么要有虚拟内存" class="headerlink" title="12.为什么要有虚拟内存"></a>12.为什么要有虚拟内存</h1><p>电脑中所运行的程序均需经由内存执行，若执行的程序占用内存很大或很多，则会导致内存消耗殆尽。</p><p>如果运行一个大型的程序，或者程序需要访问大型数据集，那么所有的指令或者数据可能在主存中放不下。这种情况在操作系统中时常发生。为了在程序间切换并且造成一种多个程序能同时运行的错觉，下一个时间片运行所需的指令和数据必须在内存中</p><h1 id="13-什么是页表"><a href="#13-什么是页表" class="headerlink" title="13.什么是页表"></a>13.什么是页表</h1><p>页表是一种特殊的数据结构，存放着虚拟地址和物理地址的对应关系</p><h1 id="14-什么叫页面失效（page-fault）"><a href="#14-什么叫页面失效（page-fault）" class="headerlink" title="14.什么叫页面失效（page fault）"></a>14.什么叫页面失效（page fault）</h1><p>想要访问的页不在内存中，即页表中该页没有合法的物理地址，该页只存储在磁盘上，那么这次访问称为页面失效。</p><p>当查询的地址和虚拟页号在TLB中，称为TLB命中；如果不在TLB中，称为TLB缺失。</p><h1 id="15-什么是TLB"><a href="#15-什么是TLB" class="headerlink" title="15.什么是TLB"></a>15.什么是TLB</h1><p>处理器有一种专门用于地址转换的缓存，来解决“<strong>使用页表会增加程序总体的运行时间</strong>”问题，它叫做<strong>转译后备缓冲区</strong>（Translation-Lookaside Buffer， TLB），即快表。</p><h1 id="16-什么叫SMT"><a href="#16-什么叫SMT" class="headerlink" title="16.什么叫SMT"></a>16.什么叫SMT</h1><p>同步多线程是<strong>细粒度</strong>多线程的变种。<strong>它通过允许多个线程同时使用多个功能单元来利用超标量处理器的性能</strong>。如果我们指定”优先“线程，那么能够在一定程度上减轻线程减速的问题。优先线程是指有多条指令就绪的线程。</p><p>TLP（Thread-Level Parallelism）线程级并行：<strong>尝试通过执行不同线程来提供并行性。</strong>与ILP相比，TLP提供的是粗粒度的并行性，即同时执行的程序基本单元（线程）比细粒度的程序单元（指令）更大或更粗。</p><h1 id="17-硬件多线程"><a href="#17-硬件多线程" class="headerlink" title="17.硬件多线程"></a>17.硬件多线程</h1><p>当前执行的任务被阻塞时，系统能够继续其他有用的工作。为了使这种机制有效，系统必须支持线程间的快速切换。</p><h1 id="18-Flynn分类-SISD-SIMD-MIMD-之间的区别"><a href="#18-Flynn分类-SISD-SIMD-MIMD-之间的区别" class="headerlink" title="18.Flynn分类 SISD SIMD MIMD 之间的区别"></a>18.Flynn分类 SISD SIMD MIMD 之间的区别</h1><ul><li>SISD：冯诺依曼系统，一次执行一条指令，一次存取一个数据项</li><li>SIMD：对多个数据执行相同的指令从而实现在多个数据流上的操作，向量处理器和GPU，SIMD系统适合于对处理大型数组的简单循环实行并行化。通过将数据分配给多个处理器，然后让各个处理器使用相同的指令来操作数据子集实现并行化，这种并行称为数据并行。</li><li>MIMD：支持同时<strong>多个指令流在多个数据流</strong>上操作，通常是<strong>异步</strong>的，分为两种类型—<strong>共享内存系统</strong>和<strong>分布式内存系统。</strong></li></ul><h1 id="19-什么叫-共享内存系统和分布式内存系统"><a href="#19-什么叫-共享内存系统和分布式内存系统" class="headerlink" title="19. 什么叫 共享内存系统和分布式内存系统"></a>19. 什么叫 共享内存系统和分布式内存系统</h1><p>共享内存系统，一组自治的处理器通过互连网络与内存系统相互连接，<strong>每个处理器能够访问每个内存区域。处理器通过访问共享的数据结构来隐式地通信。</strong></p><p>分布式内存系统，<strong>每个处理器有自己私有的内存空间</strong>，处理器-内存对之间通过互连网络相互通信。处理器之间通过发送消息或者使用特殊的函数来访问其他处理器的内存，这是一种显式的通信。</p><h1 id="20-什么叫缓存一致性-监听缓存一致性协议和基于目录的缓存一致性协议"><a href="#20-什么叫缓存一致性-监听缓存一致性协议和基于目录的缓存一致性协议" class="headerlink" title="20.什么叫缓存一致性 监听缓存一致性协议和基于目录的缓存一致性协议"></a>20.什么叫缓存一致性 监听缓存一致性协议和基于目录的缓存一致性协议</h1><ul><li><strong>缓存一致性</strong>：相同变量可以存储在两个不同核的缓存中。如果一个核更新了变量值，另一个核却不知道该变量已经被改变了。单核处理系统的cache对如下情况没有提供保证：在多核系统中，各个核的cache存储相同变量的副本，当一个处理器更新cache中该变量的副本时，其他处理器应该知道该变量已经更新，<strong>即其他处理器中cache的副本也应该更新</strong>，这称为cache一致性问题</li><li><strong>监听缓存一致性协议</strong>：当多个核共享总线时，总线上传递的信号都能被连接到总线的所有核看到。因此，当核0更新它cache中x的副本时，如果它也将这个更新信息在总线上广播，并且假如核1正在监听总线，那么它会知道x已经更新了，并将自己cache中x的副本标记为非法的。这就是监听cache一致性协议大致的工作原理</li><li><strong>基于目录的cache一致性协议：</strong>基于目录的cache一致性协议通过使用一个叫做目录的数据结构解决在大型网络上广播昂贵的问题。目录存储每个内存行的状态。一般的，这个数据结构是分布式的，每个核&#x2F;内存对负责存储一部分的目录。<strong>这部分目录标识局部内存对应高速缓存行的状态</strong>。因此，当一个高速缓存行被读入时，如核0的cache，与这个高速缓存行相对应的目录项就会更新，标识核0有这个行的副本。当一个变量需要更新时，就会查询目录，<strong>并将所有包含该变量高速缓存行置为非法</strong>。显然目录需要大量额外的存储空间</li></ul><h1 id="21-什么叫伪共享-它和共享的区别"><a href="#21-什么叫伪共享-它和共享的区别" class="headerlink" title="21.什么叫伪共享 它和共享的区别"></a>21.什么叫伪共享 它和共享的区别</h1><p>CPU的缓存是以缓存行(cache line)为单位进行缓存的，当多个线程修改不同变量，而这些变量<strong>又处于同一个缓存行时</strong>就会影响彼此的<strong>性能</strong>。例如：线程1和线程2共享一个缓存行，线程1只读取缓存行中的变量1，线程2修改缓存行中的变量2，虽然线程1和线程2操作的是不同的变量，由于变量1和变量2同处于一个缓存行中，当变量2被修改后，缓存行失效<strong>，线程1要重新从主存中读取，因此导致缓存失效</strong>，从而产生<strong>性能</strong>问题</p><p>可以通过在线程或进程中临时存储数据，再把临时存储的数据更新到共享存储来降低伪共享带来的影响。</p><p>False sharing可以避免，但是true sharing不可避免</p><h1 id="22-什么叫-动态线程和静态线程"><a href="#22-什么叫-动态线程和静态线程" class="headerlink" title="22. 什么叫 动态线程和静态线程"></a>22. 什么叫 动态线程和静态线程</h1><p>动态线程在<strong>有工作请求到达</strong>的时候会派生出一个工作线程来<strong>执行该请求</strong>。当工作线程完成任务，就会终止执行再合并到主线程中。这种模式充分利用了系统的资源，因为线程需要的资源只在线程实际运行时使用。在许多情况下，共享内存程序使用的是动态线程。</p><p>静态线程则是<strong>直接派生出所有的线程</strong>，<strong>并在所有的线程合并到主线程后</strong>，<strong>主线程需要做一些清理工作</strong>。它更加接近于分布式内存编程中最广泛使用的模式。既然静态线程范式适用于一种系统，也适用于另一种系统，因此，我们会经常使用静态线程范式</p><h1 id="23-什么叫-非确定性"><a href="#23-什么叫-非确定性" class="headerlink" title="23.什么叫 非确定性"></a>23.什么叫 非确定性</h1><p>给定的输入能产生不同的输出。</p><h1 id="24-什么叫-线程安全性"><a href="#24-什么叫-线程安全性" class="headerlink" title="24.什么叫 线程安全性"></a>24.什么叫 线程安全性</h1><p><strong>如果一个代码块能够被多个线程同时执行而不引起问题，那么它是线程安全的</strong>。当一段代码不是线程安全的，通常是因为不同的线程在访问共享的数据</p><h1 id="25-设计多线程和多进程的时候-输入和输出要考虑什么"><a href="#25-设计多线程和多进程的时候-输入和输出要考虑什么" class="headerlink" title="25.设计多线程和多进程的时候 输入和输出要考虑什么"></a>25.设计多线程和多进程的时候 输入和输出要考虑什么</h1><ul><li>在分布式内存系统中，只有<strong>进程0</strong>能够访问stdin。在共享内存系统中，只有<strong>主线程或线程0</strong>能够访问stdin</li><li>在分布式内存和共享内存系统中，<strong>所有进程&#x2F;线程</strong>都能够访问stdout和stderr</li><li>但是，因为输出到stdout的非确定性顺序，大多数情况下，只有一个进程&#x2F;线程会及格过输出到stdout。但输出调试结果是个例外，在这种情况下，<strong>允许多个进程&#x2F;线程写stdout</strong></li><li>只有一个进程&#x2F;线程会尝试访问一个除了stdin，stdout，stderr外的文件。所以，例如，每个进程&#x2F;线程能够打开自己私有的文件进行读，写，<strong>但是没有两个进程&#x2F;线程能够打开相同的文件</strong></li><li>调试程序输出在生成输出结果时，应该包括<strong>进程&#x2F;线程的序号或进程标识符。</strong></li></ul><h1 id="26-什么叫-加速比和效率-物理含义是什么"><a href="#26-什么叫-加速比和效率-物理含义是什么" class="headerlink" title="26.什么叫 加速比和效率 物理含义是什么"></a>26.什么叫 加速比和效率 物理含义是什么</h1><p><img src="/images/%E5%B9%B6%E8%A1%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20220825121250120.png" alt="image-20220825121250120"></p><p><img src="/images/%E5%B9%B6%E8%A1%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20220825121341558-16614008224171.png" alt="image-20220825121341558"></p><h1 id="27-什么叫-阿姆达尔定律"><a href="#27-什么叫-阿姆达尔定律" class="headerlink" title="27. 什么叫 阿姆达尔定律"></a>27. 什么叫 阿姆达尔定律</h1><p>除非一个串行程序的执行几乎全部都并行化，否则，不论有多少可以利用的<strong>核</strong>，通过并行化所产生的加速比都会是受限的。</p><p><img src="/images/%E5%B9%B6%E8%A1%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20220825122119160.png" alt="image-20220825122119160"></p><h1 id="28-什么叫-可扩展性-强可扩展性和弱可扩展性"><a href="#28-什么叫-可扩展性-强可扩展性和弱可扩展性" class="headerlink" title="28.什么叫 可扩展性 强可扩展性和弱可扩展性"></a>28.什么叫 可扩展性 强可扩展性和弱可扩展性</h1><p><strong>增加一个程序的进程&#x2F;线程数</strong>，如果在<strong>输入规模也以相应增长率增加的情况</strong>下，该程序的<strong>效率值一直都是E</strong>，那么这个程序就是可扩展的。</p><p>强可扩展，在<strong>增加进程&#x2F;线程的个数</strong>时，可以<strong>维持固定的效率</strong>，却<strong>不增加问题的规模。</strong></p><p>弱可扩展，在<strong>增加进程&#x2F;线程个数</strong>的同时，只有<strong>以相同倍率增加问题的规模</strong>才能使<strong>效率值</strong>保持不变。</p><h1 id="29-什么叫-通信子-为什么要有通信子"><a href="#29-什么叫-通信子-为什么要有通信子" class="headerlink" title="29.什么叫 通信子 为什么要有通信子"></a>29.什么叫 通信子 为什么要有通信子</h1><p>通信子是指一组可以互相发送消息的进程集合。</p><p><img src="/images/%E5%B9%B6%E8%A1%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20220825122939021.png" alt="image-20220825122939021"></p><h1 id="30-什么叫-集合通信"><a href="#30-什么叫-集合通信" class="headerlink" title="30.什么叫 集合通信"></a>30.什么叫 集合通信</h1><p>涉及通信子中所有进程的通信函数称为集合通信</p><h1 id="31-MPI-Send和MPI-Recv有什么样的优点和缺点"><a href="#31-MPI-Send和MPI-Recv有什么样的优点和缺点" class="headerlink" title="31. MPI_Send和MPI_Recv有什么样的优点和缺点"></a>31. MPI_Send和MPI_Recv有什么样的优点和缺点</h1><p>MPI_Recv的语义会导致MPI编程中的一个潜在陷阱：如果一个进程试图接受消息，但没有相匹配的消息，那么该进程将会永远阻塞在那里，即进程悬挂。如果标签不匹配，或者目标进程的进程号与源进程的进程号不相同，那么接受与发送就无法匹配了，这会导致一个进程悬挂起来，或者可能更严重的，接收端可能会匹配另一个发送端。</p><p>如果调用MPI_Send发生了阻塞，并且没有相匹配的接收，那么发送进程就悬挂起来。另一方面，如果MPI_Send被缓冲，但没有相匹配的接收，那么消息将丢失。</p><p><img src="/images/%E5%B9%B6%E8%A1%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20220825125041137-16614030414973.png" alt="image-20220825125041137"></p><h1 id="32-MPI-Send中type的作用"><a href="#32-MPI-Send中type的作用" class="headerlink" title="32.MPI_Send中type的作用"></a>32.MPI_Send中type的作用</h1><p>因为C语言中的类型不能作为参数传递给函数，所以MPI定义了一个特殊的类型：MPI_Datatype，用于msg_type</p><p><img src="/images/%E5%B9%B6%E8%A1%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20220825125226414.png" alt="image-20220825125226414"></p><h1 id="33-什么叫-MPI派生数据类型-为什么要用派生数据类型"><a href="#33-什么叫-MPI派生数据类型-为什么要用派生数据类型" class="headerlink" title="33.什么叫 MPI派生数据类型 为什么要用派生数据类型"></a>33.什么叫 MPI派生数据类型 为什么要用派生数据类型</h1><p>在几乎所有的分布式系统中，通信比本地计算开销大很多。用多条消息发送一定数量的数据，明显比只用一条消息发送等量数据耗时</p><p>MPI提供了三个基本手段来整合可能需要多条消息的数据：不同通信函数中的count参数，派生数据类型，以及MPI_Pack和MPI_Unpack函数</p><p>派生数据类型可以表示内存中数据项的任意集合。如果发送数据的函数知道数据项的类型以及在内存中数据项集合的相对位置，就可以在数据项被发送出去之前在内存中将数据项聚集起来。接收数据的函数可以在数据项被接收后将数据项分发到它们在内存中正确的目标地址上。</p><p><img src="/images/%E5%B9%B6%E8%A1%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20220825125855221.png" alt="image-20220825125855221"></p><p><img src="/images/%E5%B9%B6%E8%A1%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20220825125907240.png" alt="image-20220825125907240"></p><h1 id="34"><a href="#34" class="headerlink" title="34."></a>34.</h1><p><img src="/images/%E5%B9%B6%E8%A1%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20220825130248103.png" alt="image-20220825130248103"></p><h1 id="35"><a href="#35" class="headerlink" title="35."></a>35.</h1><p><img src="/images/%E5%B9%B6%E8%A1%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20220825131642001.png" alt="image-20220825131642001"></p><h1 id="36"><a href="#36" class="headerlink" title="36."></a>36.</h1><p><img src="/images/%E5%B9%B6%E8%A1%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20220825132326045.png" alt="image-20220825132326045"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs C"><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Read_vector</span><span class="hljs-params">(<span class="hljs-type">char</span> prompt[], <span class="hljs-type">double</span> vect[], <span class="hljs-type">int</span> n)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">Print_vector</span><span class="hljs-params">(<span class="hljs-type">char</span> title[], <span class="hljs-type">double</span> vect[], <span class="hljs-type">int</span> n)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">Compute_prefix_sums</span><span class="hljs-params">(<span class="hljs-type">double</span> vect[], <span class="hljs-type">double</span> prefix_sums[], <span class="hljs-type">int</span> n)</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span> &#123;<br>   <span class="hljs-type">double</span> *vect, *prefix_sums;<br>   <span class="hljs-type">int</span> n;<br><br>   <span class="hljs-keyword">if</span> (argc != <span class="hljs-number">2</span>) &#123;<br>      <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;usage:  %s &lt;order of vector&gt;\n&quot;</span>, argv[<span class="hljs-number">0</span>]);<br>      <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>   &#125;<br>   n = strtol(argv[<span class="hljs-number">1</span>], <span class="hljs-literal">NULL</span>, <span class="hljs-number">10</span>);<br>   vect = <span class="hljs-built_in">malloc</span>(n*<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">double</span>));<br>   prefix_sums = <span class="hljs-built_in">malloc</span>(n*<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">double</span>));<br><br>   Read_vector(<span class="hljs-string">&quot;Enter the vector&quot;</span>, vect, n);<br>   Print_vector(<span class="hljs-string">&quot;Input vector&quot;</span>, vect, n);<br>   Compute_prefix_sums(vect, prefix_sums, n);<br>   Print_vector(<span class="hljs-string">&quot;Prefix sums&quot;</span>, prefix_sums, n);<br><br>   <span class="hljs-built_in">free</span>(vect);<br>   <span class="hljs-built_in">free</span>(prefix_sums);<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;  <span class="hljs-comment">/* main */</span><br><br><span class="hljs-comment">/*-------------------------------------------------------------------*/</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">Read_vector</span><span class="hljs-params">(<span class="hljs-type">char</span> prompt[], <span class="hljs-type">double</span> vect[], <span class="hljs-type">int</span> n)</span> &#123;<br>   <span class="hljs-type">int</span> i;<br><br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, prompt);<br>   <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>      <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lf&quot;</span>, &amp;vect[i]);<br>&#125;  <span class="hljs-comment">/* Read_vector */</span><br><br><span class="hljs-comment">/*-------------------------------------------------------------------*/</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">Print_vector</span><span class="hljs-params">(<span class="hljs-type">char</span> title[], <span class="hljs-type">double</span> vect[], <span class="hljs-type">int</span> n)</span> &#123;<br>   <span class="hljs-type">int</span> i;<br><br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n   &quot;</span>, title);<br>   <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.2f &quot;</span>, vect[i]);<br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;  <span class="hljs-comment">/* Print_vector */</span><br><br><span class="hljs-comment">/*-------------------------------------------------------------------*/</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">Compute_prefix_sums</span><span class="hljs-params">(<span class="hljs-type">double</span> vect[], <span class="hljs-type">double</span> prefix_sums[], <span class="hljs-type">int</span> n)</span> &#123;<br>   <span class="hljs-type">int</span> i;<br><br>   prefix_sums[<span class="hljs-number">0</span>] = vect[<span class="hljs-number">0</span>];<br>   <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt; n; i++)<br>      prefix_sums[i] = prefix_sums[i<span class="hljs-number">-1</span>] + vect[i];<br>&#125;  <span class="hljs-comment">/* Compute_prefix_sums */</span><br><br></code></pre></td></tr></table></figure><p><img src="/images/%E5%B9%B6%E8%A1%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20220825132618227.png" alt="image-20220825132618227"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;mpi.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Check_for_error</span><span class="hljs-params">(<span class="hljs-type">int</span> local_ok, <span class="hljs-type">char</span> fname[], <span class="hljs-type">char</span> message[])</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">Get_n</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[], <span class="hljs-type">int</span>* n_p, <span class="hljs-type">int</span>* local_n_p)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">Read_vector</span><span class="hljs-params">(<span class="hljs-type">char</span> prompt[], <span class="hljs-type">double</span> loc_vect[], <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> loc_n)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">Print_vector</span><span class="hljs-params">(<span class="hljs-type">char</span> title[], <span class="hljs-type">double</span> loc_vect[], <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> loc_n)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">Compute_prefix_sums</span><span class="hljs-params">(<span class="hljs-type">double</span> loc_vect[], <span class="hljs-type">double</span> loc_prefix_sums[], </span><br><span class="hljs-params">      <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> loc_n)</span>;<br><br><span class="hljs-type">int</span> my_rank, comm_sz;<br>MPI_Comm comm;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span> &#123;<br>   <span class="hljs-type">double</span> *loc_vect, *loc_prefix_sums;<br>   <span class="hljs-type">int</span> n, loc_n;<br><br>   MPI_Init(&amp;argc, &amp;argv);<br>   comm = MPI_COMM_WORLD;<br>   MPI_Comm_rank(comm, &amp;my_rank);<br>   MPI_Comm_size(comm, &amp;comm_sz);<br><br>   Get_n(argc, argv, &amp;n, &amp;loc_n);<br>   loc_vect = <span class="hljs-built_in">malloc</span>(loc_n*<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">double</span>));<br>   loc_prefix_sums = <span class="hljs-built_in">malloc</span>(loc_n*<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">double</span>));<br><br>   Read_vector(<span class="hljs-string">&quot;Enter the vector&quot;</span>, loc_vect, n, loc_n);<br>   Print_vector(<span class="hljs-string">&quot;Input vector&quot;</span>, loc_vect, n, loc_n);<br>   Compute_prefix_sums(loc_vect, loc_prefix_sums, n, loc_n);<br>   Print_vector(<span class="hljs-string">&quot;Prefix sums&quot;</span>, loc_prefix_sums, n, loc_n);<br><br>   <span class="hljs-built_in">free</span>(loc_vect);<br>   <span class="hljs-built_in">free</span>(loc_prefix_sums);<br><br>   MPI_Finalize();<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;  <span class="hljs-comment">/* main */</span><br><br><span class="hljs-comment">/*-------------------------------------------------------------------*/</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">Check_for_error</span><span class="hljs-params">(</span><br><span class="hljs-params">                <span class="hljs-type">int</span>       local_ok   <span class="hljs-comment">/* in */</span>, </span><br><span class="hljs-params">                <span class="hljs-type">char</span>      fname[]    <span class="hljs-comment">/* in */</span>,</span><br><span class="hljs-params">                <span class="hljs-type">char</span>      message[]  <span class="hljs-comment">/* in */</span>)</span> &#123;<br>   <span class="hljs-type">int</span> ok;<br>   <br>   MPI_Allreduce(&amp;local_ok, &amp;ok, <span class="hljs-number">1</span>, MPI_INT, MPI_MIN, comm);<br>   <span class="hljs-keyword">if</span> (ok == <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-type">int</span> my_rank;<br>      MPI_Comm_rank(comm, &amp;my_rank);<br>      <span class="hljs-keyword">if</span> (my_rank == <span class="hljs-number">0</span>) &#123;<br>         <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;Proc %d &gt; In %s, %s\n&quot;</span>, my_rank, fname, <br>               message);<br>         fflush(<span class="hljs-built_in">stderr</span>);<br>      &#125;<br>      MPI_Finalize();<br>      <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>   &#125;<br>&#125;  <span class="hljs-comment">/* Check_for_error */</span><br><br><span class="hljs-comment">/*-------------------------------------------------------------------*/</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">Get_n</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[], <span class="hljs-type">int</span>* n_p, <span class="hljs-type">int</span>* local_n_p)</span> &#123;<br>   <span class="hljs-type">int</span> local_ok = <span class="hljs-number">1</span>;<br>   <br>   <span class="hljs-keyword">if</span> (my_rank == <span class="hljs-number">0</span>)&#123;<br>      <span class="hljs-keyword">if</span> (argc != <span class="hljs-number">2</span>)<br>         *n_p = <span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">else</span><br>         *n_p = strtol(argv[<span class="hljs-number">1</span>], <span class="hljs-literal">NULL</span>, <span class="hljs-number">10</span>);<br>   &#125;<br>   <br>   MPI_Bcast(n_p, <span class="hljs-number">1</span>, MPI_INT, <span class="hljs-number">0</span>, comm);<br>   <span class="hljs-keyword">if</span> (*n_p &lt;= <span class="hljs-number">0</span> || *n_p % comm_sz != <span class="hljs-number">0</span>) local_ok = <span class="hljs-number">0</span>;<br>   Check_for_error(local_ok, <span class="hljs-string">&quot;Get_n&quot;</span>, <br>         <span class="hljs-string">&quot;n should be &gt; 0 and evenly divisible by comm_sz&quot;</span>);<br>   <br>   *local_n_p = *n_p / comm_sz;<br>&#125;  <span class="hljs-comment">/* Get_n */</span><br><br><br><span class="hljs-comment">/*-------------------------------------------------------------------*/</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">Read_vector</span><span class="hljs-params">(<span class="hljs-type">char</span> prompt[], <span class="hljs-type">double</span> loc_vect[], <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> loc_n)</span> &#123;<br>   <span class="hljs-type">int</span> i;<br>   <span class="hljs-type">double</span>* tmp = <span class="hljs-literal">NULL</span>;<br><br>   <span class="hljs-keyword">if</span> (my_rank == <span class="hljs-number">0</span>) &#123;<br>      tmp = <span class="hljs-built_in">malloc</span>(n*<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">double</span>));<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, prompt);<br>      <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>         <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lf&quot;</span>, &amp;tmp[i]);<br>      MPI_Scatter(tmp, loc_n, MPI_DOUBLE, loc_vect, loc_n, MPI_DOUBLE, <span class="hljs-number">0</span>,<br>            comm);<br>      <span class="hljs-built_in">free</span>(tmp);<br>   &#125; <span class="hljs-keyword">else</span> &#123;<br>      MPI_Scatter(tmp, loc_n, MPI_DOUBLE, loc_vect, loc_n, MPI_DOUBLE, <span class="hljs-number">0</span>,<br>            comm);<br>   &#125;<br>&#125;  <span class="hljs-comment">/* Read_vector */</span><br><br><span class="hljs-comment">/*-------------------------------------------------------------------*/</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">Print_vector</span><span class="hljs-params">(<span class="hljs-type">char</span> title[], <span class="hljs-type">double</span> loc_vect[], <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> loc_n)</span> &#123;<br>   <span class="hljs-type">int</span> i;<br>   <span class="hljs-type">double</span>* tmp = <span class="hljs-literal">NULL</span>;<br><br>   <span class="hljs-keyword">if</span> (my_rank == <span class="hljs-number">0</span>) &#123;<br>      tmp = <span class="hljs-built_in">malloc</span>(n*<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">double</span>));<br>      MPI_Gather(loc_vect, loc_n, MPI_DOUBLE, tmp, loc_n, MPI_DOUBLE, <span class="hljs-number">0</span>,<br>            comm);<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n   &quot;</span>, title);<br>      <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>         <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.2f &quot;</span>, tmp[i]);<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>      <span class="hljs-built_in">free</span>(tmp);<br>   &#125; <span class="hljs-keyword">else</span> &#123;<br>      MPI_Gather(loc_vect, loc_n, MPI_DOUBLE, tmp, loc_n, MPI_DOUBLE, <span class="hljs-number">0</span>,<br>            comm);<br>   &#125;<br>&#125;  <span class="hljs-comment">/* Print_vector */</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Compute_prefix_sums</span><span class="hljs-params">(<span class="hljs-type">double</span> loc_vect[], <span class="hljs-type">double</span> loc_prefix_sums[], <span class="hljs-type">int</span> n, </span><br><span class="hljs-params">      <span class="hljs-type">int</span> loc_n)</span> &#123;<br>   <span class="hljs-type">int</span> loc_i, src, dest;<br>   <span class="hljs-type">double</span> sum_of_preceding;<br><br>   <span class="hljs-comment">/* First compute prefix sums of my local vector */</span><br>   loc_prefix_sums[<span class="hljs-number">0</span>] = loc_vect[<span class="hljs-number">0</span>];<br>   <span class="hljs-keyword">for</span> (loc_i = <span class="hljs-number">1</span>; loc_i &lt; loc_n; loc_i++)<br>      loc_prefix_sums[loc_i] = loc_prefix_sums[loc_i<span class="hljs-number">-1</span>] + loc_vect[loc_i];<br><br>   <span class="hljs-comment">/* Now figure which process precedes me and which process succeeds me */</span><br>   src = my_rank - <span class="hljs-number">1</span>;<br>   dest = my_rank + <span class="hljs-number">1</span>;<br><br>   <span class="hljs-keyword">if</span> (my_rank != <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-comment">/* If I&#x27;m not 0 receive sum of preceding components */</span><br>      MPI_Recv(&amp;sum_of_preceding, <span class="hljs-number">1</span>, MPI_DOUBLE, src, <span class="hljs-number">0</span>, comm,<br>            MPI_STATUS_IGNORE);<br>      <span class="hljs-comment">/* Add in sum of preceding components to my prefix sums */</span><br>      <span class="hljs-keyword">for</span> (loc_i = <span class="hljs-number">0</span>; loc_i &lt; n; loc_i++)<br>         loc_prefix_sums[loc_i] += sum_of_preceding;<br>   &#125;<br><br><br>   <span class="hljs-comment">/* Now send my last element to the next process */</span><br>   <span class="hljs-keyword">if</span> (my_rank != comm_sz - <span class="hljs-number">1</span>) &#123;<br>      MPI_Send(&amp;loc_prefix_sums[loc_n<span class="hljs-number">-1</span>], <span class="hljs-number">1</span>, MPI_DOUBLE, dest, <span class="hljs-number">0</span>, comm);<br>   &#125;<br>&#125;  <span class="hljs-comment">/* Compute_prefix_sums */</span><br><br></code></pre></td></tr></table></figure><p><img src="/images/%E5%B9%B6%E8%A1%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20220825140338536.png" alt="image-20220825140338536"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><code class="hljs c"><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;mpi.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Check_for_error</span><span class="hljs-params">(<span class="hljs-type">int</span> local_ok, <span class="hljs-type">char</span> fname[], <span class="hljs-type">char</span> message[])</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">Get_n</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[], <span class="hljs-type">int</span>* n_p, <span class="hljs-type">int</span>* local_n_p)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">Read_vector</span><span class="hljs-params">(<span class="hljs-type">char</span> prompt[], <span class="hljs-type">double</span> loc_vect[], <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> loc_n)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">Print_vector</span><span class="hljs-params">(<span class="hljs-type">char</span> title[], <span class="hljs-type">double</span> loc_vect[], <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> loc_n)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">Compute_prefix_sums</span><span class="hljs-params">(<span class="hljs-type">double</span> loc_vect[], <span class="hljs-type">double</span> loc_prefix_sums[], </span><br><span class="hljs-params">      <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> loc_n)</span>;<br><br><span class="hljs-type">int</span> my_rank, comm_sz;<br>MPI_Comm comm;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span> &#123;<br>   <span class="hljs-type">double</span> *loc_vect, *loc_prefix_sums;<br>   <span class="hljs-type">int</span> n, loc_n;<br><br>   MPI_Init(&amp;argc, &amp;argv);<br>   comm = MPI_COMM_WORLD;<br>   MPI_Comm_rank(comm, &amp;my_rank);<br>   MPI_Comm_size(comm, &amp;comm_sz);<br><br>   Get_n(argc, argv, &amp;n, &amp;loc_n);<br>   loc_vect = <span class="hljs-built_in">malloc</span>(loc_n*<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">double</span>));<br>   loc_prefix_sums = <span class="hljs-built_in">malloc</span>(loc_n*<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">double</span>));<br><br>   Read_vector(<span class="hljs-string">&quot;Enter the vector&quot;</span>, loc_vect, n, loc_n);<br>   Print_vector(<span class="hljs-string">&quot;Input vector&quot;</span>, loc_vect, n, loc_n);<br>   Compute_prefix_sums(loc_vect, loc_prefix_sums, n, loc_n);<br>   Print_vector(<span class="hljs-string">&quot;Prefix sums&quot;</span>, loc_prefix_sums, n, loc_n);<br><br>   <span class="hljs-built_in">free</span>(loc_vect);<br>   <span class="hljs-built_in">free</span>(loc_prefix_sums);<br><br>   MPI_Finalize();<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;  <span class="hljs-comment">/* main */</span><br><br><span class="hljs-comment">/*-------------------------------------------------------------------*/</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">Check_for_error</span><span class="hljs-params">(</span><br><span class="hljs-params">                <span class="hljs-type">int</span>       local_ok   <span class="hljs-comment">/* in */</span>, </span><br><span class="hljs-params">                <span class="hljs-type">char</span>      fname[]    <span class="hljs-comment">/* in */</span>,</span><br><span class="hljs-params">                <span class="hljs-type">char</span>      message[]  <span class="hljs-comment">/* in */</span>)</span> &#123;<br>   <span class="hljs-type">int</span> ok;<br>   <br>   MPI_Allreduce(&amp;local_ok, &amp;ok, <span class="hljs-number">1</span>, MPI_INT, MPI_MIN, comm);<br>   <span class="hljs-keyword">if</span> (ok == <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-type">int</span> my_rank;<br>      MPI_Comm_rank(comm, &amp;my_rank);<br>      <span class="hljs-keyword">if</span> (my_rank == <span class="hljs-number">0</span>) &#123;<br>         <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;Proc %d &gt; In %s, %s\n&quot;</span>, my_rank, fname, <br>               message);<br>         fflush(<span class="hljs-built_in">stderr</span>);<br>      &#125;<br>      MPI_Finalize();<br>      <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>   &#125;<br>&#125;  <span class="hljs-comment">/* Check_for_error */</span><br><br><span class="hljs-comment">/*-------------------------------------------------------------------*/</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">Get_n</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[], <span class="hljs-type">int</span>* n_p, <span class="hljs-type">int</span>* local_n_p)</span> &#123;<br>   <span class="hljs-type">int</span> local_ok = <span class="hljs-number">1</span>;<br>   <br>   <span class="hljs-keyword">if</span> (my_rank == <span class="hljs-number">0</span>)&#123;<br>      <span class="hljs-keyword">if</span> (argc != <span class="hljs-number">2</span>)<br>         *n_p = <span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">else</span><br>         *n_p = strtol(argv[<span class="hljs-number">1</span>], <span class="hljs-literal">NULL</span>, <span class="hljs-number">10</span>);<br>   &#125;<br>   <br>   MPI_Bcast(n_p, <span class="hljs-number">1</span>, MPI_INT, <span class="hljs-number">0</span>, comm);<br>   <span class="hljs-keyword">if</span> (*n_p &lt;= <span class="hljs-number">0</span> || *n_p % comm_sz != <span class="hljs-number">0</span>) local_ok = <span class="hljs-number">0</span>;<br>   Check_for_error(local_ok, <span class="hljs-string">&quot;Get_n&quot;</span>, <br>         <span class="hljs-string">&quot;n should be &gt; 0 and evenly divisible by comm_sz&quot;</span>);<br>   <br>   *local_n_p = *n_p / comm_sz;<br>&#125;  <span class="hljs-comment">/* Get_n */</span><br><br><br><span class="hljs-comment">/*-------------------------------------------------------------------*/</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">Read_vector</span><span class="hljs-params">(<span class="hljs-type">char</span> prompt[], <span class="hljs-type">double</span> loc_vect[], <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> loc_n)</span> &#123;<br>   <span class="hljs-type">int</span> i;<br>   <span class="hljs-type">double</span>* tmp = <span class="hljs-literal">NULL</span>;<br><br>   <span class="hljs-keyword">if</span> (my_rank == <span class="hljs-number">0</span>) &#123;<br>      tmp = <span class="hljs-built_in">malloc</span>(n*<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">double</span>));<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, prompt);<br>      <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>         <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lf&quot;</span>, &amp;tmp[i]);<br>      MPI_Scatter(tmp, loc_n, MPI_DOUBLE, loc_vect, loc_n, MPI_DOUBLE, <span class="hljs-number">0</span>,<br>            comm);<br>      <span class="hljs-built_in">free</span>(tmp);<br>   &#125; <span class="hljs-keyword">else</span> &#123;<br>      MPI_Scatter(tmp, loc_n, MPI_DOUBLE, loc_vect, loc_n, MPI_DOUBLE, <span class="hljs-number">0</span>,<br>            comm);<br>   &#125;<br>&#125;  <span class="hljs-comment">/* Read_vector */</span><br><br><span class="hljs-comment">/*-------------------------------------------------------------------*/</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">Print_vector</span><span class="hljs-params">(<span class="hljs-type">char</span> title[], <span class="hljs-type">double</span> loc_vect[], <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> loc_n)</span> &#123;<br>   <span class="hljs-type">int</span> i;<br>   <span class="hljs-type">double</span>* tmp = <span class="hljs-literal">NULL</span>;<br><br>   <span class="hljs-keyword">if</span> (my_rank == <span class="hljs-number">0</span>) &#123;<br>      tmp = <span class="hljs-built_in">malloc</span>(n*<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">double</span>));<br>      MPI_Gather(loc_vect, loc_n, MPI_DOUBLE, tmp, loc_n, MPI_DOUBLE, <span class="hljs-number">0</span>,<br>            comm);<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n   &quot;</span>, title);<br>      <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>         <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.2f &quot;</span>, tmp[i]);<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>      <span class="hljs-built_in">free</span>(tmp);<br>   &#125; <span class="hljs-keyword">else</span> &#123;<br>      MPI_Gather(loc_vect, loc_n, MPI_DOUBLE, tmp, loc_n, MPI_DOUBLE, <span class="hljs-number">0</span>,<br>            comm);<br>   &#125;<br>&#125;  <span class="hljs-comment">/* Print_vector */</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Compute_prefix_sums</span><span class="hljs-params">(<span class="hljs-type">double</span> loc_vect[], <span class="hljs-type">double</span> loc_prefix_sums[], <span class="hljs-type">int</span> n,  <span class="hljs-type">int</span> loc_n)</span> &#123;<br>   <span class="hljs-type">int</span> loc_i, partner;<br>   <span class="hljs-type">unsigned</span> mask;<br>   <span class="hljs-type">double</span> sum, tmp;<br><br>   <span class="hljs-comment">/* First compute prefix sums of my local vector */</span><br>   loc_prefix_sums[<span class="hljs-number">0</span>] = loc_vect[<span class="hljs-number">0</span>];<br>   <span class="hljs-keyword">for</span> (loc_i = <span class="hljs-number">1</span>; loc_i &lt; loc_n; loc_i++)<br>      loc_prefix_sums[loc_i] = loc_prefix_sums[loc_i<span class="hljs-number">-1</span>] + loc_vect[loc_i];<br><br>   <span class="hljs-comment">/* Now use butterfly structured communications */</span><br>   sum = loc_prefix_sums[loc_n<span class="hljs-number">-1</span>];<br>   mask = <span class="hljs-number">1</span>;<br>   <span class="hljs-keyword">while</span> (mask &lt; comm_sz) &#123;<br>      partner = my_rank ^ mask;<br>      MPI_Sendrecv(&amp;sum, <span class="hljs-number">1</span>, MPI_DOUBLE, partner, <span class="hljs-number">0</span>,<br>            &amp;tmp, <span class="hljs-number">1</span>, MPI_DOUBLE, partner, <span class="hljs-number">0</span>,<br>            comm, MPI_STATUS_IGNORE);<br>      sum += tmp;<br>      <span class="hljs-keyword">if</span> (my_rank &gt; partner) <br>         <span class="hljs-keyword">for</span> (loc_i = <span class="hljs-number">0</span>; loc_i &lt; loc_n; loc_i++)<br>            loc_prefix_sums[loc_i] += tmp;<br>      mask &lt;&lt;= <span class="hljs-number">1</span>;<br>   &#125;<br><br>&#125;  <span class="hljs-comment">/* Compute_prefix_sums */</span><br><br></code></pre></td></tr></table></figure><p><img src="/images/%E5%B9%B6%E8%A1%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20220825141153755.png" alt="image-20220825141153755"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;mpi.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Check_for_error</span><span class="hljs-params">(<span class="hljs-type">int</span> local_ok, <span class="hljs-type">char</span> fname[], <span class="hljs-type">char</span> message[])</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">Get_n</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[], <span class="hljs-type">int</span>* n_p, <span class="hljs-type">int</span>* local_n_p)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">Gen_vector</span><span class="hljs-params">(<span class="hljs-type">double</span> loc_vect[], <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> loc_n)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">Read_vector</span><span class="hljs-params">(<span class="hljs-type">char</span> prompt[], <span class="hljs-type">double</span> loc_vect[], <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> loc_n)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">Print_vector</span><span class="hljs-params">(<span class="hljs-type">char</span> title[], <span class="hljs-type">double</span> loc_vect[], <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> loc_n)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">Compute_prefix_sums</span><span class="hljs-params">(<span class="hljs-type">double</span> loc_vect[], <span class="hljs-type">double</span> loc_prefix_sums[], <span class="hljs-type">int</span> n, </span><br><span class="hljs-params">      <span class="hljs-type">int</span> loc_n)</span>;<br><br><span class="hljs-type">int</span> my_rank, comm_sz;<br>MPI_Comm comm;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span> &#123;<br>   <span class="hljs-type">double</span> *loc_vect, *loc_prefix_sums;<br>   <span class="hljs-type">int</span> n, loc_n;<br><br>   MPI_Init(&amp;argc, &amp;argv);<br>   comm = MPI_COMM_WORLD;<br>   MPI_Comm_rank(comm, &amp;my_rank);<br>   MPI_Comm_size(comm, &amp;comm_sz);<br><br>   Get_n(argc, argv, &amp;n, &amp;loc_n);<br>   loc_vect = <span class="hljs-built_in">malloc</span>(loc_n*<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">double</span>));<br>   loc_prefix_sums = <span class="hljs-built_in">malloc</span>(loc_n*<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">double</span>));<br><br><span class="hljs-meta">#  <span class="hljs-keyword">ifndef</span> DEBUG</span><br>   Gen_vector(loc_vect, n, loc_n);<br><span class="hljs-meta">#  <span class="hljs-keyword">else</span></span><br>   Read_vector(<span class="hljs-string">&quot;Enter the vector&quot;</span>, loc_vect, n, loc_n);<br><span class="hljs-meta">#  <span class="hljs-keyword">endif</span></span><br>   Print_vector(<span class="hljs-string">&quot;Initial vector&quot;</span>, loc_vect, n, loc_n);<br>   Compute_prefix_sums(loc_vect, loc_prefix_sums, n, loc_n);<br>   Print_vector(<span class="hljs-string">&quot;Prefix sums&quot;</span>, loc_prefix_sums, n, loc_n);<br><br>   <span class="hljs-built_in">free</span>(loc_vect);<br>   <span class="hljs-built_in">free</span>(loc_prefix_sums);<br><br>   MPI_Finalize();<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;  <span class="hljs-comment">/* main */</span><br><br><span class="hljs-comment">/*-------------------------------------------------------------------*/</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">Check_for_error</span><span class="hljs-params">(</span><br><span class="hljs-params">                <span class="hljs-type">int</span>       local_ok   <span class="hljs-comment">/* in */</span>, </span><br><span class="hljs-params">                <span class="hljs-type">char</span>      fname[]    <span class="hljs-comment">/* in */</span>,</span><br><span class="hljs-params">                <span class="hljs-type">char</span>      message[]  <span class="hljs-comment">/* in */</span>)</span> &#123;<br>   <span class="hljs-type">int</span> ok;<br>   <br>   MPI_Allreduce(&amp;local_ok, &amp;ok, <span class="hljs-number">1</span>, MPI_INT, MPI_MIN, comm);<br>   <span class="hljs-keyword">if</span> (ok == <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-type">int</span> my_rank;<br>      MPI_Comm_rank(comm, &amp;my_rank);<br>      <span class="hljs-keyword">if</span> (my_rank == <span class="hljs-number">0</span>) &#123;<br>         <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;Proc %d &gt; In %s, %s\n&quot;</span>, my_rank, fname, <br>               message);<br>         fflush(<span class="hljs-built_in">stderr</span>);<br>      &#125;<br>      MPI_Finalize();<br>      <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>   &#125;<br>&#125;  <span class="hljs-comment">/* Check_for_error */</span><br><br><span class="hljs-comment">/*-------------------------------------------------------------------*/</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">Get_n</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[], <span class="hljs-type">int</span>* n_p, <span class="hljs-type">int</span>* local_n_p)</span> &#123;<br>   <span class="hljs-type">int</span> local_ok = <span class="hljs-number">1</span>;<br>   <br>   <span class="hljs-keyword">if</span> (my_rank == <span class="hljs-number">0</span>)&#123;<br>      <span class="hljs-keyword">if</span> (argc != <span class="hljs-number">2</span>)<br>         *n_p = <span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">else</span><br>         *n_p = strtol(argv[<span class="hljs-number">1</span>], <span class="hljs-literal">NULL</span>, <span class="hljs-number">10</span>);<br>   &#125;<br>   <br>   MPI_Bcast(n_p, <span class="hljs-number">1</span>, MPI_INT, <span class="hljs-number">0</span>, comm);<br>   <span class="hljs-keyword">if</span> (*n_p &lt;= <span class="hljs-number">0</span> || *n_p % comm_sz != <span class="hljs-number">0</span>) local_ok = <span class="hljs-number">0</span>;<br>   Check_for_error(local_ok, <span class="hljs-string">&quot;Get_n&quot;</span>, <br>         <span class="hljs-string">&quot;n should be &gt; 0 and evenly divisible by comm_sz&quot;</span>);<br>   <br>   *local_n_p = *n_p / comm_sz;<br>&#125;  <span class="hljs-comment">/* Get_n */</span><br><br><br><span class="hljs-comment">/*-------------------------------------------------------------------*/</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">Gen_vector</span><span class="hljs-params">(<span class="hljs-type">double</span> loc_vect[], <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> loc_n)</span> &#123;<br>   <span class="hljs-type">int</span> i;<br>   <span class="hljs-type">double</span>* tmp = <span class="hljs-literal">NULL</span>;<br><br>   <span class="hljs-keyword">if</span> (my_rank == <span class="hljs-number">0</span>) &#123;<br>      tmp = <span class="hljs-built_in">malloc</span>(n*<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">double</span>));<br>      srandom(<span class="hljs-number">1</span>);<br>      <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>         tmp[i] = random()/((<span class="hljs-type">double</span>) RAND_MAX);<br>      MPI_Scatter(tmp, loc_n, MPI_DOUBLE, loc_vect, loc_n, MPI_DOUBLE, <span class="hljs-number">0</span>,<br>            comm);<br>      <span class="hljs-built_in">free</span>(tmp);<br>   &#125; <span class="hljs-keyword">else</span> &#123;<br>      MPI_Scatter(tmp, loc_n, MPI_DOUBLE, loc_vect, loc_n, MPI_DOUBLE, <span class="hljs-number">0</span>,<br>            comm);<br>   &#125;<br>&#125;  <span class="hljs-comment">/* Gen_vector */</span><br><br><span class="hljs-comment">/*-------------------------------------------------------------------*/</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">Read_vector</span><span class="hljs-params">(<span class="hljs-type">char</span> prompt[], <span class="hljs-type">double</span> loc_vect[], <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> loc_n)</span> &#123;<br>   <span class="hljs-type">int</span> i;<br>   <span class="hljs-type">double</span>* tmp = <span class="hljs-literal">NULL</span>;<br><br>   <span class="hljs-keyword">if</span> (my_rank == <span class="hljs-number">0</span>) &#123;<br>      tmp = <span class="hljs-built_in">malloc</span>(n*<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">double</span>));<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, prompt);<br>      <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>         <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lf&quot;</span>, &amp;tmp[i]);<br>      MPI_Scatter(tmp, loc_n, MPI_DOUBLE, loc_vect, loc_n, MPI_DOUBLE, <span class="hljs-number">0</span>,<br>            comm);<br>      <span class="hljs-built_in">free</span>(tmp);<br>   &#125; <span class="hljs-keyword">else</span> &#123;<br>      MPI_Scatter(tmp, loc_n, MPI_DOUBLE, loc_vect, loc_n, MPI_DOUBLE, <span class="hljs-number">0</span>,<br>            comm);<br>   &#125;<br>&#125;  <span class="hljs-comment">/* Read_vector */</span><br><br><span class="hljs-comment">/*-------------------------------------------------------------------*/</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">Print_vector</span><span class="hljs-params">(<span class="hljs-type">char</span> title[], <span class="hljs-type">double</span> loc_vect[], <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> loc_n)</span> &#123;<br>   <span class="hljs-type">int</span> i;<br>   <span class="hljs-type">double</span>* tmp = <span class="hljs-literal">NULL</span>;<br><br>   <span class="hljs-keyword">if</span> (my_rank == <span class="hljs-number">0</span>) &#123;<br>      tmp = <span class="hljs-built_in">malloc</span>(n*<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">double</span>));<br>      MPI_Gather(loc_vect, loc_n, MPI_DOUBLE, tmp, loc_n, MPI_DOUBLE, <span class="hljs-number">0</span>,<br>            comm);<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n   &quot;</span>, title);<br>      <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>         <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.2f &quot;</span>, tmp[i]);<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>      <span class="hljs-built_in">free</span>(tmp);<br>   &#125; <span class="hljs-keyword">else</span> &#123;<br>      MPI_Gather(loc_vect, loc_n, MPI_DOUBLE, tmp, loc_n, MPI_DOUBLE, <span class="hljs-number">0</span>,<br>            comm);<br>   &#125;<br>&#125;  <span class="hljs-comment">/* Print_vector */</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Compute_prefix_sums</span><span class="hljs-params">(<span class="hljs-type">double</span> loc_vect[], <span class="hljs-type">double</span> loc_prefix_sums[], <span class="hljs-type">int</span> n, </span><br><span class="hljs-params">      <span class="hljs-type">int</span> loc_n)</span> &#123;<br>   <span class="hljs-type">int</span> loc_i;<br>   <span class="hljs-type">double</span> my_sum, pred_sum;<br><br>   <span class="hljs-comment">/* First compute prefix sums of my local vector */</span><br>   loc_prefix_sums[<span class="hljs-number">0</span>] = loc_vect[<span class="hljs-number">0</span>];<br>   <span class="hljs-keyword">for</span> (loc_i = <span class="hljs-number">1</span>; loc_i &lt; loc_n; loc_i++)<br>      loc_prefix_sums[loc_i] = loc_prefix_sums[loc_i<span class="hljs-number">-1</span>] + loc_vect[loc_i];<br><br>   <span class="hljs-comment">/* Now use MPI_Scan to find prefix sums of last elements in</span><br><span class="hljs-comment">    *   loc_prefix_sums */</span><br>   my_sum = loc_prefix_sums[loc_n<span class="hljs-number">-1</span>];<br>   MPI_Scan(&amp;my_sum, &amp;pred_sum, <span class="hljs-number">1</span>, MPI_DOUBLE, MPI_SUM, comm);<br><br>   <span class="hljs-comment">/* Add pred_sum-my_sum to each element of loc_prefix_sums */</span><br>   pred_sum -= my_sum;<br>   <span class="hljs-keyword">for</span> (loc_i = <span class="hljs-number">0</span>; loc_i &lt; loc_n; loc_i++)<br>      loc_prefix_sums[loc_i] += pred_sum;<br><br>&#125;  <span class="hljs-comment">/* Compute_prefix_sums */</span><br><br></code></pre></td></tr></table></figure><h1 id="37-为什么要有join操作"><a href="#37-为什么要有join操作" class="headerlink" title="37.为什么要有join操作"></a>37.为什么要有join操作</h1><p>主线程处理完其他的事物后，<strong>需要用到子线程的处理结果</strong>，也就是<strong>主线程需要等待子线程执行完成之后结束</strong>，这个时候需要pthread_join来实现。</p><p>即pthread_join()的作用可以这样理解：主线程等待子线程的终止。也就是在子线程调用了pthread_join()方法后面的代码，只有等到子线程结束了才能执行。</p><p><strong>当 pthread_join() 函数返回后，被调用线程才算真正意义上的结束，它的内存空间也会被释放</strong></p><p>因此pthread_join函数有两个作用：</p><ul><li>等待其他线程结束</li><li>对线程的资源进行回收</li></ul><h1 id="38-什么叫临界区-为什么要有临界区"><a href="#38-什么叫临界区-为什么要有临界区" class="headerlink" title="38. 什么叫临界区 为什么要有临界区"></a>38. 什么叫临界区 为什么要有临界区</h1><p>一个更新<strong>共享资源</strong>的代码段，<strong>一次只允许一个线程执行该代码段。</strong></p><p>防止<strong>数据竞争</strong></p><p>当多个线程都要访问共享变量或共享文件这样的共享资源时，如果至少其中一个访问是更新操作，那么这些访问就可能导致某种错误，我们称之为竞争条件。</p><h1 id="39-什么叫共享变量-优点和缺点是什么"><a href="#39-什么叫共享变量-优点和缺点是什么" class="headerlink" title="39.什么叫共享变量 优点和缺点是什么"></a>39.什么叫共享变量 优点和缺点是什么</h1><p>全局变量thread_count。在pthreads程序中，全局变量被所有线程所共享，而在函数中声明的局部变量则由执行该函数的线程所私有。</p><p>全局变量可能会在程序中引发令人困惑的错误。例如，我们写一个有全局变量int x的程序，函数f内也有一个名为x的局部变量，但我们却忘了在函数中声明这个局部变量x。编译时是不会有错误和警告的，因为函数f有权访问全局变量x。然而在运行时，程序却输出了奇怪的结果，这是由全局变量x引起的。过了几天，我们才发现导致全局变量有奇怪值的原因出自函数f，应该限制使用全局变量，除了确实需要用到的情况之外，比如线程之间共享变量。</p><h2 id="全局变量的优点"><a href="#全局变量的优点" class="headerlink" title="全局变量的优点"></a>全局变量的优点</h2><p>1）全局变量顾名思义全局可见的变量，全局变量生命周期长，自开始时创建直到全部函数运行结束后才被释放<br>2）任何 一个函数或线程都可以读写全局变量，在一定程度上使得函数之间变量的同步变得更为简单。<br>3）对于初学者较为友好，定义和使用起来都较为简单，且在项目只包含单个或少数几个源文件和头文件时弊端并不明显。<br>4）全局变量内存地址固定，读写效率比较高。<br>5）可以减少变量的个数，减少由于实际参数和形式参数的数据传递带来的时间消耗。</p><h2 id="全局变量的缺点"><a href="#全局变量的缺点" class="headerlink" title="全局变量的缺点"></a>全局变量的缺点</h2><h4 id="1）长期占用内存"><a href="#1）长期占用内存" class="headerlink" title="1）长期占用内存"></a>1）长期占用内存</h4><p>由于之前提到的全局变量生命周期长，这使得在整个程序运行的过程中全局变量一直存在，始终占有那块存储区，难以被释放</p><h4 id="2）难以定位修改"><a href="#2）难以定位修改" class="headerlink" title="2）难以定位修改"></a>2）难以定位修改</h4><p>由于全局变量定义在函数之外，使得全局变量是公共的，即全部函数都可以访问，难以定位全局变量在哪里被修改，加大了调试的难度</p><h4 id="3）不利于后期的维护"><a href="#3）不利于后期的维护" class="headerlink" title="3）不利于后期的维护"></a>3）不利于后期的维护</h4><p>在前期编写全局变量时确实是一种“快捷通道”，但是在后期维护程序时哪怕仅是增加修改删除小功能，往往要从上到下掘地三尺地修改，涉及大多数模块，而原有的代码注释却忘了更新修改，而这对于后来的维护者，就像一团迷雾一样。</p><h4 id="4）降低函数的可读性"><a href="#4）降低函数的可读性" class="headerlink" title="4）降低函数的可读性"></a>4）降低函数的可读性</h4><p>使用全局变量的函数，需要关注全局变量的值，增加了理解的难度</p><h4 id="5）破坏函数的封装性能"><a href="#5）破坏函数的封装性能" class="headerlink" title="5）破坏函数的封装性能"></a>5）破坏函数的封装性能</h4><p>函数类似于一个黑匣子，一般是通过函数参数和返回值进行输入输出，函数内部实现相对独立。但函数中如果使用了全局变量，那么函数体内的语句就可以绕过函数参数和返回值进行存取，这种情况增加了耦合性，也破坏了函数的独立性，使函数对全局变量产生依赖。同时，也降低了该函数的可移植性。</p><h4 id="6）降低函数的可移植性"><a href="#6）降低函数的可移植性" class="headerlink" title="6）降低函数的可移植性"></a>6）降低函数的可移植性</h4><p>原因与上一条差不多，破坏了函数的封装性能以及增加了函数对全局变量的依赖的同时，也就使得将函数移植到可操作性降低。</p><h4 id="7）增加程序之间的耦合性"><a href="#7）增加程序之间的耦合性" class="headerlink" title="7）增加程序之间的耦合性"></a>7）增加程序之间的耦合性</h4><p>使用全局变量会修改全部变量会影响所有用到它的模块，不利于调试，这种弊端在初学时仅有单个源程序和头文件的情况不明显，但是在以后代码量上来了之后，可能会被相互间错的全局变量的使用搞到头秃。</p><h1 id="40-哪些方法实现临界区"><a href="#40-哪些方法实现临界区" class="headerlink" title="40.哪些方法实现临界区"></a>40.哪些方法实现临界区</h1><p>忙等待  互斥锁 信号量 条件变量</p><h1 id="41-互斥锁和信号量的区别"><a href="#41-互斥锁和信号量的区别" class="headerlink" title="41.互斥锁和信号量的区别"></a>41.互斥锁和信号量的区别</h1><p>互斥量最大的区别在于信号量没有个体拥有权，主线程信号量初始化，<strong>所有线程</strong>都可以通过调用sem_post 和sem_wait 函数更新信号量的值</p><p>① <strong>互斥量</strong>用于线程的<strong>互斥</strong>，<strong>信号量</strong>用于线程的<strong>同步</strong>。这是互斥量和信号量的根本区别，也就是<strong>互斥和同步</strong>之间的区别。</p><p>② <strong>互斥量值只能为0&#x2F;1，信号量值可以为非负整数</strong>。也就是说，一个互斥量只能用于一个资源的互斥访问，它不能实现多个资源的多线程互斥问题。信号量可以实现多个同类资源的多线程互斥和同步。当信号量为二元信号量时，也可以完成一个资源的互斥访问。</p><p>③ <strong>互斥量的加锁和解锁必须由同一线程分别对应使用，信号量可以由一个线程释放，另一个线程得到</strong>。</p><h1 id="42-信号量的操作-wait-post"><a href="#42-信号量的操作-wait-post" class="headerlink" title="42.信号量的操作 wait post"></a>42.信号量的操作 wait post</h1><p><img src="/images/%E5%B9%B6%E8%A1%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20220827004130601.png" alt="image-20220827004130601"></p><p><img src="/images/%E5%B9%B6%E8%A1%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20220827004211355.png" alt="image-20220827004211355"></p><p><img src="/images/%E5%B9%B6%E8%A1%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20220827004428137.png" alt="image-20220827004428137"></p><p><img src="/images/%E5%B9%B6%E8%A1%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20220827004751515.png" alt="image-20220827004751515"></p><p><img src="/images/%E5%B9%B6%E8%A1%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20220827005420785.png" alt="image-20220827005420785"></p><h1 id="43-读写锁-为什么-优点-原理"><a href="#43-读写锁-为什么-优点-原理" class="headerlink" title="43.读写锁 为什么 优点 原理"></a>43.读写锁 为什么 优点 原理</h1><p><img src="/images/%E5%B9%B6%E8%A1%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20220827011125591.png" alt="image-20220827011125591"></p><h1 id="44-openmp和pthread相比-优缺点是什么"><a href="#44-openmp和pthread相比-优缺点是什么" class="headerlink" title="44. openmp和pthread相比 优缺点是什么"></a>44. openmp和pthread相比 优缺点是什么</h1><ul><li>Pthreads提供了一些在OpenMP中不可用的协调构造。<strong>OpenMP更容易将程序并行化</strong>，<strong>而Pthreads提供的一些构造使得它并行化其他一些程序的能力更强。</strong></li><li>尽管openmp和pthreads都是针对共享内存变成的API，但他们有许多本质的不同，pthreads要求程序员显式地明确每个线程的行为。相反，openmp有时允许程序员只需要简单地声明一块代码应该并行执行，而由<strong>编译器和运行时系统</strong>来决定哪个线程具体执行哪个任务</li><li>pthreads（和MPI一样）是一个能够被链接到C程序的函数库，因此只要系统有pthreads库，pthreads程序就能够任意C编译器使用。相反，openmp要求编译器支持某些操作，所以完全有可能你使用的编译器无法把openmp程序编译成并行程序。</li><li>pthreads更底层，并且提供了虚拟地编写任何可知线程行为地能力。然而，这个功能有一定的代价：<strong>每个线程行为的每一个细节都得由我们自己来定义</strong>。相反，openmp允许编译器和运行时系统来决定线程行为的一些细节。因此使用openmp来编写一些并行行为更容易。但代价是<strong>很难对一些底层的线程交互进行编程。</strong></li></ul><h1 id="45-什么是pragma"><a href="#45-什么是pragma" class="headerlink" title="45.什么是pragma"></a>45.什么是pragma</h1><p>一个预处理器指令，它指示使每个编译程序在保留C和C++语言的整体兼容性时<strong>提供不同机器和操作系统特定的功能。</strong></p><p>在系统中加入预处理器指令一般是用来允许不是基本C语言规范部分的行为。不支持pragma的编译器就会忽略pragma指令提示的那些语句</p><h1 id="46-在openmp里面-变量的可视范围"><a href="#46-在openmp里面-变量的可视范围" class="headerlink" title="46. 在openmp里面 变量的可视范围"></a>46. 在openmp里面 变量的可视范围</h1><p><img src="/images/%E5%B9%B6%E8%A1%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20220827011657997.png" alt="image-20220827011657997"></p><h1 id="47-openmp为什么要有归约子句-归约子句的基本写法-怎么实现的-可以避免什么问题"><a href="#47-openmp为什么要有归约子句-归约子句的基本写法-怎么实现的-可以避免什么问题" class="headerlink" title="47.  openmp为什么要有归约子句 归约子句的基本写法 怎么实现的 可以避免什么问题"></a>47.  openmp为什么要有归约子句 归约子句的基本写法 怎么实现的 可以避免什么问题</h1><p><img src="/images/%E5%B9%B6%E8%A1%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20220827012142366.png" alt="image-20220827012142366"></p><h1 id="48-循环调度的类型"><a href="#48-循环调度的类型" class="headerlink" title="48.循环调度的类型"></a>48.循环调度的类型</h1><p><img src="/images/%E5%B9%B6%E8%A1%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20220827012214638.png" alt="image-20220827012214638"></p><p><img src="/images/%E5%B9%B6%E8%A1%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20220827012239313.png" alt="image-20220827012239313"></p><p><img src="/images/%E5%B9%B6%E8%A1%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20220827012358044.png" alt="image-20220827012358044"></p><p><img src="/images/%E5%B9%B6%E8%A1%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20220827012300917.png" alt="image-20220827012300917"></p><p><img src="/images/%E5%B9%B6%E8%A1%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20220827012312182.png" alt="image-20220827012312182"></p><h1 id="49-openmp中实现临界区-critical、atomic、lock"><a href="#49-openmp中实现临界区-critical、atomic、lock" class="headerlink" title="49.openmp中实现临界区 critical、atomic、lock"></a>49.openmp中实现临界区 critical、atomic、lock</h1><p><img src="/images/%E5%B9%B6%E8%A1%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/image-20220827012440616.png" alt="image-20220827012440616"></p>]]></content>
    
    
    <categories>
      
      <category>并行程序设计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>期末复习</tag>
      
      <tag>并行程序设计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据库系统概念 第4章 SQL题目</title>
    <link href="/2022/08/21/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC4%E7%AB%A0%20SQL%20%E9%A2%98%E7%9B%AE/"/>
    <url>/2022/08/21/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC4%E7%AB%A0%20SQL%20%E9%A2%98%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h1><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC4%E7%AB%A0%20SQL%20%E9%A2%98%E7%9B%AE/image-20220812100638610.png" alt="image-20220812100638610"></p><h1 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h1><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC4%E7%AB%A0%20SQL%20%E9%A2%98%E7%9B%AE/image-20220821233029229.png" alt="image-20220821233029229"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC4%E7%AB%A0%20SQL%20%E9%A2%98%E7%9B%AE/image-20220821233812928.png" alt="image-20220821233812928"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC4%E7%AB%A0%20SQL%20%E9%A2%98%E7%9B%AE/image-20220821234321007.png" alt="image-20220821234321007"></p><h1 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h1><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC4%E7%AB%A0%20SQL%20%E9%A2%98%E7%9B%AE/image-20220821234650148.png" alt="image-20220821234650148"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC4%E7%AB%A0%20SQL%20%E9%A2%98%E7%9B%AE/image-20220821235210542.png" alt="image-20220821235210542"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC4%E7%AB%A0%20SQL%20%E9%A2%98%E7%9B%AE/image-20220821235549579.png" alt="image-20220821235549579"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC4%E7%AB%A0%20SQL%20%E9%A2%98%E7%9B%AE/image-20220822000007722.png" alt="image-20220822000007722"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC4%E7%AB%A0%20SQL%20%E9%A2%98%E7%9B%AE/image-20220822000413813.png" alt="image-20220822000413813"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC4%E7%AB%A0%20SQL%20%E9%A2%98%E7%9B%AE/image-20220822000832340.png" alt="image-20220822000832340"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC4%E7%AB%A0%20SQL%20%E9%A2%98%E7%9B%AE/image-20220822001222763.png" alt="image-20220822001222763"></p><h1 id="4"><a href="#4" class="headerlink" title="4."></a>4.</h1><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC4%E7%AB%A0%20SQL%20%E9%A2%98%E7%9B%AE/image-20220822001317917.png" alt="image-20220822001317917"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC4%E7%AB%A0%20SQL%20%E9%A2%98%E7%9B%AE/image-20220822001437686.png" alt="image-20220822001437686"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC4%E7%AB%A0%20SQL%20%E9%A2%98%E7%9B%AE/image-20220822001606236.png" alt="image-20220822001606236"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC4%E7%AB%A0%20SQL%20%E9%A2%98%E7%9B%AE/image-20220822001807860.png" alt="image-20220822001807860"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC4%E7%AB%A0%20SQL%20%E9%A2%98%E7%9B%AE/image-20220822001858624.png" alt="image-20220822001858624"></p><p>delete from</p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC4%E7%AB%A0%20SQL%20%E9%A2%98%E7%9B%AE/image-20220822001959473.png" alt="image-20220822001959473"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC4%E7%AB%A0%20SQL%20%E9%A2%98%E7%9B%AE/image-20220822002010861.png" alt="image-20220822002010861"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC4%E7%AB%A0%20SQL%20%E9%A2%98%E7%9B%AE/image-20220822002114596.png" alt="image-20220822002114596"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC4%E7%AB%A0%20SQL%20%E9%A2%98%E7%9B%AE/image-20220822002138552.png" alt="image-20220822002138552"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC4%E7%AB%A0%20SQL%20%E9%A2%98%E7%9B%AE/image-20220822002154545.png" alt="image-20220822002154545"></p><h1 id="5"><a href="#5" class="headerlink" title="5."></a>5.</h1><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC4%E7%AB%A0%20SQL%20%E9%A2%98%E7%9B%AE/image-20220822002445873.png" alt="image-20220822002445873"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC4%E7%AB%A0%20SQL%20%E9%A2%98%E7%9B%AE/image-20220822002621389.png" alt="image-20220822002621389"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC4%E7%AB%A0%20SQL%20%E9%A2%98%E7%9B%AE/image-20220822002636625.png" alt="image-20220822002636625"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC4%E7%AB%A0%20SQL%20%E9%A2%98%E7%9B%AE/image-20220822002903687.png" alt="image-20220822002903687"></p><h2 id="using-no-outer-join-at-all"><a href="#using-no-outer-join-at-all" class="headerlink" title="using no outer join at all"></a>using no outer join at all</h2><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC4%E7%AB%A0%20SQL%20%E9%A2%98%E7%9B%AE/image-20220822003217673.png" alt="image-20220822003217673"></p><h1 id="6"><a href="#6" class="headerlink" title="6."></a>6.</h1><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC4%E7%AB%A0%20SQL%20%E9%A2%98%E7%9B%AE/image-20220822003623132.png" alt="image-20220822003623132"></p><h1 id="7"><a href="#7" class="headerlink" title="7."></a>7.</h1><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC4%E7%AB%A0%20SQL%20%E9%A2%98%E7%9B%AE/image-20220822004544040.png" alt="image-20220822004544040"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC4%E7%AB%A0%20SQL%20%E9%A2%98%E7%9B%AE/image-20220822004556200.png" alt="image-20220822004556200"></p>]]></content>
    
    
    <categories>
      
      <category>数据库系统概念</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>数据库系统概念</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/08/17/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/"/>
    <url>/2022/08/17/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/</url>
    
    <content type="html"><![CDATA[<p>事务的一个基本特性是<strong>隔离性</strong>。然而，当数据库中有几个事务并发执行时，隔离性可能不一定能够保持。为了确保事务的隔离性，系统必须对并发事务之间的交互加以控制；这种控制是通过各种称为<strong>并发控制机制</strong>中的一种来实现的。在本章前半部分，我们考虑<strong>对并发执行事务的管理，并且我们忽略故障；</strong>在本章后半部分，我们将看到<strong>系统如何从故障中恢复</strong>。</p><p>在实践中，最常用的并发控制机制是：<strong>两阶段封锁（two-phase locking）</strong>和<strong>快照隔离（snapshot isolation）</strong></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220817235602774.png" alt="image-20220817235602774"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818000016020.png" alt="image-20220818000016020"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818000036473.png" alt="image-20220818000036473"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818000114099.png" alt="image-20220818000114099"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818000133792.png" alt="image-20220818000133792"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818000221373.png" alt="image-20220818000221373"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818000314008.png" alt="image-20220818000314008"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818000439871.png" alt="image-20220818000439871"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818000520714.png" alt="image-20220818000520714"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818000711896.png" alt="image-20220818000711896"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818000809611.png" alt="image-20220818000809611"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818000905598.png" alt="image-20220818000905598"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818000936320.png" alt="image-20220818000936320"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818000951098.png" alt="image-20220818000951098"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818001027804.png" alt="image-20220818001027804"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818001055558.png" alt="image-20220818001055558"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818001140147.png" alt="image-20220818001140147"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818001150941.png" alt="image-20220818001150941"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818001219183.png" alt="image-20220818001219183"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818001324523.png" alt="image-20220818001324523"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818001336447.png" alt="image-20220818001336447"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818001442026.png" alt="image-20220818001442026"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818001652581.png" alt="image-20220818001652581"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818001855957.png" alt="image-20220818001855957"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818001939928.png" alt="image-20220818001939928"></p><p>保证是可串行化的</p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818002114376.png" alt="image-20220818002114376"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818002142839.png" alt="image-20220818002142839"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818002213622.png" alt="image-20220818002213622"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818002233577.png" alt="image-20220818002233577"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818002249369.png" alt="image-20220818002249369"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818002328295.png" alt="image-20220818002328295"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818002348503.png" alt="image-20220818002348503"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818002445360.png" alt="image-20220818002445360"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818002509176.png" alt="image-20220818002509176"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818002528241.png" alt="image-20220818002528241"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818002624831.png" alt="image-20220818002624831"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818002749517.png" alt="image-20220818002749517"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818002836863.png" alt="image-20220818002836863"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818002922800.png" alt="image-20220818002922800"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818003009897.png" alt="image-20220818003009897"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818003026384.png" alt="image-20220818003026384"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818003219259.png" alt="image-20220818003219259"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818003301718.png" alt="image-20220818003301718"></p><p>释放锁的时机<img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818003335795.png" alt="image-20220818003335795"></p><p>但是降低了并行性</p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818003358429.png" alt="image-20220818003358429"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818003502694.png" alt="image-20220818003502694"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818003630191.png" alt="image-20220818003630191"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818003754268.png" alt="image-20220818003754268"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818003820940.png" alt="image-20220818003820940"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818003957396.png" alt="image-20220818003957396"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818004007154.png" alt="image-20220818004007154"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818004028473.png" alt="image-20220818004028473"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818004109975.png" alt="image-20220818004109975"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818004123871.png" alt="image-20220818004123871"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818004144341.png" alt="image-20220818004144341"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818004213380.png" alt="image-20220818004213380"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818004242214.png" alt="image-20220818004242214"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818004254620.png" alt="image-20220818004254620"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818004322737.png" alt="image-20220818004322737"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818004336511.png" alt="image-20220818004336511"></p><p>检测与恢复</p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818004355439.png" alt="image-20220818004355439"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818004415939.png" alt="image-20220818004415939"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818004457924.png" alt="image-20220818004457924"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818004523465.png" alt="image-20220818004523465"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818004534929.png" alt="image-20220818004534929"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818004647348.png" alt="image-20220818004647348"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818004728641.png" alt="image-20220818004728641"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818004748956.png" alt="image-20220818004748956"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818004811199.png" alt="image-20220818004811199"><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818004841813.png" alt="image-20220818004841813"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818004851224.png" alt="image-20220818004851224"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818004903442.png" alt="image-20220818004903442"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818004955980.png" alt="image-20220818004955980"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818005031425.png" alt="image-20220818005031425"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818005232938.png" alt="image-20220818005232938"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818005245889.png" alt="image-20220818005245889"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818005308701.png" alt="image-20220818005308701"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818005402057.png" alt="image-20220818005402057"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818005427046.png" alt="image-20220818005427046"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818005434464.png" alt="image-20220818005434464"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818005457105.png" alt="image-20220818005457105"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818005512556.png" alt="image-20220818005512556"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818005518999.png" alt="image-20220818005518999"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818005528406.png" alt="image-20220818005528406"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818005536829.png" alt="image-20220818005536829"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818005545027.png" alt="image-20220818005545027"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818005620279.png" alt="image-20220818005620279"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818005710679.png" alt="image-20220818005710679"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818005739805.png" alt="image-20220818005739805"></p><p> <img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818005801554.png" alt="image-20220818005801554"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818005817998.png" alt="image-20220818005817998"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818005849190.png" alt="image-20220818005849190"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818005958761.png" alt="image-20220818005958761"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818010009481.png" alt="image-20220818010009481"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818010101065.png" alt="image-20220818010101065"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818010143738.png" alt="image-20220818010143738"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818010239892.png" alt="image-20220818010239892"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818010303862.png" alt="image-20220818010303862"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818010322929.png" alt="image-20220818010322929"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818010356122.png" alt="image-20220818010356122"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818010417510.png" alt="image-20220818010417510"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818010449958.png" alt="image-20220818010449958"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818095723172.png" alt="image-20220818095723172"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818095744193.png" alt="image-20220818095744193"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818095833739.png" alt="image-20220818095833739"></p><p>​<img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818095913530.png" alt="image-20220818095913530"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818095951019.png" alt="image-20220818095951019"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818100032976.png" alt="image-20220818100032976"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818100105740.png" alt="image-20220818100105740"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818100210020.png" alt="image-20220818100210020"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818100815954.png" alt="image-20220818100815954"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818101041507.png" alt="image-20220818101041507"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818101338838.png" alt="image-20220818101338838"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818101402472.png" alt="image-20220818101402472"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818101508639.png" alt="image-20220818101508639"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818101541747.png" alt="image-20220818101541747"></p><h2 id="基于日志的恢复技术"><a href="#基于日志的恢复技术" class="headerlink" title="基于日志的恢复技术"></a>基于日志的恢复技术</h2><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818101640376.png" alt="image-20220818101640376"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818101704303.png" alt="image-20220818101704303"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818135129195.png" alt="image-20220818135129195"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818101754528.png" alt="image-20220818101754528"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818101822964.png" alt="image-20220818101822964"></p><p>先记日志原则</p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818135316726.png" alt="image-20220818135316726"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818102029591.png" alt="image-20220818102029591"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818102143028.png" alt="image-20220818102143028"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818102239834.png" alt="image-20220818102239834"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818102306157.png" alt="image-20220818102306157"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818102324391.png" alt="image-20220818102324391"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818102420771.png" alt="image-20220818102420771"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818102459547.png" alt="image-20220818102459547"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818102625941.png" alt="image-20220818102625941"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818135858299.png" alt="image-20220818135858299"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818102845777.png" alt="image-20220818102845777"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818103022478.png" alt="image-20220818103022478"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818103050505.png" alt="image-20220818103050505"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818103145342.png" alt="image-20220818103145342"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818103415527.png" alt="image-20220818103415527"></p><p>若系统在T0 commit之前故障，则对T0执行undo操作，恢复之后A  B的值分别为1000 2000</p><p>若系统在T0 commit之后，T1 commit之前故障，对T0执行redo操作，对T1执行undo操作，恢复之后A B C的值分别为950 2050 700</p><p>若系统在T1 commit之后故障，对T0和T1均执行redo操作，恢复之后ABC的值分别为950 2050 600</p><h2 id="基于检查点的恢复："><a href="#基于检查点的恢复：" class="headerlink" title="基于检查点的恢复："></a>基于检查点的恢复：</h2><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818103750560.png" alt="image-20220818103750560"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818103826036.png" alt="image-20220818103826036"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818140428839.png" alt="image-20220818140428839"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818103928910.png" alt="image-20220818103928910"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818104035671.png" alt="image-20220818104035671"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818104054208.png" alt="image-20220818104054208"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818104135198.png" alt="image-20220818104135198"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818104207329.png" alt="image-20220818104207329"></p><p>减少大量日志文件的扫描，提高恢复效率<img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818104329195.png" alt="image-20220818104329195"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818104406588.png" alt="image-20220818104406588"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818104444012.png" alt="image-20220818104444012"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818104509870.png" alt="image-20220818104509870"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818104542579.png" alt="image-20220818104542579"></p><p>​<img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818104618743.png" alt="image-20220818104618743"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818104629233.png" alt="image-20220818104629233"></p><h2 id="其他恢复技术"><a href="#其他恢复技术" class="headerlink" title="其他恢复技术"></a>其他恢复技术</h2><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818104741771.png" alt="image-20220818104741771"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818104818976.png" alt="image-20220818104818976"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818104903699.png" alt="image-20220818104903699"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818104938775.png" alt="image-20220818104938775"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818105010461.png" alt="image-20220818105010461"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818105038416.png" alt="image-20220818105038416"></p><p>​<img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818105111631.png" alt="image-20220818105111631"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818105528600.png" alt="image-20220818105528600"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818105539906.png" alt="image-20220818105539906"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818105547932.png" alt="image-20220818105547932"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818110534812-16607919355041.png" alt="image-20220818110534812"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818110556413.png" alt="image-20220818110556413"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818110736524.png" alt="image-20220818110736524"></p><p>严格两阶段加锁协议的好处和坏处分别是什么？</p><p>好处：级联回滚可以通过严格两阶段封锁协议来避免，这种协议不但要求封锁是两阶段的，而且还要求事务所持有的所有排他锁必须在事务提交后方可释放。这个要求保证未提交事务所写的任何数据在该事务提交之前均以排他模式封锁，从而防止其他事务读取这些数据。</p><p>两阶段封锁的另一种变体是强两阶段封锁协议，它要求在事务提交之前保留所有的锁。</p><p>严格两阶段加锁协议能够避免级联回滚，使得错误恢复变得简单而迅速，缺点是进一步削弱了事务间的并发性，将提交这一行为加入串行的考虑范围内。</p><h2 id="证明两阶段封锁协议可以保证冲突可串行化："><a href="#证明两阶段封锁协议可以保证冲突可串行化：" class="headerlink" title="证明两阶段封锁协议可以保证冲突可串行化："></a>证明两阶段封锁协议可以保证冲突可串行化：</h2><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818112145955.png" alt="image-20220818112145955"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818145413429.png" alt="image-20220818112618789"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818113138855.png" alt="image-20220818113138855"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818113149415.png" alt="image-20220818113149415"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818113156943.png" alt="image-20220818113156943"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC14%E7%AB%A0%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220818145439594.png" alt="image-20220818145439594"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>数据库系统概念题目</title>
    <link href="/2022/08/17/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/"/>
    <url>/2022/08/17/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h1><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/image-20220816204214307-16606537355031.png" alt="image-20220816204214307"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/image-20220816214558553.png" alt="image-20220816214558553"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/image-20220816232850919.png" alt="image-20220816232850919"></p><h1 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h1><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/image-20220816233202879.png" alt="image-20220816233202879"></p><h1 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h1><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/image-20220816234444629.png" alt="image-20220816234444629"></p><h1 id="4"><a href="#4" class="headerlink" title="4."></a>4.</h1><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/image-20220816235137927.png" alt="image-20220816235137927"></p><h1 id="5"><a href="#5" class="headerlink" title="5."></a>5.</h1><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/image-20220816235655619.png" alt="image-20220816235655619"></p><h1 id="6"><a href="#6" class="headerlink" title="6."></a>6.</h1><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/image-20220817000252947.png" alt="image-20220817000252947"></p><h1 id="7"><a href="#7" class="headerlink" title="7."></a>7.</h1><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/image-20220817000642216.png" alt="image-20220817000642216"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/image-20220817000627501.png" alt="image-20220817000627501"></p><h1 id="8"><a href="#8" class="headerlink" title="8."></a>8.</h1><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/image-20220817000841097.png" alt="image-20220817000841097"></p><h1 id="9"><a href="#9" class="headerlink" title="9."></a>9.</h1><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/image-20220817001000893.png" alt="image-20220817001000893"></p><h1 id="10"><a href="#10" class="headerlink" title="10."></a>10.</h1><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/image-20220817001203510.png" alt="image-20220817001203510"></p><h1 id="11"><a href="#11" class="headerlink" title="11."></a>11.</h1><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/image-20220817001755982.png" alt="image-20220817001755982"></p><h1 id="12"><a href="#12" class="headerlink" title="12."></a>12.</h1><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/image-20220817002005611.png" alt="image-20220817002005611"></p><h1 id="13"><a href="#13" class="headerlink" title="13."></a>13.</h1><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/image-20220817134352745.png" alt="image-20220817134352745"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/image-20220817134402922.png" alt="image-20220817134402922"></p><h1 id="14"><a href="#14" class="headerlink" title="14."></a>14.</h1><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/image-20220817135856430.png" alt="image-20220817135856430"></p><h1 id="15"><a href="#15" class="headerlink" title="15."></a>15.</h1><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/image-20220817140943761.png" alt="image-20220817140943761"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/image-20220817141359017.png" alt="image-20220817141359017"></p><p>delete:</p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/image-20220817142255650.png" alt="image-20220817142255650"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/image-20220823140322750.png" alt="image-20220823140322750"></p><h1 id="15-1"><a href="#15-1" class="headerlink" title="15."></a>15.</h1><p><strong>1.</strong> Examine the schedule given below. There are four transactions, T1, T2, T3, and T4. </p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/image-20220817144422988.png" alt="image-20220817144422988"></p><h1 id="16"><a href="#16" class="headerlink" title="16."></a>16.</h1><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/image-20220818114324495.png" alt="image-20220818114324495"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/image-20220818114258443.png" alt="image-20220818114258443"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/image-20220818114346171.png" alt="image-20220818114346171"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/image-20220818114549028.png" alt="image-20220818114549028"><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/image-20220818114824359.png" alt="image-20220818114824359"></p><h1 id="17"><a href="#17" class="headerlink" title="17."></a>17.</h1><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/image-20220818115149616.png" alt="image-20220818115149616"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/image-20220818115211501.png" alt="image-20220818115211501"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/image-20220818115311229.png" alt="image-20220818115311229"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/image-20220818115337782.png" alt="image-20220818115337782"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/image-20220818115503576.png" alt="image-20220818115503576"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/image-20220818115538004.png" alt="image-20220818115538004"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/image-20220818115805470.png" alt="image-20220818115805470"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/image-20220818115855770.png" alt="image-20220818115855770"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/image-20220818134630558.png" alt="image-20220818134630558"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/image-20220818134713877.png" alt="image-20220818134713877"></p><h1 id="18"><a href="#18" class="headerlink" title="18."></a>18.</h1><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/image-20220821151128498.png" alt="image-20220821151128498"></p><p>许多应用选择在数据库之外的文件系统中来存储特别大的对象，比如视频数据。在这种情况下，应用程序可以将文件名存储为数据库中记录的一个属性。</p><p>一些数据库支持文件系统和数据库的集成，以此来满足约束，并且确保访问授权被执行。文件能够通过文件系统接口和数据库SQL接口进行访问。</p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/image-20220821151417490.png" alt="image-20220821151417490"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/image-20220821152054475.png" alt="image-20220821152054475"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/image-20220821152753614.png" alt="image-20220821152753614"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/image-20220821153331302.png" alt="image-20220821153331302"></p><p>Denormalization is a database optimization technique in which we add redundant data to one or more tables. This can help us avoid costly joins in a relational database. Note that <em>denormalization</em> does not mean ‘reversing normalization’ or ‘not to normalize’. It is an optimization technique that is applied after normalization.</p><p>Denormalization, then, strikes a different compromise. Under denormalization, we decide that we’re okay with some redundancy and some extra effort to update the database in order to get the efficiency advantages of fewer joins.</p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/image-20220821153601951.png" alt="image-20220821153601951"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/image-20220821153705919.png" alt="image-20220821153705919"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/image-20220821153920792.png" alt="image-20220821153920792"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/image-20220821154126175.png" alt="image-20220821154126175"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/image-20220821154553416.png" alt="image-20220821154553416"></p><h1 id="19"><a href="#19" class="headerlink" title="19."></a>19.</h1><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/image-20220821155618346.png" alt="image-20220821155618346"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/image-20220821155813828.png" alt="image-20220821155813828"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/image-20220821155943614.png" alt="image-20220821155943614"></p><p>、<img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/image-20220821160045941.png" alt="image-20220821160045941"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/image-20220821160148536.png" alt="image-20220821160148536"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/image-20220821160307665.png" alt="image-20220821160307665"></p><h1 id="20"><a href="#20" class="headerlink" title="20."></a>20.</h1><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/image-20220821160529836.png" alt="image-20220821160529836"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/image-20220821160842188.png" alt="image-20220821160842188"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/image-20220821161423141.png" alt="image-20220821161423141"></p><h1 id="21"><a href="#21" class="headerlink" title="21."></a>21.</h1><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/image-20220821163952061.png" alt="image-20220821163952061"></p><p>注意要用弱实体集：</p><p>​<img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/image-20220821163913043.png" alt="image-20220821163913043"></p><h1 id="22"><a href="#22" class="headerlink" title="22."></a>22.</h1><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/image-20220822092721266.png" alt="image-20220822092721266"></p><h1 id="23"><a href="#23" class="headerlink" title="23."></a>23.</h1><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/image-20220822093842209.png" alt="image-20220822093842209"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/image-20220822094024676.png" alt="image-20220822094024676"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/image-20220822094048604.png" alt="image-20220822094048604"></p><h1 id="24"><a href="#24" class="headerlink" title="24."></a>24.</h1><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/image-20220822094313217.png" alt="image-20220822094313217"></p><h1 id="25"><a href="#25" class="headerlink" title="25."></a>25.</h1><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/image-20220822094623642.png" alt="image-20220822094623642"></p><h1 id="26"><a href="#26" class="headerlink" title="26."></a>26.</h1><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/image-20220822094731882.png" alt="image-20220822094731882"></p><h1 id="27"><a href="#27" class="headerlink" title="27."></a>27.</h1><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/image-20220822094955473.png" alt="image-20220822094955473"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/image-20220822095112670.png" alt="image-20220822095112670"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/image-20220822095141727.png" alt="image-20220822095141727"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/image-20220822095232355.png" alt="image-20220822095232355"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/image-20220822095329304.png" alt="image-20220822095329304"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/image-20220822095418392.png" alt="image-20220822095418392"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/image-20220822095532923.png" alt="image-20220822095532923"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/image-20220822095702798.png" alt="image-20220822095702798"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/image-20220822100131675.png" alt="image-20220822100131675"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/image-20220822100555579.png" alt="image-20220822100555579"></p><h1 id="28"><a href="#28" class="headerlink" title="28."></a>28.</h1><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/image-20220822101027651.png" alt="image-20220822101027651"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/image-20220822102905318.png" alt="image-20220822102905318"></p><p>ER图转化为database schema：</p><p>Product(P_num, Name, Price, Quantity)                   PK:(P_num)</p><p>Service(<strong>P_num</strong>, Type, Charge)                                   PK(P_num, Type), FK(P_num)</p><p>Employee(PID, First_name, Last_name, Home_phone)              PK(PID)</p><p>Customer(CID, First_name, Last_name, Street, Post_code)            PK(CID)</p><p>多值属性可以单独写个表：</p><p><strong>Customer_phone(CID, Phone_number)                           PK(CID, Phone_number), FK(CID)</strong></p><p>Sales(P_num, CID, PID, date, invoice_num)                                  PK(P_num, CID, PID)                   FK:(CID),(PID),(P_num)</p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/image-20220822102916429.png" alt="image-20220822102916429"></p><ul><li>弱实体的表示<ul><li><strong>两层矩形框</strong></li></ul></li><li>标识性联系<ul><li><strong>两层菱形框</strong></li></ul></li></ul><h4 id="弱实体集"><a href="#弱实体集" class="headerlink" title="弱实体集"></a>弱实体集</h4><ul><li>弱实体集（Weak Entity Set）<ul><li>一个实体集的所有属性都不足以形成主码</li></ul></li><li>标识性联系（identifying relationship）<ul><li>弱实体集与其拥有者之间的联系</li><li>弱实体集与强实体集之间是一对多的联系</li></ul></li><li>弱实体集必然存在依赖于强实体集</li><li><strong>存在依赖并不总会导致一个弱实体集</strong>，从属实体集可以有自己的主码</li></ul><h4 id="弱实体集的分辨符"><a href="#弱实体集的分辨符" class="headerlink" title="弱实体集的分辨符"></a>弱实体集的分辨符</h4><ul><li>分辨符（Discriminator)<ul><li>弱实体集中用于区别依赖于某个特定强实体集的属性集合，也称作部分码（partial key)</li></ul></li><li>弱实体集的主码 &#x3D; 强实体集的主码+ 弱实体集的分辨符<ul><li>“还款” 主码＝贷款号＋还款号</li></ul></li></ul><h4 id="弱实体集在-ER-图中的表示"><a href="#弱实体集在-ER-图中的表示" class="headerlink" title="弱实体集在 ER 图中的表示"></a>弱实体集在 ER 图中的表示</h4><ul><li><strong>弱实体集</strong>以<strong>双边框的矩形</strong>表示</li><li><strong>标识性联系</strong>以<strong>双边框的菱形</strong>表示</li><li><strong>弱实体集的分辨符</strong>用<strong>下划虚线</strong>标明</li><li>从联系集用<strong>双线（全部参与）</strong>连接弱实体集，用<strong>箭头（一对多联系）</strong>指向强实体集</li></ul><h4 id="何时引入弱实体集"><a href="#何时引入弱实体集" class="headerlink" title="何时引入弱实体集"></a>何时引入弱实体集</h4><ul><li>作为层次结构的一部分</li><li>实体集的一些多值、复合属性可以抽取出来作为弱实体集<ul><li>贷款的还款属性</li></ul></li><li>如果弱实体集不但参与和强实体集之间的标识性联系，而且参与和其它实体集的联系，或者弱实体集本身含有很多属性，则将其表述为弱实体集</li></ul><h1 id="29"><a href="#29" class="headerlink" title="29."></a>29.</h1><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/image-20220822103913945.png" alt="image-20220822103913945"></p><p>数据库是数据的集成组合，通常大到必须存储在磁盘或磁带等辅助存储设备上。这些数据可以作为操作系统系统文件的集合进行维护，也可以存储在DBMS（数据库管理系统）中。使用DBMS的优点是：</p><ul><li>数据独立性和高效的数据访问</li><li>缩短应用程序开发时间</li><li>数据的一致性和安全性</li><li>数据的管理和权限</li><li>并发访问和故障恢复</li><li>The database stores <strong>structured and related</strong> data in a table format for <strong>easy insertion, deletion, and update</strong> operations. It provides <strong>indexing, sorting, transaction processing(using SQL), and a simple client-server integration mechanism.</strong></li><li>On the other hand, a traditional file control system has <strong>unstructured and unrelated data.</strong> The file system is good if you are searching for files as the operating system indexed those files, but if you want to store data in a <strong>text file</strong> then those data will be unstructured and difficult to fetch which is one of the main disadvantages has over the database system.</li></ul><h1 id="30"><a href="#30" class="headerlink" title="30."></a>30.</h1><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/image-20220822104640579.png" alt="image-20220822104640579"></p><p>什么时候用聚集索引比用稀疏索引要好？</p><p>聚集索引和非聚集索引的根本区别是<strong>表中记录的物理顺序和索引的排列顺序是否一致</strong></p><p><strong>聚集索引</strong>的表中记录的物理顺序与索引的排列顺序一致</p><p>优点是查询速度快，因为一旦具有第一个索引值的记录被找到，具有连续索 引值的记录也一定物理的紧跟其后。</p><p>缺点是对表进行修改速度较慢，这是为了保持表中的记录的物理顺序与索引 的顺序一致，而把记录插入到数据页的相应位置，必须在数据页中进行数据重排，降低了执行速度。在插入新记录时数据文件为了维持 B+Tree 的特性而频繁的 分裂调整，十分低效。</p><p><strong>建议使用聚集索引的场合为：</strong></p><p><strong>A.某列包含了小数目的不同值。</strong></p><p><strong>B.排序和范围查找。 非聚集索引的记录的物理顺序和索引的顺序不一致。</strong></p><p>其他方面的区别：</p><p>1.聚集索引和非聚集索引都采用了 B+树的结构，但非聚集索引的叶子层并 不与实际的数据页相重叠，而采用叶子层包含一个指向表中的记录在数据页中 的指针的方式。<strong>聚集索引的叶节点就是数据节点，而非聚集索引的叶节点仍然 是索引节点。</strong></p><p>2.非聚集索引添加记录时，不会引起数据顺序的重组。</p><p><strong>建议使用非聚集索引的场合为：</strong></p><p>a.此列包含了大数目的不同值；</p><p>b.频繁更新的列</p><p>聚集索引对于那些<strong>经常要搜索范围值的列</strong>特别有效。<u>使用聚集索引找到包含第一个值的行后，便可以确保包含后续索引值的行在物理相邻</u>。例如，如果应用程序执行 的一个查询经常检索某一日期范围内的记录，则使用聚集索引可以迅速找到包含开始日期的行，然后<strong>检索表中所有相邻的行</strong>，直到到达结束日期。这样有助于提高此 类查询的性能。同样，如果对从表中检索的数据进行排序时经常要用到某一列，则可以将该表在该列上聚集（物理排序），<strong>避免每次查询该列时都进行排序</strong>，从而节 省成本。</p><p><strong>聚集索引的使用场合为：</strong><br>　　<strong>a.查询命令的回传结果是以该字段为排序依据的；</strong><br>　　<strong>b.查询的结果返回一个区间的值；</strong><br>　　<strong>c.查询的结果返回某值相同的大量结果集。</strong><br><strong>聚集索引会降低 insert，和update操作的性能，所以，是否使用聚集索引要全面衡量。</strong> </p><p><strong>非聚集索引的使用场合为：</strong><br>　　<strong>a.查询所获数据量较少时；</strong><br>　　<strong>b.某字段中的数据的唯一性比较高时；</strong></p><p><strong>非聚集索引必须是稠密索引</strong></p><p>稠密索引能够比稀疏索引更快的定位一条记录。但是，稀疏索引相比于稠密索引的优点是：它所占空间更小，且插入和删除时的维护开销也小。</p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/SouthEast.png" alt="这里写图片描述"></p><p>稀疏索引：相对于稠密索引，稀疏索引<strong>只为某些搜索码值建立索引记录</strong>；在搜索时，找到其最大的搜索码值小于或等于所查找记录的搜索码值的索引项，然后从该记录开始向后顺序查询直到找到为止。</p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/SouthEast-16611370536543.png" alt="这里写图片描述"></p><h1 id="31"><a href="#31" class="headerlink" title="31."></a>31.</h1><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/image-20220822105803588.png" alt="image-20220822105803588"></p><p>最多在一个文件上创建一个聚集索引。</p><p>有的时候，我们可能不会创建任何聚集索引，因为没有查询需要使用聚集索引来获得足够的性能，并且聚集索引的维护成本比非聚集索引要高。</p><h1 id="32"><a href="#32" class="headerlink" title="32."></a>32.</h1><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/image-20220822110033106.png" alt="image-20220822110033106"></p><p>假设有一个永远不会失败的数据库系统。 此系统是否需要恢复管理器？ 为什么？</p><p>（可能发生的是事务故障，而不是系统故障和介质故障，那么还是需要恢复recovery manager解决事务故障，进行中止事务的回滚）</p><p>即使在这种情况下，恢复管理器也需要执行<strong>中止事务的回滚</strong></p><p><strong>中止事务：</strong>事务在执行过程中发生故障，不能执行完成的事务。可以进行事务回滚，保持数据库的一致性。</p><p><strong>事务回滚：</strong>将中止事务对数据库的更新操作撤销称为事务回滚。</p><p>已提交事务：成功执行完成的事务称为已提交事务。已提交的事务不能进行回滚操作，必须由程序员手工执行一个补偿事务才能撤销提交的事务对数据库的影响。</p><h1 id="33"><a href="#33" class="headerlink" title="33."></a>33.</h1><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/image-20220822110504889.png" alt="image-20220822110504889"></p><ul><li>易失性存储：驻留在易失性存储中的信息通常无法在系统崩溃后幸存下来。 访问易失性存储的速度非常快。</li><li>非易失性存储：驻留在非易失性存储中的信息<strong>在系统崩溃后仍然存在。</strong></li><li>稳定性存储：稳定存储中的信息永不丢失</li></ul><ol><li><strong>系统故障</strong>是指<strong>操作系统或DBMS代码错误、特定类型的硬件错误（如CPU故障）或突然停电等原因</strong>，使得系统要重新启动。发生系统故障时，所有正在运行的事务都非正常终止，内存中数据库缓冲区的信息全部丢失，但外部存储设备上的数据未受影响 [6] 。</li><li><strong>事务故障</strong>是指某个事务在运行过程中由于种种原因未能运行至终止点( COMMIT或ROLLBACK)，发生故障 [6] 。事务故障的常见原因包括输入数据有误、运算溢出、违反了完整性限制、应用程序出错、并行事务发生死锁等 [6] 。</li><li><strong>系统故障</strong>称为“软故障”(SoftCrash)。<strong>介质故障</strong>称为“硬故障”(HardCrash)。介质故障是指由于<strong>磁盘损坏、磁头碰撞、瞬时强磁场干扰</strong>等原因，使得存储在外存中的数据部分丢失或全部丢失 [6] 。</li></ol><h1 id="34"><a href="#34" class="headerlink" title="34."></a>34.</h1><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/image-20220822111828826.png" alt="image-20220822111828826"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/image-20220822111813373.png" alt="image-20220822111813373"></p><p><strong>The keys for the relationships are:</strong></p><p><strong>EditsFor(writer_id)</strong></p><p><strong>WritesFor(magazine_id,writer_id)</strong></p><p>DeliversTo(magazine_id,city_name)</p><p>LivesIn(city_name,subscriber_id)</p><p>Fans(subscriber_id,writer_id)</p><h1 id="35"><a href="#35" class="headerlink" title="35."></a>35.</h1><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/image-20220822131227212.png" alt="image-20220822131227212"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/image-20220822132337250.png" alt="image-20220822132337250"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/image-20220822133301979.png" alt="image-20220822133301979"></p><h1 id="36"><a href="#36" class="headerlink" title="36."></a>36.</h1><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/image-20220822134345629.png" alt="image-20220822134345629"></p><h1 id="37"><a href="#37" class="headerlink" title="37."></a>37.</h1><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/image-20220822134855513.png" alt="image-20220822134855513"></p><h1 id="38"><a href="#38" class="headerlink" title="38."></a>38.</h1><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/image-20220822135626171.png" alt="image-20220822135626171"></p><h1 id="39"><a href="#39" class="headerlink" title="39."></a>39.</h1><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/image-20220822140136208.png" alt="image-20220822140136208"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/image-20220822140152965.png" alt="image-20220822140152965"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/image-20220822140736739.png" alt="image-20220822140736739"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/image-20220822140757526.png" alt="image-20220822140757526"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/image-20220822141518344.png" alt="image-20220822141518344"></p><h1 id="40"><a href="#40" class="headerlink" title="40."></a>40.</h1><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/image-20220822141732710.png" alt="image-20220822141732710"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/image-20220822143503719.png" alt="image-20220822143503719"></p><h1 id="41"><a href="#41" class="headerlink" title="41."></a>41.</h1><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/image-20220822144045830.png" alt="image-20220822144045830"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E9%A2%98%E7%9B%AE/image-20220822144757452.png" alt="image-20220822144757452"></p>]]></content>
    
    
    <categories>
      
      <category>数据库系统概念</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>数据库系统概念</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据库系统概念 第13章 事务管理</title>
    <link href="/2022/08/16/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC13%E7%AB%A0%20%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86/"/>
    <url>/2022/08/16/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC13%E7%AB%A0%20%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="1-事务的概念"><a href="#1-事务的概念" class="headerlink" title="1.事务的概念"></a>1.事务的概念</h1><ol><li><p>一致性</p><p>保证单个事务的一致性是编写该事务的应用编程人员的责任</p></li><li><p>原子性</p><p>保证原子性是数据库系统的责任，是数据库恢复系统的责任</p></li><li><p>持久性</p><p>数据库恢复系统应保持持久性</p></li><li><p>隔离性</p><p>确保隔离性是数据库系统中称作并发控制系统的部件的责任</p></li></ol><h1 id="2-存储器结构"><a href="#2-存储器结构" class="headerlink" title="2.存储器结构"></a>2.存储器结构</h1><ol><li>易失性存储器</li><li>非易失性存储器</li><li>稳定存储器</li></ol><p>为了保持事务的持久性，需要将它的修改写入稳定存储器。</p><p>为了保持事务的原子性，在对磁盘上的数据库进行任何更改之前需要先将日志记录写入稳定存储器。</p><p>一个系统所能保证的持久性和原子性取决于它的稳定存储器的实现到底有多么稳定。</p><h1 id="3-事务的原子性和持久性"><a href="#3-事务的原子性和持久性" class="headerlink" title="3.事务的原子性和持久性"></a>3.事务的原子性和持久性</h1><ol><li><p>事务并非总能成功地执行。这种事务被称为<strong>中止</strong></p></li><li><p>一旦中止的事务造成的变更已被撤销，我们就说该事务<strong>已回滚</strong></p></li><li><p>管理事务中止是<strong>恢复机制</strong>职责的一部分，这么做的典型方式是维护一个<strong>日志</strong></p></li><li><p>对日志的维护提供了通过重做修改来保证原子性和持久性的可能，以及在事务执行期间发生故障的情况下通过撤销修改来保证原子性的可能</p></li><li><p>撤销已提交事务所造成的影响的唯一方式是执行一个<strong>补偿事务</strong></p></li><li><p>编写和执行补偿事务的责任就留给了<strong>用户</strong>，而不是通过数据库系统来处理</p></li><li><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC13%E7%AB%A0%20%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86/image-20220816132043035.png" alt="image-20220816132043035"></p><p>在系统判定一个事务不能继续进行其正常执行后（例如，由于硬件或逻辑错误），该事务就进入失效状态。这种事务必须回滚。这样，该事务就进入中止状态。此时系统有两种选择：</p><ul><li>重启事务</li><li>杀死事务</li></ul></li></ol><h1 id="4-事务的隔离性"><a href="#4-事务的隔离性" class="headerlink" title="4.事务的隔离性"></a>4.事务的隔离性</h1><ol><li><p>对于允许并发有两条理由：</p><ul><li><strong>提高吞吐量和资源利用率</strong>：吞吐量：即在一段给定时间内所执行的事务的数量；处理器与磁盘的利用率也提高了，即处理器与磁盘花在空闲上或没有执行任何有用的工作上的时间减少了</li><li><strong>减少等待时间</strong>：还减少了平均响应时间：一个事务从它提交到完成所需的平均时间</li></ul></li><li><p>当多个事务并发运行时，<strong>隔离性</strong>可能被违背，这导致即使每个单独的事务都是正确的，但数据的<strong>一致性</strong>也可能被破坏</p></li><li><p>数据库系统必须控制<strong>并发事务之间的交互</strong>，以防止它们破坏数据库的<strong>一致性</strong>；系统通过称为<strong>并发控制机制</strong>的一系列机制来做到这一点。</p></li><li><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC13%E7%AB%A0%20%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86/image-20220816134543819.png" alt="image-20220816134543819"></p><p>上图的执行顺序称为调度，他们表示指令在系统中执行的时间顺序</p></li><li><p>并行调度：</p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC13%E7%AB%A0%20%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86/image-20220816134928606.png" alt="image-20220816134928606"></p><p>如果并发执行的控制完全由操作系统负责，那么许多调度都是可能的，包括像刚才描述的那种使数据库处于不一致状态的调度也是可能的。<strong>保证所执行的任何调度都能使数据库处于一致状态性状态是数据库系统的任务。</strong>数据库系统中负责完成此项任务的是<strong>并发控制部件</strong>。</p></li></ol><h1 id="5-可串行化"><a href="#5-可串行化" class="headerlink" title="5.可串行化"></a>5.可串行化</h1><ol><li><p>冲突可串行化（conflict serializability)</p><p>只处理read和write指令，有以下四种情况:</p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC13%E7%AB%A0%20%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86/image-20220816140032933.png" alt="image-20220816140032933"></p><p>因此，如果I和J是由不同事务在相同数据项上执行的操作，并且其中至少有一条指令是write操作，那么我们说I与J是冲突的。</p></li><li><p>如果调度S可以经过一系列非冲突指令的交换而转换称调度$S’$，则称S与S’是冲突等价的</p></li><li><p>若一个调度S与一个串行调度是冲突等价的，则称调度S是冲突可串行化的。</p></li></ol><h1 id="6-事务的隔离性和原子性"><a href="#6-事务的隔离性和原子性" class="headerlink" title="6.事务的隔离性和原子性"></a>6.事务的隔离性和原子性</h1><h2 id="1-可恢复调度"><a href="#1-可恢复调度" class="headerlink" title="1.可恢复调度"></a>1.可恢复调度</h2><ul><li>可恢复调度是这样的调度；对于每队事务$T_i和T_j$,如果$T_j$<strong>读取</strong>了由$T_i$之前所<strong>写过</strong>的数据项，则$T_i$的提交操作应出现在$T_j$的提交操作之前</li></ul><h2 id="2-无级联调度"><a href="#2-无级联调度" class="headerlink" title="2.无级联调度"></a>2.无级联调度</h2><ul><li>因单个事务失效而导致一系列事务回滚的现象称为级联回滚</li><li>无级联调度是这样一种调度：对于每对事务Ti和Tj都满足如果Tj读取了先前由Ti所写的一个数据项，则Ti的提交操作必须出现在Tj这一读操作之前。</li></ul><h1 id="7-事务的隔离性级别"><a href="#7-事务的隔离性级别" class="headerlink" title="7.事务的隔离性级别"></a>7.事务的隔离性级别</h1><ol><li><p>由SQL标准规定的隔离性级别如下所示：</p><ul><li><strong>可串行化：</strong>通常保证可串行化的程序。</li><li><strong>可重复读：</strong>只允许读取已提交的数据，并进一步要求在一个事务两次读取一个数据项期间，其他事务不得更新该数据项。但是，该事务对于其他事务来说可能不是可串行化的。</li><li><strong>已提交读：</strong>只允许读取已提交数据，但并不要求可重复读</li><li><strong>未提交读：</strong>允许读取未提交数据，这是SQL允许的最低隔离性级别。</li></ul></li><li><p>显式地指定隔离级别：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">set</span> transaction isolation level serializable<br></code></pre></td></tr></table></figure><p>oracle:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> session <span class="hljs-keyword">set</span> isolation_level<span class="hljs-operator">=</span>serializable<br></code></pre></td></tr></table></figure></li></ol><h1 id="8-总结"><a href="#8-总结" class="headerlink" title="8.总结"></a>8.总结</h1><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC13%E7%AB%A0%20%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86/image-20220816151447139.png" alt="image-20220816151447139"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC13%E7%AB%A0%20%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86/image-20220816151508388.png" alt="image-20220816151508388"></p><h1 id="9-作业"><a href="#9-作业" class="headerlink" title="9.作业"></a>9.作业</h1><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC13%E7%AB%A0%20%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86/image-20220816152508626.png" alt="image-20220816152508626"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC13%E7%AB%A0%20%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86/image-20220816152518657.png" alt="image-20220816152518657"></p><p>存在对应于该优先图的可串行化调度，因为该图无环，通过拓扑排序得到一个可能的调度：T1,T2,T3,T4,T5。</p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC13%E7%AB%A0%20%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86/image-20220816153854602.png" alt="image-20220816153854602"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC13%E7%AB%A0%20%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86/image-20220816153958457.png" alt="image-20220816153958457"></p><p><strong>一致性</strong>（consistency）：以隔离方式执行事务，（即，没有其他事务的并发执行）以保持数据库的一致性。确保单个事务的一致性是编写该事务的应用编程人员的责任</p><p><strong>原子性</strong>(Atomicity)：事务的所有操作在数据库中要么全部正确反映出来，要么完全不反映。如果一个事务从未开始或保证完成，那么除了在该事务的执行期间，<strong>不一致状态</strong>应该是不可见的，而这是需要原子性的原因，如果有原子性，那么事务的所有操作要么在数据库中完全反映出来，要么完全不反映。保证原子性是数据库的责任。</p><p><strong>隔离性</strong>(isolation)：尽管多个事务可能并发执行，但系统保证，对于任何一对事务Ti和Tj,在Ti看来，Tj或者在Ti开始之前已经完成执行，或者在Ti完成之后开始执行。因此每个事务都感觉不到系统中有其他事务在并发地执行。事务的隔离性确保事务并发执行所得到的系统状态与这些事务以某种次序一次执行一个后所得到的状态是等价的。确保隔离性是数据库系统中称作并发控制系统的部件的责任。</p><p><strong>持久性</strong>(durability)：一个事务完成成功后，它对数据库的改变必须是永久的，即使出现系统故障</p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC13%E7%AB%A0%20%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86/image-20220816161842701.png" alt="image-20220816161842701"></p><p>不存在冲突可串的并行调度．假设存在一个冲突可串的并行调度，则 $T_{14}$ 的第一条 read(B) 在 $T_{13}$ 最后的 write(B) 之前（不可能在之后，否则就是串行执行），因此 $T_{13}$无论对 B 是否 产生修改，其效果都不会被 $T_{14}$ 发现，必然得到 A &#x3D; 1．同理对 $T_{13}$分析可知必然有 B &#x3D; 1， 这与 a. 中分析串行程序的结论矛盾，因此所有并行调度都不是冲突可串的</p>]]></content>
    
    
    <categories>
      
      <category>数据库系统概念</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>数据库系统概念</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>并行程序设计题目</title>
    <link href="/2022/08/14/%E5%B9%B6%E8%A1%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E9%A2%98%E7%9B%AE/"/>
    <url>/2022/08/14/%E5%B9%B6%E8%A1%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E9%A2%98%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h1><p>Cache映射的三种方式的原理：</p><p><img src="/images/%E5%B9%B6%E8%A1%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E9%A2%98%E7%9B%AE/image-20220814222917623.png" alt="image-20220814222917623"></p><h1 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h1><p>简述指令级并行的流水线多发射机制及其两种多发射方法：</p><p>流水线通过将<strong>功能分成多个单独的硬件或者功能单元</strong>，并把它们按<strong>顺序串接</strong>来提高性能。而多发射处理器通过<strong>复制功能单元</strong>来<strong>同时</strong>执行程序中的<strong>不同指令</strong>。</p><p>如果功能单元是在<strong>编译</strong>时调度的，则称该多发射系统使用<strong>静态多发射</strong>；       </p><p>如果是在<strong>运行时间</strong>调度的，则称该多发射系统使用<strong>动态多发射</strong>，一个支持动态多发射的处理器称为<strong>超标量</strong>（superscalar）</p><p><img src="/images/%E5%B9%B6%E8%A1%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E9%A2%98%E7%9B%AE/image-20220814223535849.png" alt="image-20220814223535849"></p><h1 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h1><p><img src="/images/%E5%B9%B6%E8%A1%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E9%A2%98%E7%9B%AE/image-20220814225537759.png" alt="image-20220814225537759"></p><p>数据并行：通过将数据分配给多个处理器，然后让各个处理器使用<strong>相同的指令</strong>来操作数据子集实现并行化。这种并行称为数据并行</p><p>任务并行：如果一个程序是通过<strong>将任务划分</strong>，<strong>分给各个进程或线程来实现并行</strong>，则称它是任务并行。<strong>SPMD也能实现任务并行性。</strong>      </p><h1 id="4"><a href="#4" class="headerlink" title="4."></a>4.</h1><p><img src="/images/%E5%B9%B6%E8%A1%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E9%A2%98%E7%9B%AE/image-20220815100735736.png" alt="image-20220815100735736"></p><h1 id="5"><a href="#5" class="headerlink" title="5."></a>5.</h1><p><img src="/images/%E5%B9%B6%E8%A1%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E9%A2%98%E7%9B%AE/image-20220815102211890.png" alt="image-20220815102211890"></p><h1 id="6"><a href="#6" class="headerlink" title="6."></a>6.</h1><p><img src="/images/%E5%B9%B6%E8%A1%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E9%A2%98%E7%9B%AE/image-20220815102855679.png" alt="image-20220815102855679"></p><h1 id="7"><a href="#7" class="headerlink" title="7."></a>7.</h1><p><img src="/images/%E5%B9%B6%E8%A1%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E9%A2%98%E7%9B%AE/image-20220819133157573.png" alt="image-20220819133157573"></p><p><img src="/images/%E5%B9%B6%E8%A1%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E9%A2%98%E7%9B%AE/image-20220819133457560.png" alt="image-20220819133457560"></p><h1 id="8"><a href="#8" class="headerlink" title="8."></a>8.</h1><p><img src="/images/%E5%B9%B6%E8%A1%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E9%A2%98%E7%9B%AE/image-20220819133821198.png" alt="image-20220819133821198"></p><p><img src="/images/%E5%B9%B6%E8%A1%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E9%A2%98%E7%9B%AE/image-20220819133917797.png" alt="image-20220819133917797"></p><h1 id="9"><a href="#9" class="headerlink" title="9."></a>9.</h1><p><img src="/images/%E5%B9%B6%E8%A1%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E9%A2%98%E7%9B%AE/image-20220819134503229.png" alt="image-20220819134503229"></p><p><img src="/images/%E5%B9%B6%E8%A1%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E9%A2%98%E7%9B%AE/image-20220819135925642.png" alt="image-20220819135925642"></p><p><img src="/images/%E5%B9%B6%E8%A1%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E9%A2%98%E7%9B%AE/image-20220819135108747.png" alt="image-20220819135108747"></p><p><img src="/images/%E5%B9%B6%E8%A1%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E9%A2%98%E7%9B%AE/image-20220819135237877.png" alt="image-20220819135237877"></p><h1 id="10"><a href="#10" class="headerlink" title="10."></a>10.</h1><p><img src="/images/%E5%B9%B6%E8%A1%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E9%A2%98%E7%9B%AE/image-20220819140116406.png" alt="image-20220819140116406"></p><h1 id="11"><a href="#11" class="headerlink" title="11."></a>11.</h1><p><img src="/images/%E5%B9%B6%E8%A1%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E9%A2%98%E7%9B%AE/image-20220819141420982.png" alt="image-20220819141420982"></p><h1 id="12"><a href="#12" class="headerlink" title="12."></a>12.</h1><p><img src="/images/%E5%B9%B6%E8%A1%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E9%A2%98%E7%9B%AE/image-20220819142119423.png" alt="image-20220819142119423"></p><h1 id="13"><a href="#13" class="headerlink" title="13."></a>13.</h1><p><img src="/images/%E5%B9%B6%E8%A1%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E9%A2%98%E7%9B%AE/image-20220819142920292.png" alt="image-20220819142920292"></p><h1 id="14"><a href="#14" class="headerlink" title="14."></a>14.</h1><p><img src="/images/%E5%B9%B6%E8%A1%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E9%A2%98%E7%9B%AE/image-20220819151319393.png" alt="image-20220819151319393"></p><p><img src="/images/%E5%B9%B6%E8%A1%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E9%A2%98%E7%9B%AE/image-20220819144948601.png" alt="image-20220819144948601"></p><p><img src="/images/%E5%B9%B6%E8%A1%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E9%A2%98%E7%9B%AE/image-20220819145309012.png" alt="image-20220819145309012"></p><p><img src="/images/%E5%B9%B6%E8%A1%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E9%A2%98%E7%9B%AE/image-20220819145819059.png" alt="image-20220819145819059"></p><p><img src="/images/%E5%B9%B6%E8%A1%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E9%A2%98%E7%9B%AE/image-20220819145926018.png" alt="image-20220819145926018"></p><p>send_count参数表示的是发送到每个进程的数据量</p><p><img src="/images/%E5%B9%B6%E8%A1%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E9%A2%98%E7%9B%AE/image-20220819150142248.png" alt="image-20220819150142248"></p><p><img src="/images/%E5%B9%B6%E8%A1%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E9%A2%98%E7%9B%AE/image-20220819150601775.png" alt="image-20220819150601775"></p><p><img src="/images/%E5%B9%B6%E8%A1%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E9%A2%98%E7%9B%AE/image-20220819150633671.png" alt="image-20220819150633671"></p><p><img src="/images/%E5%B9%B6%E8%A1%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E9%A2%98%E7%9B%AE/image-20220819150649456.png" alt="image-20220819150649456"></p><p><img src="/images/%E5%B9%B6%E8%A1%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E9%A2%98%E7%9B%AE/image-20220819150703589.png" alt="image-20220819150703589"></p><p><img src="/images/%E5%B9%B6%E8%A1%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E9%A2%98%E7%9B%AE/image-20220819150743140.png" alt="image-20220819150743140"></p><p><img src="/images/%E5%B9%B6%E8%A1%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E9%A2%98%E7%9B%AE/image-20220819150848001.png" alt="image-20220819150848001"></p><p><img src="/images/%E5%B9%B6%E8%A1%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E9%A2%98%E7%9B%AE/image-20220819150806887.png" alt="image-20220819150806887"></p><p><img src="/images/%E5%B9%B6%E8%A1%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E9%A2%98%E7%9B%AE/image-20220819150830779.png" alt="image-20220819150830779"></p><h1 id="16"><a href="#16" class="headerlink" title="16."></a>16.</h1>]]></content>
    
    
    <categories>
      
      <category>并行程序设计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>题目</tag>
      
      <tag>并行程序设计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据库系统概念 第12章 查询处理和查询优化</title>
    <link href="/2022/08/13/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC12%E7%AB%A0%20%E6%9F%A5%E8%AF%A2%E5%A4%84%E7%90%86%E5%92%8C%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/"/>
    <url>/2022/08/13/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC12%E7%AB%A0%20%E6%9F%A5%E8%AF%A2%E5%A4%84%E7%90%86%E5%92%8C%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h1 id="一-概述"><a href="#一-概述" class="headerlink" title="一.概述"></a>一.概述</h1><ol><li><p>查询处理的步骤</p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC12%E7%AB%A0%20%E6%9F%A5%E8%AF%A2%E5%A4%84%E7%90%86%E5%92%8C%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/image-20220807164244838.png" alt="image-20220807164244838"></p></li><li><p>在查询处理开始之前，系统必须将查询语句翻译成可使用的形式，诸如SQL这样的语言并不适合于查询的系统内部表示。因此，系统在查询处理中必须采取的第一步操作是把查询语句翻译成系统的内部表示形式，该翻译过程类似于编译器的语法分析器所做的工作。</p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC12%E7%AB%A0%20%E6%9F%A5%E8%AF%A2%E5%A4%84%E7%90%86%E5%92%8C%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/image-20220807165309700.png" alt="image-20220807165309700"></p></li><li><p>优化器</p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC12%E7%AB%A0%20%E6%9F%A5%E8%AF%A2%E5%A4%84%E7%90%86%E5%92%8C%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/image-20220807165505462.png" alt="image-20220807165505462"></p></li><li><p>优化器是选择更加高效的执行计划</p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC12%E7%AB%A0%20%E6%9F%A5%E8%AF%A2%E5%A4%84%E7%90%86%E5%92%8C%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/image-20220807165709308.png" alt="image-20220807165709308"></p></li><li><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC12%E7%AB%A0%20%E6%9F%A5%E8%AF%A2%E5%A4%84%E7%90%86%E5%92%8C%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/image-20220807165918465.png" alt="image-20220807165918465"></p></li><li><p>查询优化：在所有等价的执行计划中选择代价最低的</p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC12%E7%AB%A0%20%E6%9F%A5%E8%AF%A2%E5%A4%84%E7%90%86%E5%92%8C%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/image-20220807170213948.png" alt="image-20220807170213948"></p></li><li><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC12%E7%AB%A0%20%E6%9F%A5%E8%AF%A2%E5%A4%84%E7%90%86%E5%92%8C%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/image-20220807170526201.png" alt="image-20220807170526201"></p></li><li><p>带有“如何执行”注释的关系代数运算称为“执行原语”。用于执行一个查询的原语操作序列称为“查询执行计划”（query-execution plan)，如下图展示了一个执行计划，图中为选择运算指定了一个特定的索引，“查询执行引擎”（query-execution engine)接收一个查询执行计划，执行该计划并把结果返回给查询。</p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC12%E7%AB%A0%20%E6%9F%A5%E8%AF%A2%E5%A4%84%E7%90%86%E5%92%8C%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/image-20220807164937864.png" alt="image-20220807164937864"></p></li></ol><h1 id="二-查询代价的度量-measures-of-query-cost"><a href="#二-查询代价的度量-measures-of-query-cost" class="headerlink" title="二.查询代价的度量(measures of query cost)"></a>二.查询代价的度量(measures of query cost)</h1><ol><li>对于一个查询可能存在<strong>多种执行计划</strong>，重要的是能够根据他们的估计代价来选择不同的备选方案，并选择最佳的方案，为此，我们必须<strong>估计单个运算的代价，并结合它们来得到一个查询计划的代价</strong></li><li><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC12%E7%AB%A0%20%E6%9F%A5%E8%AF%A2%E5%A4%84%E7%90%86%E5%92%8C%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/image-20220807172247225.png" alt="image-20220807172247225"></li><li><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC12%E7%AB%A0%20%E6%9F%A5%E8%AF%A2%E5%A4%84%E7%90%86%E5%92%8C%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/image-20220807172544272.png" alt="image-20220807172544272"></li><li><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC12%E7%AB%A0%20%E6%9F%A5%E8%AF%A2%E5%A4%84%E7%90%86%E5%92%8C%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/image-20220807172816726.png" alt="image-20220807172816726"></li></ol><h1 id="三-关系代数运算的执行"><a href="#三-关系代数运算的执行" class="headerlink" title="三.关系代数运算的执行"></a>三.关系代数运算的执行</h1><h2 id="1-选择运算-selection-operation"><a href="#1-选择运算-selection-operation" class="headerlink" title="1.选择运算(selection operation)"></a>1.选择运算(selection operation)</h2><h3 id="（1）文件扫描的使用和索引的选择"><a href="#（1）文件扫描的使用和索引的选择" class="headerlink" title="（1）文件扫描的使用和索引的选择"></a>（1）文件扫描的使用和索引的选择</h3><p>在查询处理中，文件扫描是数据访问的最低级别的运算，文件扫描是定位和检索满足选择条件的记录的搜索算法，在关系系统中，若关系保存在一个单独的专用文件中，则采用文件扫描就可以读取整个关系。</p><p>索引结构称为<strong>存取路径</strong>，因为他们提供了定位和存取数据的一条路径。</p><p>使用索引的算法称为<strong>索引扫描</strong></p><p>考虑一个关系上的选择运算，该选择的所有元组都共同存储在一个文件中。执行选择最直接的方式是：A1线性搜索</p><ul><li><p>A1线性搜索</p><p>在线性搜索中，系统扫描每一个文件块，并对所有记录都进行测试，看他们是否满足选择条件。需做一次初始搜索来访问文件的第一个块。</p><p>虽然线性搜索算法比用于实现选择运算的其他算法速度要慢，但它可用于任何文件，而不用管文件的顺序，索引的可用性，以及选择运算的性质。我们将要学习的其他算法并不能适用于所有情况，但在可用的情况下它们一般都比线性搜索要快。</p></li><li><p>A2  B+树<strong>聚集索引</strong>，码上的等值比较(primary key on candidate key ,equality)</p><p>利用主索引，码属性的等值比较，通过使用该索引检索出满足相应等值条件的单条记录</p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC12%E7%AB%A0%20%E6%9F%A5%E8%AF%A2%E5%A4%84%E7%90%86%E5%92%8C%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/image-20220812111425489.png" alt="image-20220812111425489"></p></li><li><p>A3 B+树<strong>聚集索引</strong>，非码上的等值比较(primary index ,on non-candidate key,equality)</p><p>当选择条件指定的是一个基于非码属性A的等值比较时，我们可以通过使用聚集索引来检索到<strong>多条记录</strong>。与前一种情况唯一不同的是，在这种情况下可能需要获取多条记录。然而，因为文件是依据搜索码进行排序的，所以这些记录在文件中必然是<strong>连续存储</strong>的。Retrieve multiple records-duplicate</p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC12%E7%AB%A0%20%E6%9F%A5%E8%AF%A2%E5%A4%84%E7%90%86%E5%92%8C%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/image-20220812112735068.png" alt="image-20220812112735068"></p></li><li><p>A4  B+树<strong>辅助索引</strong>，等值比较(<strong>equality on search-key of secondary index</strong>)</p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC12%E7%AB%A0%20%E6%9F%A5%E8%AF%A2%E5%A4%84%E7%90%86%E5%92%8C%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/image-20220812113846591.png" alt="image-20220812113846591"></p></li><li><p>A5聚集索引，比较</p></li><li><p>A6辅助索引，比较</p></li></ul><ol><li>下面是一些常见的选择运算所需要的时间开销，这里我们假设一个文件中有$b_r$个磁盘块，如果选择操作使用了B+树索引，那么$h_i$代表树的高度<ul><li>线性搜索：线性搜索就是搜索整个文件中的block，找到所有满足条件的。它效率低但是大部分类型的搜索它都能工作</li><li>索引搜索：索引定义了一条从根到所搜索记录的一条路径，这条路径很短，只需要几次磁盘访问。并且大部分数据库系统将索引树的所有叶子节点放到内存的缓存中，这把寻找路径工作的磁盘访问次数降低到了一次，因为相比叶子节点，非叶子节点在所有节点中的占比通常不超过1%(下一层节点数相比上一层节点数有指数级增加，而B+树的)</li></ul></li></ol><h3 id="（2）涉及比较的选择"><a href="#（2）涉及比较的选择" class="headerlink" title="（2）涉及比较的选择"></a>（2）涉及比较的选择</h3><ol><li><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC12%E7%AB%A0%20%E6%9F%A5%E8%AF%A2%E5%A4%84%E7%90%86%E5%92%8C%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/image-20220812115423308.png" alt="image-20220812115423308"></p><p>对于A≥v，我们在<strong>索引</strong>中寻找值v，以检索出文件中满足A≥v的首个元组。从该元组开始直到文件末尾进行一次文件扫描就可返回满足该条件的所有元组（代价类似于A3）</p><p>对于A&lt;v,我们只是从文件头开始使用简单的文件扫描，并且一直到遇上（但不包含）首个满足A&gt;v的元组为止，在这种情况下，索引没有什么用处</p></li><li><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC12%E7%AB%A0%20%E6%9F%A5%E8%AF%A2%E5%A4%84%E7%90%86%E5%92%8C%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/image-20220812143902204.png" alt="image-20220812143902204"></p><p>辅助索引提供了指向记录的指针，但为了得到实际的记录，我们需要通过使用指针来获取记录。由于连续的记录可能位于不同的磁盘块上，因此<strong>在这一步每获取一条记录都可能需要一次IO操作</strong>。和前面一样，每次IO操作都需要一次磁盘寻道和一次块传输。如果检索到的记录的数量很多，使<strong>用辅助索引的代价甚至可能比使用线性搜索还要大。</strong>因此，<strong>辅助索引应该仅在选择得到的记录非常少时使用</strong>。</p></li><li><p>复杂选择的实现</p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC12%E7%AB%A0%20%E6%9F%A5%E8%AF%A2%E5%A4%84%E7%90%86%E5%92%8C%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/image-20220812144708962.png" alt="image-20220812144708962"></p><ul><li><p>A7(conjunctive selection using one index使用一个索引的合取选择)</p><p>首先判断对于其中<strong>一个简单条件</strong>中的一个属性是否存在一条存取路径可用。若存在，则可以用A2-A6中的一种选择算法来检索满足该条件的记录。然后在<strong>内存缓冲区</strong>中，通过测试每条检索到的记录是否满足其余的简单条件来最终完成这个运算</p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC12%E7%AB%A0%20%E6%9F%A5%E8%AF%A2%E5%A4%84%E7%90%86%E5%92%8C%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/image-20220812145812393.png" alt="image-20220812145812393"></p></li><li><p>A8(conjunctive selection using composite index使用组合索引的合取选择)</p><p>对于某些合取选择可能可以使用合适的组合索引(composite index,即多个属性上的一个索引)。如果选择指定的是多个或多个属性上的等值条件，并且在这些属性字段的组合上又存在组合索引，则可以直接搜索该索引。索引的类型将决定使用A2，A3或A4算法中的哪一个。</p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC12%E7%AB%A0%20%E6%9F%A5%E8%AF%A2%E5%A4%84%E7%90%86%E5%92%8C%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/image-20220812151023187.png" alt="image-20220812151023187"></p></li><li><p>A9(conjunctive selection by insertion of identifiers使用标识交集的合取选择)</p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC12%E7%AB%A0%20%E6%9F%A5%E8%AF%A2%E5%A4%84%E7%90%86%E5%92%8C%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/image-20220812151754902.png" alt="image-20220812151754902"></p></li><li><p>A10(disjunctive selection by union of identifiers使用标识并集的析取选择)</p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC12%E7%AB%A0%20%E6%9F%A5%E8%AF%A2%E5%A4%84%E7%90%86%E5%92%8C%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/image-20220812152149785.png" alt="image-20220812152149785"></p></li></ul></li></ol><h2 id="2-排序-sorting"><a href="#2-排序-sorting" class="headerlink" title="2.排序(sorting)"></a>2.排序(sorting)</h2><p>数据排序在数据库系统中发挥着重要的作用，原因有两个：</p><ul><li>首先，SQL查询会指明对输出进行排序</li><li>对于查询处理而言同等重要的是，有几种关系运算，比如连接运算，如果对输入关系先进行排序，能够得到高效的实现</li></ul><p>We may build an index on the relation,and then <strong>use the index to read the relation in sorted order</strong> .But this is only <strong>logically</strong> ,not <strong>physically</strong> ordered the relation,and may lead to <strong>one disk block access for each tuple.</strong></p><p>由于记录数量可能比磁盘块的数量多得多，因此这样做的代价会非常昂贵。出于这样的原因，有时需要在物理上对记录进行排序</p><ul><li><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC12%E7%AB%A0%20%E6%9F%A5%E8%AF%A2%E5%A4%84%E7%90%86%E5%92%8C%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/image-20220812153204183.png" alt="image-20220812153204183"></li></ul><h3 id="（1）外排序-归并算法"><a href="#（1）外排序-归并算法" class="headerlink" title="（1）外排序-归并算法"></a>（1）外排序-归并算法</h3><ol><li><p>在第一阶段，创建好多个排好序的归并段（run），每个归并段都是排过序的，但仅包含关系的部分记录</p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC12%E7%AB%A0%20%E6%9F%A5%E8%AF%A2%E5%A4%84%E7%90%86%E5%92%8C%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/image-20220812154150549.png" alt="image-20220812154150549"></p></li><li><p>在第二阶段，对归并段进行归并。暂且假定归并段的总数N小于M，因此我们可以为每一个归并段分配一个块，并且还有剩下的空间能为输出保留一个块：</p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC12%E7%AB%A0%20%E6%9F%A5%E8%AF%A2%E5%A4%84%E7%90%86%E5%92%8C%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/image-20220812155305182.png" alt="image-20220812155305182"></p></li><li><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC12%E7%AB%A0%20%E6%9F%A5%E8%AF%A2%E5%A4%84%E7%90%86%E5%92%8C%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/image-20220812160637621.png" alt="image-20220812160637621"></p></li><li><p>初始趟（pass）以如下方式工作：它对接下来的M-1个归并段进行合并（如前面第2项所述以得到单个归并段作为下一趟（pass）的输入。然后，它对接下来的M-1个归并段进行类似的合并，如此下去，直到它处理完所有的初始归并段为止。此时，归并段的数量减少为原来的1&#x2F;(M-1)。如果归并后的归并段数量仍大于或等于M，则以第一趟创建的归并段作为输入进行下一趟输入。每一趟归并后归并段的数量均减少为原来的1&#x2F;(M-1)。如有需要，归并段将不断重复，直到归并段数量小于M为止，然后最后一趟排序输出</p></li><li><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC12%E7%AB%A0%20%E6%9F%A5%E8%AF%A2%E5%A4%84%E7%90%86%E5%92%8C%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/image-20220812161404335.png" alt="image-20220812161404335"></p></li></ol><h3 id="（2）外排序-归并的代价分析"><a href="#（2）外排序-归并的代价分析" class="headerlink" title="（2）外排序-归并的代价分析"></a>（2）外排序-归并的代价分析</h3><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC12%E7%AB%A0%20%E6%9F%A5%E8%AF%A2%E5%A4%84%E7%90%86%E5%92%8C%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/image-20220812184136881.png" alt="image-20220812184136881"></p><h2 id="3-连接运算-join-operation"><a href="#3-连接运算-join-operation" class="headerlink" title="3.连接运算(join operation)"></a>3.连接运算(join operation)</h2><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC12%E7%AB%A0%20%E6%9F%A5%E8%AF%A2%E5%A4%84%E7%90%86%E5%92%8C%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/image-20220812185648530.png" alt="image-20220812185648530"></p><p>我们主要计算一个连接算法的磁盘搜索次数和磁盘读取次数。</p><p>磁盘搜索次数就是磁盘的磁头需要移动到正确位置的次数，磁盘读取次数就是磁盘块传输到内存中的次数。</p><ol><li><p><strong>nested-loop join(嵌套-循环连接)</strong></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC12%E7%AB%A0%20%E6%9F%A5%E8%AF%A2%E5%A4%84%E7%90%86%E5%92%8C%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/image-20220813140859372.png" alt="image-20220813140859372"></p></li><li><p><strong>block nested-loop join(块嵌套-循环连接)</strong></p><p>因缓冲区太小而内存中不能完全容纳任何一个关系时，如果我们以基于每个块的方式而不是每个元组的方式来处理关系，那么仍然可以省却不少块的访问。</p><p>内层关系的每个块与外层关系的每个块形成一对。在每个块对的内部，一个块中的每个元组与另一个块中的每个元组形成一对，以生成全体元组对。和前面一样，满足连接条件的所有元组对被添加到结果中。</p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC12%E7%AB%A0%20%E6%9F%A5%E8%AF%A2%E5%A4%84%E7%90%86%E5%92%8C%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/image-20220813142834613.png" alt="image-20220813142834613"></p><p>嵌套-循环和块嵌套-循环的性能可以进一步地改进：</p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC12%E7%AB%A0%20%E6%9F%A5%E8%AF%A2%E5%A4%84%E7%90%86%E5%92%8C%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/image-20220813143405884.png" alt="image-20220813143405884"></p></li><li><p><strong>index nested-loop join(索引嵌套-循环连接)</strong></p><p>​在嵌套-循环连接中，若在内层循环地连接属性上有<strong>索引</strong>可用，则可以用索引查找来代替文件扫描。<strong>对于外层关系r中地每一个元组$t_r$，可以利用索引来查找s中将与元组$t_r$满足连接条件的元组。</strong></p><p>​如果在等值比较连接中，内层循环的关系中在连接属性上有索引，那么相当于对于每一个外层的元组，对内层进行一次索引搜索。</p><p>​这样总共的磁盘访问次数是：$b_r+n_r\times c_r$，$c_r$是<strong>对内层进行索引搜索的平均磁盘访问次数</strong>，磁盘搜索次数也是$b_r+n_r\times c_r$，$c_s$是<strong>对内层进行索引搜索的平均磁盘搜索次数</strong>。其实它们是一样的，<strong>因为这里的每一次磁盘访问都需要磁盘搜索，所以它们的次数一致。</strong></p><p>​时间代价是：$b_r(t_s+t_r)+n_r\times c$</p><p>​还是上面student和takes的例子，使用索引嵌套循环链接，磁盘访问次数是：$100+5000\times 5&#x3D;25100$，这里的5是假设的，磁盘搜索次数也是25100，<strong>块传输次数减少，但磁盘搜索次数变多了许多，磁盘搜索比磁盘读取更加耗时，所以这种直接使用索引的算法大部分情况下还不如之前。</strong></p></li><li><p><strong>merge-join(归并连接)</strong></p><p>归并排序连接算法的前提是，两个表各自按照连接属性进行<strong>排序</strong>。它的思想就是利用<strong>两个表针对连接属性的有序性</strong>，将两个表中具有相同连接属性的元组找出来，然后<strong>只</strong>针对这些元组进行拼接。该算法中，使用<code>JoinAttrs</code>代表两个表的连接属性。</p><p>大部分情况下，数据库系统不会为了使用归并排序连接而对两个连接表手动进行排序，但当两个表（或其中一个）已经排好序了，那么有可能使用归并排序连接。</p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC12%E7%AB%A0%20%E6%9F%A5%E8%AF%A2%E5%A4%84%E7%90%86%E5%92%8C%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/image-20220813150352745.png" alt="image-20220813150352745"></p><p>效率估算时，我们假设两个表已经按照连接属性排序。</p><p>磁盘访问次数：$b_r+b_s$<br>磁盘搜索次数：不考虑缓冲也是$b_r+b_s$，考虑缓冲之后，假设为每个关系分配$b_b$个缓冲块，那么磁盘搜索次数就是$\left \lceil b_r&#x2F;b_b \right \rceil +\left \lceil b_s&#x2F;b_b \right \rceil$</p><h3 id="效率估算"><a href="#效率估算" class="headerlink" title="效率估算"></a><strong>效率估算</strong></h3><p>还是student和takes的例子，磁盘访问次数100+400&#x3D;500，最坏条件下$b_b$&#x3D;1，磁盘搜索次数100+400&#x3D;500</p><h3 id="未排序情况"><a href="#未排序情况" class="headerlink" title="未排序情况"></a><strong>未排序情况</strong></h3><p>结合上面外部归并排序算法的例子，可以估算出当参与连接的关系未排序时，需要<strong>主动排序</strong>再进行归并连接时的算法效率。</p></li><li><p><strong>Hash-join(散列连接)</strong></p></li></ol><h2 id="4-其他运算-other-operations"><a href="#4-其他运算-other-operations" class="headerlink" title="4.其他运算(other operations)"></a>4.其他运算(other operations)</h2><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC12%E7%AB%A0%20%E6%9F%A5%E8%AF%A2%E5%A4%84%E7%90%86%E5%92%8C%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/image-20220818151245127.png" alt="image-20220818151245127"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC12%E7%AB%A0%20%E6%9F%A5%E8%AF%A2%E5%A4%84%E7%90%86%E5%92%8C%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/image-20220818151339259.png" alt="image-20220818151339259"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC12%E7%AB%A0%20%E6%9F%A5%E8%AF%A2%E5%A4%84%E7%90%86%E5%92%8C%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/image-20220818151438678.png" alt="image-20220818151438678"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC12%E7%AB%A0%20%E6%9F%A5%E8%AF%A2%E5%A4%84%E7%90%86%E5%92%8C%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/image-20220818151514309.png" alt="image-20220818151514309"></p><p>磁盘IO一直是制约查询处理速度提高的瓶颈。通常，IO代价被认为是估计查询处理代价的合理度量</p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC12%E7%AB%A0%20%E6%9F%A5%E8%AF%A2%E5%A4%84%E7%90%86%E5%92%8C%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/image-20220818151702361.png" alt="image-20220818151702361"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC12%E7%AB%A0%20%E6%9F%A5%E8%AF%A2%E5%A4%84%E7%90%86%E5%92%8C%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/image-20220818151955047.png" alt="image-20220818151955047"></p>]]></content>
    
    
    <categories>
      
      <category>数据库系统概念</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>数据库系统概念</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据库系统概念 第6章 形式化关系查询语言 题目</title>
    <link href="/2022/08/08/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC6%E7%AB%A0%20%E5%BD%A2%E5%BC%8F%E5%8C%96%E5%85%B3%E7%B3%BB%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80%20%E9%A2%98%E7%9B%AE/"/>
    <url>/2022/08/08/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC6%E7%AB%A0%20%E5%BD%A2%E5%BC%8F%E5%8C%96%E5%85%B3%E7%B3%BB%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80%20%E9%A2%98%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h1><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC6%E7%AB%A0%20%E5%BD%A2%E5%BC%8F%E5%8C%96%E5%85%B3%E7%B3%BB%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80%20%E9%A2%98%E7%9B%AE/image-20220807182708062.png" alt="image-20220807182708062"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC6%E7%AB%A0%20%E5%BD%A2%E5%BC%8F%E5%8C%96%E5%85%B3%E7%B3%BB%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80%20%E9%A2%98%E7%9B%AE/image-20220807182743646.png" alt="image-20220807182743646"></p><h1 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h1><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC6%E7%AB%A0%20%E5%BD%A2%E5%BC%8F%E5%8C%96%E5%85%B3%E7%B3%BB%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80%20%E9%A2%98%E7%9B%AE/image-20220807183204308.png" alt="image-20220807183204308"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC6%E7%AB%A0%20%E5%BD%A2%E5%BC%8F%E5%8C%96%E5%85%B3%E7%B3%BB%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80%20%E9%A2%98%E7%9B%AE/image-20220807183223103.png" alt="image-20220807183223103"></p><h1 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h1><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC6%E7%AB%A0%20%E5%BD%A2%E5%BC%8F%E5%8C%96%E5%85%B3%E7%B3%BB%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80%20%E9%A2%98%E7%9B%AE/image-20220808204526442.png" alt="image-20220808204526442"></p><h1 id="4"><a href="#4" class="headerlink" title="4."></a>4.</h1><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC6%E7%AB%A0%20%E5%BD%A2%E5%BC%8F%E5%8C%96%E5%85%B3%E7%B3%BB%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80%20%E9%A2%98%E7%9B%AE/image-20220809175637864.png" alt="image-20220809175637864"></p><p>除法运算：</p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC6%E7%AB%A0%20%E5%BD%A2%E5%BC%8F%E5%8C%96%E5%85%B3%E7%B3%BB%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80%20%E9%A2%98%E7%9B%AE/image-20220809180543659.png" alt="image-20220809180543659"></p><h1 id="5"><a href="#5" class="headerlink" title="5."></a>5.</h1><p>除运算：</p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC6%E7%AB%A0%20%E5%BD%A2%E5%BC%8F%E5%8C%96%E5%85%B3%E7%B3%BB%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80%20%E9%A2%98%E7%9B%AE/image-20220809181522373.png" alt="image-20220809181522373"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC6%E7%AB%A0%20%E5%BD%A2%E5%BC%8F%E5%8C%96%E5%85%B3%E7%B3%BB%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80%20%E9%A2%98%E7%9B%AE/image-20220809182352360.png" alt="image-20220809182352360"></p><p>自然连接：将两张表属性名相同的，值相等的连接成一个元组</p><h1 id="6"><a href="#6" class="headerlink" title="6."></a>6.</h1><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC6%E7%AB%A0%20%E5%BD%A2%E5%BC%8F%E5%8C%96%E5%85%B3%E7%B3%BB%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80%20%E9%A2%98%E7%9B%AE/image-20220809183026693.png" alt="image-20220809183026693"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC6%E7%AB%A0%20%E5%BD%A2%E5%BC%8F%E5%8C%96%E5%85%B3%E7%B3%BB%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80%20%E9%A2%98%E7%9B%AE/image-20220809183227196.png" alt="image-20220809183227196"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC6%E7%AB%A0%20%E5%BD%A2%E5%BC%8F%E5%8C%96%E5%85%B3%E7%B3%BB%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80%20%E9%A2%98%E7%9B%AE/image-20220809183459183.png" alt="image-20220809183459183"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC6%E7%AB%A0%20%E5%BD%A2%E5%BC%8F%E5%8C%96%E5%85%B3%E7%B3%BB%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80%20%E9%A2%98%E7%9B%AE/image-20220809183906094.png" alt="image-20220809183906094"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC6%E7%AB%A0%20%E5%BD%A2%E5%BC%8F%E5%8C%96%E5%85%B3%E7%B3%BB%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80%20%E9%A2%98%E7%9B%AE/image-20220809214140834.png" alt="image-20220809214140834"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC6%E7%AB%A0%20%E5%BD%A2%E5%BC%8F%E5%8C%96%E5%85%B3%E7%B3%BB%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80%20%E9%A2%98%E7%9B%AE/image-20220809214332753.png" alt="image-20220809214332753"></p><h1 id="7"><a href="#7" class="headerlink" title="7."></a>7.</h1><p> <img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC6%E7%AB%A0%20%E5%BD%A2%E5%BC%8F%E5%8C%96%E5%85%B3%E7%B3%BB%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80%20%E9%A2%98%E7%9B%AE/image-20220809221613328.png" alt="image-20220809221613328"></p><h1 id="8"><a href="#8" class="headerlink" title="8."></a>8.</h1><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC6%E7%AB%A0%20%E5%BD%A2%E5%BC%8F%E5%8C%96%E5%85%B3%E7%B3%BB%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80%20%E9%A2%98%E7%9B%AE/image-20220809222546569.png" alt="image-20220809222546569"></p><h1 id="9"><a href="#9" class="headerlink" title="9."></a>9.</h1><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC6%E7%AB%A0%20%E5%BD%A2%E5%BC%8F%E5%8C%96%E5%85%B3%E7%B3%BB%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80%20%E9%A2%98%E7%9B%AE/image-20220809223643079.png" alt="image-20220809223643079"></p><h1 id="10"><a href="#10" class="headerlink" title="10."></a>10.</h1><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC6%E7%AB%A0%20%E5%BD%A2%E5%BC%8F%E5%8C%96%E5%85%B3%E7%B3%BB%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80%20%E9%A2%98%E7%9B%AE/image-20220809225600648.png" alt="image-20220809225600648"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC6%E7%AB%A0%20%E5%BD%A2%E5%BC%8F%E5%8C%96%E5%85%B3%E7%B3%BB%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80%20%E9%A2%98%E7%9B%AE/image-20220809234400347.png" alt="image-20220809234400347"></p><h1 id="11"><a href="#11" class="headerlink" title="11."></a>11.</h1><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC6%E7%AB%A0%20%E5%BD%A2%E5%BC%8F%E5%8C%96%E5%85%B3%E7%B3%BB%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80%20%E9%A2%98%E7%9B%AE/image-20220809235610210.png" alt="image-20220809235610210"></p><h1 id="12"><a href="#12" class="headerlink" title="12."></a>12.</h1><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC6%E7%AB%A0%20%E5%BD%A2%E5%BC%8F%E5%8C%96%E5%85%B3%E7%B3%BB%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80%20%E9%A2%98%E7%9B%AE/image-20220810000323476.png" alt="image-20220810000323476"></p><h1 id="13"><a href="#13" class="headerlink" title="13."></a>13.</h1><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC6%E7%AB%A0%20%E5%BD%A2%E5%BC%8F%E5%8C%96%E5%85%B3%E7%B3%BB%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80%20%E9%A2%98%E7%9B%AE/image-20220810000345401-16600610264241.png" alt="image-20220810000345401"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC6%E7%AB%A0%20%E5%BD%A2%E5%BC%8F%E5%8C%96%E5%85%B3%E7%B3%BB%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80%20%E9%A2%98%E7%9B%AE/image-20220810000819898.png" alt="image-20220810000819898"></p><h1 id="14"><a href="#14" class="headerlink" title="14."></a>14.</h1><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC6%E7%AB%A0%20%E5%BD%A2%E5%BC%8F%E5%8C%96%E5%85%B3%E7%B3%BB%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80%20%E9%A2%98%E7%9B%AE/image-20220817103801265.png" alt="image-20220817103801265"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC6%E7%AB%A0%20%E5%BD%A2%E5%BC%8F%E5%8C%96%E5%85%B3%E7%B3%BB%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80%20%E9%A2%98%E7%9B%AE/image-20220817104152605.png" alt="image-20220817104152605"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC6%E7%AB%A0%20%E5%BD%A2%E5%BC%8F%E5%8C%96%E5%85%B3%E7%B3%BB%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80%20%E9%A2%98%E7%9B%AE/image-20220817104238346.png" alt="image-20220817104238346"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC6%E7%AB%A0%20%E5%BD%A2%E5%BC%8F%E5%8C%96%E5%85%B3%E7%B3%BB%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80%20%E9%A2%98%E7%9B%AE/image-20220817104742627.png" alt="image-20220817104742627"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC6%E7%AB%A0%20%E5%BD%A2%E5%BC%8F%E5%8C%96%E5%85%B3%E7%B3%BB%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80%20%E9%A2%98%E7%9B%AE/image-20220817105114921.png" alt="image-20220817105114921"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC6%E7%AB%A0%20%E5%BD%A2%E5%BC%8F%E5%8C%96%E5%85%B3%E7%B3%BB%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80%20%E9%A2%98%E7%9B%AE/image-20220817105516879.png" alt="image-20220817105516879"></p><h1 id="15"><a href="#15" class="headerlink" title="15."></a>15.</h1><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC6%E7%AB%A0%20%E5%BD%A2%E5%BC%8F%E5%8C%96%E5%85%B3%E7%B3%BB%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80%20%E9%A2%98%E7%9B%AE/image-20220817105746400.png" alt="image-20220817105746400"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC6%E7%AB%A0%20%E5%BD%A2%E5%BC%8F%E5%8C%96%E5%85%B3%E7%B3%BB%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80%20%E9%A2%98%E7%9B%AE/image-20220817105835543.png" alt="image-20220817105835543"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC6%E7%AB%A0%20%E5%BD%A2%E5%BC%8F%E5%8C%96%E5%85%B3%E7%B3%BB%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80%20%E9%A2%98%E7%9B%AE/image-20220817105918076.png" alt="image-20220817105918076"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC6%E7%AB%A0%20%E5%BD%A2%E5%BC%8F%E5%8C%96%E5%85%B3%E7%B3%BB%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80%20%E9%A2%98%E7%9B%AE/image-20220817110042560.png" alt="image-20220817110042560"></p><h1 id="16"><a href="#16" class="headerlink" title="16."></a>16.</h1><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC6%E7%AB%A0%20%E5%BD%A2%E5%BC%8F%E5%8C%96%E5%85%B3%E7%B3%BB%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80%20%E9%A2%98%E7%9B%AE/image-20220817103801265.png" alt="image-20220817103801265"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC6%E7%AB%A0%20%E5%BD%A2%E5%BC%8F%E5%8C%96%E5%85%B3%E7%B3%BB%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80%20%E9%A2%98%E7%9B%AE/image-20220817112357623.png" alt="image-20220817112357623"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC6%E7%AB%A0%20%E5%BD%A2%E5%BC%8F%E5%8C%96%E5%85%B3%E7%B3%BB%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80%20%E9%A2%98%E7%9B%AE/image-20220817112633782.png" alt="image-20220817112633782"></p><h1 id="17"><a href="#17" class="headerlink" title="17."></a>17.</h1><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC6%E7%AB%A0%20%E5%BD%A2%E5%BC%8F%E5%8C%96%E5%85%B3%E7%B3%BB%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80%20%E9%A2%98%E7%9B%AE/image-20220817113003119.png" alt="image-20220817113003119"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC6%E7%AB%A0%20%E5%BD%A2%E5%BC%8F%E5%8C%96%E5%85%B3%E7%B3%BB%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80%20%E9%A2%98%E7%9B%AE/image-20220817113011749.png" alt="image-20220817113011749"></p><h1 id="18"><a href="#18" class="headerlink" title="18."></a>18.</h1><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC6%E7%AB%A0%20%E5%BD%A2%E5%BC%8F%E5%8C%96%E5%85%B3%E7%B3%BB%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80%20%E9%A2%98%E7%9B%AE/image-20220817113423778.png" alt="image-20220817113423778"></p><h1 id="19"><a href="#19" class="headerlink" title="19."></a>19.</h1><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC6%E7%AB%A0%20%E5%BD%A2%E5%BC%8F%E5%8C%96%E5%85%B3%E7%B3%BB%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80%20%E9%A2%98%E7%9B%AE/image-20220817113839037.png" alt="image-20220817113839037"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC6%E7%AB%A0%20%E5%BD%A2%E5%BC%8F%E5%8C%96%E5%85%B3%E7%B3%BB%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80%20%E9%A2%98%E7%9B%AE/image-20220817114926818.png" alt="image-20220817114926818"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC6%E7%AB%A0%20%E5%BD%A2%E5%BC%8F%E5%8C%96%E5%85%B3%E7%B3%BB%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80%20%E9%A2%98%E7%9B%AE/image-20220817124605725.png" alt="image-20220817124605725"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC6%E7%AB%A0%20%E5%BD%A2%E5%BC%8F%E5%8C%96%E5%85%B3%E7%B3%BB%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80%20%E9%A2%98%E7%9B%AE/image-20220817125511986.png" alt="image-20220817125511986"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC6%E7%AB%A0%20%E5%BD%A2%E5%BC%8F%E5%8C%96%E5%85%B3%E7%B3%BB%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80%20%E9%A2%98%E7%9B%AE/image-20220817125941762.png" alt="image-20220817125941762"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC6%E7%AB%A0%20%E5%BD%A2%E5%BC%8F%E5%8C%96%E5%85%B3%E7%B3%BB%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80%20%E9%A2%98%E7%9B%AE/image-20220817133226852.png" alt="image-20220817133226852"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC6%E7%AB%A0%20%E5%BD%A2%E5%BC%8F%E5%8C%96%E5%85%B3%E7%B3%BB%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80%20%E9%A2%98%E7%9B%AE/image-20220817134352745.png" alt="image-20220817134352745"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC6%E7%AB%A0%20%E5%BD%A2%E5%BC%8F%E5%8C%96%E5%85%B3%E7%B3%BB%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80%20%E9%A2%98%E7%9B%AE/image-20220817134402922.png" alt="image-20220817134402922"></p><h1 id="20"><a href="#20" class="headerlink" title="20."></a>20.</h1><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC6%E7%AB%A0%20%E5%BD%A2%E5%BC%8F%E5%8C%96%E5%85%B3%E7%B3%BB%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80%20%E9%A2%98%E7%9B%AE/image-20220820101204638.png" alt="image-20220820101204638"></p><h1 id="21"><a href="#21" class="headerlink" title="21."></a>21.</h1><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC6%E7%AB%A0%20%E5%BD%A2%E5%BC%8F%E5%8C%96%E5%85%B3%E7%B3%BB%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80%20%E9%A2%98%E7%9B%AE/image-20220820101512916.png" alt="image-20220820101512916"></p><h1 id="22"><a href="#22" class="headerlink" title="22."></a>22.</h1><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC6%E7%AB%A0%20%E5%BD%A2%E5%BC%8F%E5%8C%96%E5%85%B3%E7%B3%BB%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80%20%E9%A2%98%E7%9B%AE/image-20220820101941575.png" alt="image-20220820101941575"></p><h1 id="23"><a href="#23" class="headerlink" title="23."></a>23.</h1><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC6%E7%AB%A0%20%E5%BD%A2%E5%BC%8F%E5%8C%96%E5%85%B3%E7%B3%BB%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80%20%E9%A2%98%E7%9B%AE/image-20220820102351220.png" alt="image-20220820102351220"></p><h1 id="24"><a href="#24" class="headerlink" title="24."></a>24.</h1><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC6%E7%AB%A0%20%E5%BD%A2%E5%BC%8F%E5%8C%96%E5%85%B3%E7%B3%BB%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80%20%E9%A2%98%E7%9B%AE/image-20220820103939347.png" alt="image-20220820103939347"></p><h1 id="25"><a href="#25" class="headerlink" title="25."></a>25.</h1><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC6%E7%AB%A0%20%E5%BD%A2%E5%BC%8F%E5%8C%96%E5%85%B3%E7%B3%BB%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80%20%E9%A2%98%E7%9B%AE/image-20220821123539217.png" alt="image-20220821123539217"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC6%E7%AB%A0%20%E5%BD%A2%E5%BC%8F%E5%8C%96%E5%85%B3%E7%B3%BB%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80%20%E9%A2%98%E7%9B%AE/image-20220821124235752.png" alt="image-20220821124235752"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC6%E7%AB%A0%20%E5%BD%A2%E5%BC%8F%E5%8C%96%E5%85%B3%E7%B3%BB%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80%20%E9%A2%98%E7%9B%AE/image-20220821124943625.png" alt="image-20220821124943625"></p>]]></content>
    
    
    <categories>
      
      <category>数据库系统概念</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>数据库系统概念</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>UML复习题目</title>
    <link href="/2022/08/08/UML%20%E9%A2%98%E7%9B%AE/"/>
    <url>/2022/08/08/UML%20%E9%A2%98%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h1><p><img src="/images/UML%20%E9%A2%98%E7%9B%AE/image-20220807195145970.png" alt="image-20220807195145970"></p><h1 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h1><p><img src="/images/UML%20%E9%A2%98%E7%9B%AE/image-20220807223017212.png" alt="image-20220807223017212"></p><h1 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h1><p><img src="/images/UML%20%E9%A2%98%E7%9B%AE/image-20220807224555736.png" alt="image-20220807224555736"></p><p><img src="/images/UML%20%E9%A2%98%E7%9B%AE/image-20220807235847443.png" alt="image-20220807235847443"></p><h1 id="4"><a href="#4" class="headerlink" title="4."></a>4.</h1><p><img src="/images/UML%20%E9%A2%98%E7%9B%AE/image-20220807225250171.png" alt="image-20220807225250171"></p><h1 id="5"><a href="#5" class="headerlink" title="5."></a>5.</h1><p><img src="/images/UML%20%E9%A2%98%E7%9B%AE/image-20220807230454289.png" alt="image-20220807230454289"></p><h1 id="6-7"><a href="#6-7" class="headerlink" title="6,7."></a>6,7.</h1><p><img src="/images/UML%20%E9%A2%98%E7%9B%AE/image-20220807231911756.png" alt="image-20220807231911756"></p><h1 id="8"><a href="#8" class="headerlink" title="8."></a>8.</h1><p><img src="/images/UML%20%E9%A2%98%E7%9B%AE/image-20220807235435965.png" alt="image-20220807235435965"></p><p><img src="/images/UML%20%E9%A2%98%E7%9B%AE/image-20220807235501901.png" alt="image-20220807235501901"></p><h1 id="9"><a href="#9" class="headerlink" title="9."></a>9.</h1><p><img src="/images/UML%20%E9%A2%98%E7%9B%AE/image-20220808001501508.png" alt="image-20220808001501508"></p><p><img src="/images/UML%20%E9%A2%98%E7%9B%AE/image-20220808001546394.png" alt="image-20220808001546394"></p><h1 id="10"><a href="#10" class="headerlink" title="10."></a>10.</h1><p><img src="/images/UML%20%E9%A2%98%E7%9B%AE/image-20220808001840278.png" alt="image-20220808001840278"></p><h1 id="11"><a href="#11" class="headerlink" title="11."></a>11.</h1><p><img src="/images/UML%20%E9%A2%98%E7%9B%AE/image-20220808001930382.png" alt="image-20220808001930382"></p><p>​用例可能有变体。 在所有有趣的系统中，您会发现用例是其他用例的专用版本、包含在其他用例中的用例以及扩展其他核心用例行为的用例。 您可以通过根据这三种关系来组织一组用例的常见、可重用行为来分解它们。</p><p>​用例执行一些有形的工作。 从给定参与者的角度来看，用例会做一些对参与者有价值的事情，例如计算结果、生成新对象或更改另一个对象的状态。</p><h1 id="12"><a href="#12" class="headerlink" title="12."></a>12.</h1><p><img src="/images/UML%20%E9%A2%98%E7%9B%AE/image-20220808002248163.png" alt="image-20220808002248163"></p><h1 id="13"><a href="#13" class="headerlink" title="13"></a>13</h1><p><img src="/images/UML%20%E9%A2%98%E7%9B%AE/image-20220815214947048.png" alt="image-20220815214947048"></p><h1 id="14"><a href="#14" class="headerlink" title="14."></a>14.</h1><ol><li>接口为类或构件设定一个外部行为特性的规范，对类或构件的修改不改变这个行为规范，就可以保证其他与之关联的部分，乃至整个系统能够正常工作</li><li>这样的规范，在UML中被称为接口</li><li>接口为构件指定外部行为特征，从而能够实现软件系统的构件化，即，遵循同一个接口的构件可以相互替换</li><li>接口不同于类和类型，它不描述任何实现（因此不包含任何实现操作的方法）</li><li>接口是一组操作的集合，这组操作用于描述类或构件的一个服务</li><li>接口是连接逻辑模型和设计模型的桥梁</li><li>构件是系统中逻辑的并且可替换的部分，它遵循并提供对一组接口的实现</li></ol><h1 id="15-顺序图和类图之间的关系和区别"><a href="#15-顺序图和类图之间的关系和区别" class="headerlink" title="15.顺序图和类图之间的关系和区别"></a>15.顺序图和类图之间的关系和区别</h1><p>Describe the relationship between Class diagram and Sequence diagram ? </p><h2 id="类图："><a href="#类图：" class="headerlink" title="类图："></a>类图：</h2><ul><li>类图展示了一组<strong>类</strong>，接口，协作以及它们之间的关系</li><li>类图用于对系统静态设计视图建模</li><li>类图通常包含以下内容：<ol><li>类</li><li>接口</li><li>依赖，泛化，关联，实现关系</li></ol></li><li>类图用于对系统的静态设计视图建模，这种视图主要支持<strong>系统的功能需求</strong>，即系统要提供给最终用户的服务。</li></ul><h2 id="顺序图："><a href="#顺序图：" class="headerlink" title="顺序图："></a>顺序图：</h2><ul><li>顺序图是强调消息时间顺序的交互图</li><li>顺序图是用于对系统的动态方面建模</li><li>交互图表现的是一个<strong>交互</strong>，由<strong>一组对象和它们之间的关系</strong>组成，包括它们之间可能<strong>传递的消息</strong></li><li>在多数情况下， 交互图包括对类，接口，构件和节点的具体的或原型化的实例以及它们之间传递的消息进行建模</li><li>交互图可以独立地可视化，详述，构造和文档化一个特定的对象群体的动态方面， 也可以对用况的特定的控制流进行建模。</li></ul><p><strong>Class</strong> diagrams show the main concepts and entities and how they are “conceptually” connected</p><p><strong>Sequence</strong> diagrams show what the classes “do” (what the system needs to do) interacting with each other class</p><p><strong>一个类的行为&#x2F;服务，是通过操作表示的，在交互图中可以看到对象在执行这些操作</strong></p><p><strong>建模时，先在类中定义操作，然后在顺序图中为对象选择操作。</strong></p><h1 id="16-顺序图和用例图之间的关系和区别"><a href="#16-顺序图和用例图之间的关系和区别" class="headerlink" title="16.顺序图和用例图之间的关系和区别"></a>16.顺序图和用例图之间的关系和区别</h1><p>用例是对一组动作序列的描述，系统执行这些动作序列来为参与者提供一个可观察的结果值</p><p>必须仔细考虑每个用例代表的动态行为的内容，使得每个用例都能产生一个有价值的结果</p><p>用例图是表达用例和系统参与者及其之间关系的载体</p><p><strong>顺序图可作为用例描述的载体</strong></p><p><strong>在不同的场景中，可以附加不同的交互图或状态图以精确描述对应的事件流</strong></p><p>用例模型包括：</p><ul><li>参与者</li><li>用例</li><li>用例图</li><li>系统边界</li><li>用例描述</li></ul><h1 id="17-通信图和顺序图之间的区别和联系"><a href="#17-通信图和顺序图之间的区别和联系" class="headerlink" title="17.通信图和顺序图之间的区别和联系"></a>17.通信图和顺序图之间的区别和联系</h1><ul><li>顺序图强调消息的时间顺序</li><li>通信图强调接收和发送消息的对象的组织结构</li><li>它们在语义上是等价的，可以相互转换</li></ul><h1 id="18-顺序图和状态图之间的区别和联系"><a href="#18-顺序图和状态图之间的区别和联系" class="headerlink" title="18.顺序图和状态图之间的区别和联系"></a>18.顺序图和状态图之间的区别和联系</h1><ul><li>状态图考虑的是<strong>单个实体的动态行为</strong></li><li>状态机说明对象在它的生命期中<strong>，响应事件所经历的状态序列以及它们对每个事件的响应</strong>，而状态图显示了一个状态机，它强调从状态到状态的控制流</li><li>顺序图是<strong>对共同工作的对象群体的行为建模</strong></li><li>活动图强调从活动到活动的控制流，有多个业务角色</li><li>状态图是<strong>强调对象潜在的状态和这些状态之间的迁移</strong></li></ul><h1 id="19"><a href="#19" class="headerlink" title="19"></a>19</h1><p><img src="/images/UML%20%E9%A2%98%E7%9B%AE/image-20220829205501755.png" alt="image-20220829205501755"></p><h1 id="20"><a href="#20" class="headerlink" title="20"></a>20</h1><p><img src="/images/UML%20%E9%A2%98%E7%9B%AE/image-20220829205901968.png" alt="image-20220829205901968"></p><p>活动图可以单独对对象群体的动态行为进行可视化，详述，构造和文档化；或者活动图可以被用来对一个操作的控制流建模。<strong>然而交互图强调从对象到对象的控制流，活动图强调从步骤到步骤的控制流。</strong>一个活动是行为的持续的结构化执行。</p><h1 id="21"><a href="#21" class="headerlink" title="21"></a>21</h1><p><img src="/images/UML%20%E9%A2%98%E7%9B%AE/image-20220829211228923.png" alt="image-20220829211228923"></p><h1 id="22"><a href="#22" class="headerlink" title="22"></a>22</h1><p><img src="/images/UML%20%E9%A2%98%E7%9B%AE/image-20220829213239016.png" alt="image-20220829213239016"></p><p><img src="/images/UML%20%E9%A2%98%E7%9B%AE/image-20220830110032695.png" alt="image-20220830110032695">，</p><p>类图：</p><p><img src="/images/UML%20%E9%A2%98%E7%9B%AE/image-20220829234019230.png" alt="image-20220829234019230"></p><p>活动图：</p><p><img src="/images/UML%20%E9%A2%98%E7%9B%AE/image-20220830000651166.png" alt="image-20220830000651166"></p><p><img src="/images/UML%20%E9%A2%98%E7%9B%AE/image-20220830001635055.png" alt="image-20220830001635055"></p><p><img src="/images/UML%20%E9%A2%98%E7%9B%AE/image-20220830002551282.png" alt="image-20220830002551282"></p>]]></content>
    
    
    <categories>
      
      <category>UML</category>
      
    </categories>
    
    
    <tags>
      
      <tag>UML</tag>
      
      <tag>题目</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据库系统概念 第11章 索引</title>
    <link href="/2022/08/05/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC11%E7%AB%A0%20%E7%B4%A2%E5%BC%95/"/>
    <url>/2022/08/05/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC11%E7%AB%A0%20%E7%B4%A2%E5%BC%95/</url>
    
    <content type="html"><![CDATA[<h1 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1.基本概念"></a>1.基本概念</h1><ol><li><p>我们为什么需要索引？</p><p>索引机制用来加速对数据的访问</p></li><li><p>search key(搜索码)</p><p>用于在文件中查找记录的属性或属性集</p></li><li><p>一个索引文件包含如下形式的record(index entries  索引项    index record索引记录)</p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC11%E7%AB%A0%20%E7%B4%A2%E5%BC%95/image-20220805010808999.png" alt="image-20220805010808999"></p></li><li><p>索引文件要比原文件小很多</p></li><li><p>两种基本类型的索引：</p><ul><li>顺序索引（ordered indices）search key(index entries)按照排好的顺序存储search key的值，并将每个搜索码与包含该搜索码的记录关联起来</li><li>散列索引（hash indices）search keys(index entries) are distributed uniformly(均匀) across “buckets” using a “hash function”</li></ul></li><li><p>索引的评价因素</p><ul><li>访问类型(access type)：能有效支持的访问类型</li><li>访问时间(access time)</li><li>插入时间(insertion time)</li><li>删除时间(deletion time)</li><li>空间开销(space overhead)</li><li>时间效率和空间效率是衡量索引的最主要的指标，也是数据库系统组织和管理技术的关注和焦点之一</li></ul></li><li><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC11%E7%AB%A0%20%E7%B4%A2%E5%BC%95/image-20220807161111502.png" alt="image-20220807161111502"></p></li></ol><h1 id="2-顺序索引"><a href="#2-顺序索引" class="headerlink" title="2.顺序索引"></a>2.顺序索引</h1><ol><li><p>在顺序索引(ordered index)中,<strong>index entries</strong> are stored by sorting on the <strong>search key</strong> value</p></li><li><p>sequential ordered file（顺序排序文件）:the records in the file are ordered by a <strong>search key</strong></p></li><li><p><strong>聚集索引</strong>(clustering index)是这样一种索引：其搜索码还定义了文件的次序，聚集索引也称为主索引(primary index)；主索引这个术语可能看起来表示建立在主码上的索引，但实际上这种索引可以建立在任何搜索码上。索引顺序与物理存储顺序相同</p></li><li><p>搜索码指定的次序与文件的排列次序不同的索引被称为**非聚集索引(nonclustering index)或辅助索引(secondary index)**。索引顺序与物理存储顺序不同</p></li><li><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC11%E7%AB%A0%20%E7%B4%A2%E5%BC%95/image-20220807160911899.png" alt="image-20220807160911899"></p></li><li><p>我们假定所有文件都按照某种搜索码顺序存储，这种在搜索码上有聚集索引的文件称作<strong>索引顺序文件</strong>。</p></li><li><p>索引项(index entry)或索引记录(index record)由一个搜索码值和指针组成。这些指针指向具有该搜索码值的一条或多条记录。我们可以使用的顺序索引有以下两类：</p><ul><li><p>稠密索引(dense index) :在稠密索引中，对于文件中的每个搜索码值都有一个索引项</p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC11%E7%AB%A0%20%E7%B4%A2%E5%BC%95/image-20220806235531487.png" alt="image-20220806235531487"></p></li><li><p>稀疏索引(sparse index) :在稀疏索引中，只为某些搜索码值建立索引项。只有当关系按照搜索码排列次序存储时才能使用稀疏索引，即只有索引是聚集索引时才可以使用稀疏索引</p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC11%E7%AB%A0%20%E7%B4%A2%E5%BC%95/image-20220807000106484.png" alt="image-20220807000106484"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC11%E7%AB%A0%20%E7%B4%A2%E5%BC%95/image-20220807001413181.png" alt="image-20220807001413181"></p><ul><li><p>优点</p><p>使用更少的空间，当插入和删除时维护开销更少；</p><p>当修改文件数据时，对应index改的次数会较少；</p><p>磁盘访问都是以block为单位进行的，当通过index找到这个block中，将其调入内存，还是有比较高的搜索效率。</p></li><li><p>缺点</p><p><strong>查找速率比较慢</strong>，还得在block中挨个查找，相对于dense index来说，速率相对较慢</p></li><li><p>一个block中通常包含多个数据记录，每块中最小的搜索键值放到索引项中</p></li></ul></li></ul></li><li><p>多级索引(multilevel index)</p><p>当原索引文件太大以至于不能放入内存中时，访问代价变高</p><p>为了减少磁盘访问index records的次数，像对待其他任何顺序文件那样对待索引，并且在原始的索引上构造一个稀疏的外层索引，现在我们把原始索引称为内层索引</p><ul><li>out index:原始索引上的稀疏索引</li><li>inner index:原始索引</li></ul><p>可以根据需要多次重复此过程，具有两级或两级以上的索引称为<strong>多级索引</strong>，任何层级的索引都应该随着文件数据的插入和删除而变化</p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC11%E7%AB%A0%20%E7%B4%A2%E5%BC%95/image-20220807002355212.png" alt="image-20220807002355212"></p><p>多级索引技术可应用于聚集索引和非聚集索引</p></li><li><p>index update</p><ul><li><p>deletion</p><ol><li><p>dense index</p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC11%E7%AB%A0%20%E7%B4%A2%E5%BC%95/image-20220807003007715.png" alt="image-20220807003007715"></p></li><li><p>sparse index</p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC11%E7%AB%A0%20%E7%B4%A2%E5%BC%95/image-20220807003113600.png" alt="image-20220807003113600"></p></li></ol></li><li><p>insertion</p><ol><li><p>dense index</p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC11%E7%AB%A0%20%E7%B4%A2%E5%BC%95/image-20220807003240168.png" alt="image-20220807003240168"></p></li><li><p>sparse index</p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC11%E7%AB%A0%20%E7%B4%A2%E5%BC%95/image-20220807003428428.png" alt="image-20220807003428428"></p></li></ol></li></ul></li></ol><h1 id="3-B-树索引文件"><a href="#3-B-树索引文件" class="headerlink" title="3.B+树索引文件"></a>3.B+树索引文件</h1><p>索引顺序文件组织(indexed-sequential files)主要的缺点在于，随着文件的增大，索引查找的性能和数据顺序扫描的性能都会下降。</p><p>而B+树索引结构是使用最广泛的，在数据插入和删除的情况下仍能保持其执行效率的几种索引结构之一</p><ol><li><p>B+树的定义</p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC11%E7%AB%A0%20%E7%B4%A2%E5%BC%95/image-20220807005053978.png" alt="image-20220807005053978"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC11%E7%AB%A0%20%E7%B4%A2%E5%BC%95/image-20220807005340365.png" alt="image-20220807005340365"></p><p>注意：在B+树中，非叶节点的search key存在与叶节点中的重复（也有的不重复）。即一个search key允许在B+树中出现一次或多次；</p><p>B+树不会有很多层级，因此搜索可以高效进行；</p><p>数据的插入和删除可以被高效地执行，因为索引可以在对数时间内被重组。</p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC11%E7%AB%A0%20%E7%B4%A2%E5%BC%95/image-20220807005637571.png" alt="image-20220807005637571"></p></li><li><p>B+树的查询</p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC11%E7%AB%A0%20%E7%B4%A2%E5%BC%95/image-20220807152801708.png" alt="image-20220807152801708"></p></li><li><p>B+树的删除</p></li><li><p>B+树的插入</p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC11%E7%AB%A0%20%E7%B4%A2%E5%BC%95/image-20220807155110524.png" alt="image-20220807155110524"></p><p>a.</p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC11%E7%AB%A0%20%E7%B4%A2%E5%BC%95/image-20220807155059268.png" alt="image-20220807155059268"></p><p>b.<img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC11%E7%AB%A0%20%E7%B4%A2%E5%BC%95/image-20220807155219500.png" alt="image-20220807155219500"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC11%E7%AB%A0%20%E7%B4%A2%E5%BC%95/image-20220807155311872.png" alt="image-20220807155311872"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC11%E7%AB%A0%20%E7%B4%A2%E5%BC%95/image-20220807155332590.png" alt="image-20220807155332590"></p><p>c. insert 8</p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC11%E7%AB%A0%20%E7%B4%A2%E5%BC%95/image-20220807160531151.png" alt="image-20220807160531151"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC11%E7%AB%A0%20%E7%B4%A2%E5%BC%95/image-20220807160713746.png" alt="image-20220807160713746"></p></li></ol><h1 id="4-SQL中索引的定义"><a href="#4-SQL中索引的定义" class="headerlink" title="4.SQL中索引的定义"></a>4.SQL中索引的定义</h1><ol><li><p>尽管SQL标准并没有指定用于创建索引的任何特定语法，但大多数数据库都支持创建和删除索引的SQL命令，可以用以下语法创建索引，大多数数据库都支持这种语法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> index <span class="hljs-operator">&lt;</span>index<span class="hljs-operator">-</span>name<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">on</span> <span class="hljs-operator">&lt;</span>relation<span class="hljs-operator">-</span>name<span class="hljs-operator">&gt;</span>(<span class="hljs-operator">&lt;</span>arrtibute<span class="hljs-operator">-</span>name<span class="hljs-operator">&gt;</span>)<br></code></pre></td></tr></table></figure><p>如要在instructor关系上定义一个名为dept_index的索引，并将dept_name作为搜索码，我们写作：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> index dept_name <span class="hljs-keyword">on</span> instructor(dept_name)<br></code></pre></td></tr></table></figure><p>要声明一个属性或属性列表是候选码，我们可以使用语法<strong>create unique index</strong>代替上面的<strong>create index</strong></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>数据库系统概念</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>数据库系统概念</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据库系统概念 第10章 存储 题目</title>
    <link href="/2022/08/05/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC10%E7%AB%A0%20%E5%AD%98%E5%82%A8%20%E9%A2%98%E7%9B%AE/"/>
    <url>/2022/08/05/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC10%E7%AB%A0%20%E5%AD%98%E5%82%A8%20%E9%A2%98%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="10-4"><a href="#10-4" class="headerlink" title="10.4"></a>10.4</h1><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC10%E7%AB%A0%20%E5%AD%98%E5%82%A8%20%E9%A2%98%E7%9B%AE/image-20220805002041366.png" alt="image-20220805002041366"></p><h1 id="10-9"><a href="#10-9" class="headerlink" title="10.9"></a>10.9</h1><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC10%E7%AB%A0%20%E5%AD%98%E5%82%A8%20%E9%A2%98%E7%9B%AE/image-20220805004019611.png" alt="image-20220805004019611"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC10%E7%AB%A0%20%E5%AD%98%E5%82%A8%20%E9%A2%98%E7%9B%AE/image-20220805004139083.png" alt="image-20220805004139083"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC10%E7%AB%A0%20%E5%AD%98%E5%82%A8%20%E9%A2%98%E7%9B%AE/image-20220805004253012.png" alt="image-20220805004253012"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC10%E7%AB%A0%20%E5%AD%98%E5%82%A8%20%E9%A2%98%E7%9B%AE/image-20220805004232694.png" alt="image-20220805004232694"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC10%E7%AB%A0%20%E5%AD%98%E5%82%A8%20%E9%A2%98%E7%9B%AE/image-20220805004638082.png" alt="image-20220805004638082"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC10%E7%AB%A0%20%E5%AD%98%E5%82%A8%20%E9%A2%98%E7%9B%AE/image-20220805004716747.png" alt="image-20220805004716747"></p><h1 id="10-17"><a href="#10-17" class="headerlink" title="10.17"></a>10.17</h1><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC10%E7%AB%A0%20%E5%AD%98%E5%82%A8%20%E9%A2%98%E7%9B%AE/image-20220805004805746.png" alt="image-20220805004805746"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC10%E7%AB%A0%20%E5%AD%98%E5%82%A8%20%E9%A2%98%E7%9B%AE/image-20220805004840997.png" alt="image-20220805004840997"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC10%E7%AB%A0%20%E5%AD%98%E5%82%A8%20%E9%A2%98%E7%9B%AE/image-20220805004938462.png" alt="image-20220805004938462"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC10%E7%AB%A0%20%E5%AD%98%E5%82%A8%20%E9%A2%98%E7%9B%AE/image-20220805005335064.png" alt="image-20220805005335064"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC10%E7%AB%A0%20%E5%AD%98%E5%82%A8%20%E9%A2%98%E7%9B%AE/image-20220805005412111.png" alt="image-20220805005412111"></p>]]></content>
    
    
    <categories>
      
      <category>数据库系统概念</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>数据库系统概念</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据库系统概念 第10章 存储</title>
    <link href="/2022/08/05/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC10%E7%AB%A0%20%E5%AD%98%E5%82%A8/"/>
    <url>/2022/08/05/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC10%E7%AB%A0%20%E5%AD%98%E5%82%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><ol><li><p>数据库管理系统的结构通常分为两部分：</p><ul><li>查询处理器（Query processor）</li><li>存储管理器（Storage manager）<ol><li>文件管理(File manager)</li><li>缓冲管理(Buffer manager)</li><li>事务管理(Transaction manager)</li><li>权限和完整性管理(Authorization and integrity manager)</li></ol></li></ul></li><li><p>执行查询语句的过程：</p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC10%E7%AB%A0%20%E5%AD%98%E5%82%A8/image-20220803140411964.png" alt="image-20220803140411964"></p></li><li><p>存储管理器</p><ul><li>提供了<strong>存储在数据库（文件系统）的底层数据</strong>和<strong>应用程序以及提交给系统的查询语句</strong>之间的<u>接口</u></li><li>其职责是为了保证高效的存储，检索以及更新存储在数据库中的数据</li><li><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC10%E7%AB%A0%20%E5%AD%98%E5%82%A8/image-20220803141351469.png" alt="image-20220803141351469"></li></ul></li></ol><h1 id="Overview-of-Physical-Storage-Media"><a href="#Overview-of-Physical-Storage-Media" class="headerlink" title="Overview of Physical Storage Media"></a>Overview of Physical Storage Media</h1><ol><li><h2 id="物理存储介质的分类"><a href="#物理存储介质的分类" class="headerlink" title="物理存储介质的分类"></a>物理存储介质的分类</h2><ul><li>数据库的物理层级：文件存储（.mdf .ldf .ora .dbf)</li><li>存储介质可以按照以下标准进行分类：<ol><li>Speed</li><li>Cost</li><li>Reliability</li></ol></li><li>按可靠性分类：<ol><li>易失性存储器(volatile storage)        内存</li><li>非易失性存储器(non-volatile storage)      硬盘<ul><li>当断电时内容仍存在</li></ul></li></ol></li></ul></li><li><h2 id="物理存储介质-按速度分类"><a href="#物理存储介质-按速度分类" class="headerlink" title="物理存储介质-按速度分类"></a>物理存储介质-按速度分类</h2><ul><li><p>Cache（高速缓冲存储器）最快   最贵   易失性 被计算机系统内部进行管理</p></li><li><p>Main memory（主存）</p></li><li><p>Flash memory（闪存）   U盘   non-volatile</p><p>读和主存一样快，但是写更慢，erase更慢，价格跟主存差不多</p></li><li><p>Magnetic-disk（磁盘）</p><ol><li>Data is stored on spinning disk, and read&#x2F;written magnetically.</li><li>是长时间存储数据的主要媒介，典型的是存储整个数据库</li><li>Data must be moved <u>from disk to main memory</u> <strong>for access</strong>,and written back <strong>for storage</strong>.</li><li>直接访问（direct access）：与磁带不同，可以访问磁盘上任意位置的数据</li></ol></li><li><p>Optical storage（光盘）</p></li><li><p>magnetic tapes（磁带）</p></li></ul><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC10%E7%AB%A0%20%E5%AD%98%E5%82%A8/image-20220803234555112.png" alt="image-20220803234555112"></p></li></ol><h1 id="Magnetic-Disks"><a href="#Magnetic-Disks" class="headerlink" title="Magnetic Disks"></a>Magnetic Disks</h1><ol><li><p>磁盘结构：</p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC10%E7%AB%A0%20%E5%AD%98%E5%82%A8/image-20220803234906053.png" alt="image-20220803234906053"></p><p>The size of a sector is <strong>512</strong> Bytes（4KB in some new HDs）</p></li><li><p>A sector is the smallest unit data that can be read or written</p></li><li><p>Sector size typically 512 bytes</p></li><li><p>磁盘控制器：计算机系统与磁盘硬件驱动的接口</p><ol><li>接受高级程序的指令来读写扇区</li><li>移动磁壁到特定的位置来读写数据</li><li>读取数据后查看数据有无损坏，利用每个扇区数据的checksum（校验和）</li><li>写完数据以后再读一遍进行校验</li></ol><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC10%E7%AB%A0%20%E5%AD%98%E5%82%A8/image-20220804000128446.png" alt="image-20220804000128446"></p></li><li><p>磁盘接口标准：</p><ul><li>ATA </li><li>SATA</li><li>SCSI</li><li>SAS</li></ul></li><li><p>访问时间（Access time）&#x3D;寻道时间（Seek time）+旋转延迟时间（rotational latency time）</p><ol><li><ul><li>访问时间是从发出读或写请求到数据开始传输之间的时间</li><li>寻道时间是磁盘璧重定位的时间</li><li>旋转延迟时间是等待被访问的扇区出现在读写头下所花费的时间，在4-11毫秒之间</li><li>平均延迟时间(average latency time)是磁盘旋转一整周时间的一半</li><li>数据传输率（Data-transfer rate）是从磁盘获取数据或者向磁盘存储数据的速率，取决于旋转速率和磁盘接口等，每秒钟100MB是正常的。</li><li>多个磁盘可以共享一个磁盘控制器，因此控制器处理的速率也是很重要的</li><li>平均寻道时间是寻道时间的平均值</li></ul><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC10%E7%AB%A0%20%E5%AD%98%E5%82%A8/image-20220804001043794.png" alt="image-20220804001043794"></p></li></ol></li><li><p>磁盘的平均故障时间</p><p>Mean time to failure（MTTF ）      一般是3-5年</p></li><li><p>block的概念</p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC10%E7%AB%A0%20%E5%AD%98%E5%82%A8/image-20220804235821185.png" alt="image-20220804235821185"></p></li></ol><h1 id="Storage-Access"><a href="#Storage-Access" class="headerlink" title="Storage Access"></a>Storage Access</h1><h1 id="File-organization"><a href="#File-organization" class="headerlink" title="File organization"></a>File organization</h1>]]></content>
    
    
    <categories>
      
      <category>数据库系统概念</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>数据库系统概念</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据库系统概念 第八章 关系数据库设计 题目</title>
    <link href="/2022/08/02/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC%E5%85%AB%E7%AB%A0%20%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%E9%A2%98%E7%9B%AE/"/>
    <url>/2022/08/02/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC%E5%85%AB%E7%AB%A0%20%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%E9%A2%98%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="8-1"><a href="#8-1" class="headerlink" title="8.1"></a>8.1</h1><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC%E5%85%AB%E7%AB%A0%20%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%E9%A2%98%E7%9B%AE/image-20220802185918785.png" alt="image-20220802185918785"></p><h1 id="8-6"><a href="#8-6" class="headerlink" title="8.6"></a>8.6</h1><p>在r(A,B,C,D,E)中满足如下函数依赖，列出所有的candidate key</p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC%E5%85%AB%E7%AB%A0%20%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%E9%A2%98%E7%9B%AE/image-20220802190330632.png" alt="image-20220802190330632"></p><h1 id="8-19"><a href="#8-19" class="headerlink" title="8.19"></a>8.19</h1><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC%E5%85%AB%E7%AB%A0%20%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%E9%A2%98%E7%9B%AE/image-20220802191321045.png" alt="image-20220802191321045"></p><h1 id="8-20"><a href="#8-20" class="headerlink" title="8.20"></a>8.20</h1><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC%E5%85%AB%E7%AB%A0%20%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%E9%A2%98%E7%9B%AE/image-20220802192500264.png" alt="image-20220802192500264"></p><h1 id="8-28"><a href="#8-28" class="headerlink" title="8.28"></a>8.28</h1><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC%E5%85%AB%E7%AB%A0%20%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%E9%A2%98%E7%9B%AE/image-20220802193218266.png" alt="image-20220802193218266"></p>]]></content>
    
    
    <categories>
      
      <category>数据库系统概念</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>数据库系统概念</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据库系统概念 第八章 关系数据库设计 第二部分</title>
    <link href="/2022/07/21/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC%E5%85%AB%E7%AB%A0%20%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%20%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86/"/>
    <url>/2022/07/21/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC%E5%85%AB%E7%AB%A0%20%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%20%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86/</url>
    
    <content type="html"><![CDATA[<h1 id="5-分解"><a href="#5-分解" class="headerlink" title="5.分解"></a>5.分解</h1><ol><li><h2 id="规范化的目标"><a href="#规范化的目标" class="headerlink" title="规范化的目标"></a>规范化的目标</h2><ol><li>分解是一个无损连接的分解</li><li>依赖保持（dependency preservation）</li><li>每一个分解后的关系Ri满足BCNF或3NF范式</li></ol></li><li><h2 id="分解应有的特性"><a href="#分解应有的特性" class="headerlink" title="分解应有的特性"></a>分解应有的特性</h2><ol><li><p>R中所有的属性应该在R1，R2中拥有</p></li><li><p>无损连接：</p><ul><li><p>$r&#x3D;\prod_{R_1}(r)\bowtie \prod_{R_2}(r)$</p></li><li><p>判断标准：如果R分解成R1，R2是一个无损分解，那么至少有如下一个函数依赖在闭包$F^+$中:</p><ol><li>{$R_1 \cap R_2$} $\rightarrow  R_1$</li><li>{$R_1 \cap R_2$} $\rightarrow  R_2$</li></ol><p>即，分解后两个子模式的共同属性必须是R1或R2的码（适用于一分为二的分解）</p></li></ul></li><li><p><u>依赖保持：</u></p><p>如何判断函数依赖保持？</p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC%E5%85%AB%E7%AB%A0%20%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%20%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86/image-20220720132633377.png" alt="image-20220720132633377"></p><p><u>第一个例子：</u></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC%E5%85%AB%E7%AB%A0%20%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%20%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86/image-20220720133040055.png" alt="image-20220720133040055"></p><p><strong>第一种分解方法：</strong></p><p>R1&#x3D;(A,B),R2&#x3D;(B,C)</p><ul><li><p>无损分解的满足：</p><p>$R_1 \cap R_2&#x3D;${B}   ， 又因为$B\rightarrow C$因此$B^+$&#x3D;{BC},而判断无损分解的条件是R1与R2 的∩是R2或R1的码，如何判断某属性是否为超码？是利用了属性集的闭包，若R2中所有属性都在B的闭包中，则说明B是R2 的码，由此可知，B是R2的码，因此满足无损分解。</p></li><li><p>依赖保持的满足：</p><ol><li><p>对于A$\rightarrow$B:   </p><p>result:&#x3D;A</p><p>$(A\cap R_1)^+ \cap R_1$&#x3D;AB</p><p>result:&#x3D;A∪AB&#x3D;AB</p><p>$(A\cap R_2)^+ \cap R_2$&#x3D;$\phi$</p><p>result:&#x3D;AB$\cup \phi$&#x3D;AB</p><p>result&#x3D;AB contains B,then A→B is preserved</p></li><li><p>对于B$\rightarrow$C:</p><p>result:&#x3D;B</p><p>$(B\cap R_1)^+ \cap R_1$&#x3D;AB</p><p>result:&#x3D;B∪AB&#x3D;AB</p><p>$(B\cap R_2)^+ \cap R_2$&#x3D;BC</p><p>result:&#x3D;AB∪BC&#x3D;ABC</p><p>result&#x3D;ABC contains C,then B→C is preserved</p></li></ol></li></ul><p><strong>第二种分解方法：</strong></p><p>R1&#x3D;(A,B)  R2&#x3D;(A,C)</p><ul><li><p>无损分解的满足：</p><p>$R_1 \cap R_2&#x3D;${A}   ， 又因为$A\rightarrow C$因此$A^+$&#x3D;{AC},而判断无损分解的条件是R1与R2 的∩是R2或R1的码，如何判断某属性是否为超码？是利用了属性集的闭包，若R2中所有属性都在A的闭包中，则说明A是R2 的码，由此可知，A是R2的码，因此满足无损分解。</p></li><li><p>依赖保持的满足：</p><ol><li><p>对于A$\rightarrow$B:   </p><p>result:&#x3D;A</p><p>$(A\cap R_1)^+ \cap R_1$&#x3D;AB</p><p>result:&#x3D;A∪AB&#x3D;AB</p><p>$(A\cap R_2)^+ \cap R_2$&#x3D;A</p><p>result:&#x3D;AB$\cup A$&#x3D;AB</p><p>result&#x3D;AB contains B,then A→B is preserved</p></li><li><p>对于B$\rightarrow$C:</p><p>result:&#x3D;B</p><p>$(B\cap R_1)^+ \cap R_1$&#x3D;B</p><p>result:&#x3D;B∪B&#x3D;B</p><p>$(B\cap R_2)^+ \cap R_2$&#x3D;$\phi$</p><p>result:&#x3D;B∪$\phi$&#x3D;B</p><p><u>result&#x3D;B not contains C,then B→C is  not preserved</u></p></li></ol></li></ul><p><u>第二个例子</u></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC%E5%85%AB%E7%AB%A0%20%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%20%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86/image-20220720135122577.png" alt="image-20220720135122577"></p></li></ol></li></ol><h1 id="6-Boyce-Codd-Normal-form"><a href="#6-Boyce-Codd-Normal-form" class="headerlink" title="6.Boyce-Codd Normal form"></a>6.Boyce-Codd Normal form</h1><ol><li><p><strong>定义：</strong></p><p>关于函数依赖集F的关系模式R属于BCNF的条件是，对于$F^+$中所有形如$\alpha \rightarrow \beta$的函数依赖，其中($\alpha \subseteq R且\beta \subseteq R$)，下面至少有一项成立：</p><ul><li><p>$\alpha \rightarrow \beta$是平凡的函数依赖（即$\beta \subseteq \alpha$）</p></li><li><p>$\alpha是模式R的一个超码$</p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC%E5%85%AB%E7%AB%A0%20%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%20%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86/image-20220720135930488.png" alt="image-20220720135930488"></p><p>注意：对于任何有两个属性的关系模式一定满足BCNF。</p></li></ul></li><li><p><strong>验证BCNF：</strong></p><ul><li>为了验证一个非平凡的函数依赖$\alpha \rightarrow \beta$是否违反BCNF：<ol><li>计算属性$\alpha$的闭包</li><li>看它是否包含R的所有属性，若包含，则$\alpha$是R的一个superkey</li></ol></li><li>简单的test：为了验证R是否满足BCNF，只需要证明F中的函数依赖不违背BCNF而不是$F^+$中的，因为如果F中没有违反BCNF的FD，则$F^+$也不会</li><li>但是，可以在F下判别R是否违反BCNF，但必须在$F^+$下判别R的<u>分解式</u>是否违反BCNF。</li></ul></li><li><p><strong>BCNF分解算法：</strong></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC%E5%85%AB%E7%AB%A0%20%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%20%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86/image-20220721002627846.png" alt="image-20220721002627846"></p><p>一个例子：</p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC%E5%85%AB%E7%AB%A0%20%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%20%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86/image-20220721010409674.png" alt="image-20220721010409674"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC%E5%85%AB%E7%AB%A0%20%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%20%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86/image-20220721010525142.png" alt="image-20220721010525142"></p></li><li><p><strong>BCNF和依赖保持：</strong></p><p>得到的BCNF分解不一定满足依赖保持</p><p>一个例子：</p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC%E5%85%AB%E7%AB%A0%20%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%20%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86/image-20220721011153034.png" alt="image-20220721011153034"></p><p>因此，我们并不总是能够满足所有的三个设计目标</p><ol><li>无损连接</li><li>BCNF</li><li>依赖保持</li></ol></li></ol><h1 id="7-第三范式"><a href="#7-第三范式" class="headerlink" title="7.第三范式"></a>7.第三范式</h1><ol><li><p>总有一些情况使得</p><ul><li>BCNF分解不能满足依赖保持</li><li>但是这是重要的</li><li>解决办法：定义一个更弱的范式，叫做第三范式，<ul><li>它允许一些冗余</li><li>但是可以满足依赖保持</li><li>总是有一个满足3NF的无损连接，依赖保持的分解</li></ul></li></ul></li><li><p>第三范式的定义：</p><p>关系模式R是关于函数依赖集F的第三范式的条件是，对于$F^+$中所有形如$\alpha \rightarrow \beta$的函数依赖，以下至少有一项成立：</p><ul><li><p>$\alpha \rightarrow \beta$是平凡的函数依赖</p></li><li><p>$\alpha$是R的一个超码（要求$\alpha$的闭包）</p></li><li><p>$\beta-\alpha$中的每个属性A都<strong>被包含于</strong>R的一个候选码中（即，$A ∈\beta-\alpha$是主属性，若$\alpha \cap\beta&#x3D;\phi$，则A&#x3D;$\beta$是主属性）</p><p>注意第三个条件不是说单个候选码必须包含$\beta-\alpha$中的所有属性；$\beta-\alpha$中的每个属性A可能被包含于不同的候选码中</p></li></ul><p>如：<img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC%E5%85%AB%E7%AB%A0%20%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%20%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86/image-20220723105234393.png" alt="image-20220723105234393"></p><p>L→K,使得R不满足BCNF，但是K被包含在一个candidate key中，因此满足3NF。</p></li><li><p>BCNF和3NF的比较：</p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC%E5%85%AB%E7%AB%A0%20%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%20%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86/image-20220723105633931.png" alt="image-20220723105633931"></p><ul><li><p>3NF的不足之处在于数据冗余</p><p>（the relationship l1,k1)</p></li><li><p>可能需要使用null</p><p>(当表达L和K的关系时，相应的J没有对应的值)</p></li></ul></li><li><p>3NF分解算法</p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC%E5%85%AB%E7%AB%A0%20%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%20%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86/image-20220723110702119.png" alt="image-20220723110702119"></p><p>一个例子：</p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC%E5%85%AB%E7%AB%A0%20%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%20%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86/image-20220802102906187.png" alt="image-20220802102906187"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC%E5%85%AB%E7%AB%A0%20%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%20%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86/image-20220802103249791.png" alt="image-20220802103249791"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC%E5%85%AB%E7%AB%A0%20%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%20%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86/image-20220802103353682.png" alt="image-20220802103353682"></p></li><li><p>例子</p><ol><li><p>Armstrong axiom</p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC%E5%85%AB%E7%AB%A0%20%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%20%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86/image-20220802103750213.png" alt="image-20220802103750213"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC%E5%85%AB%E7%AB%A0%20%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%20%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86/image-20220802104254425.png" alt="image-20220802104254425"></p></li><li><p>BCNF</p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC%E5%85%AB%E7%AB%A0%20%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%20%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86/image-20220802104320384.png" alt="image-20220802104320384"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC%E5%85%AB%E7%AB%A0%20%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%20%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86/image-20220802104710370.png" alt="image-20220802104710370"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC%E5%85%AB%E7%AB%A0%20%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%20%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86/image-20220802105842153.png" alt="image-20220802105842153"></p><p>(分解以后要看函数依赖的闭包！)</p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC%E5%85%AB%E7%AB%A0%20%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%20%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86/image-20220802105909972.png" alt="image-20220802105909972"></p></li><li><p>3NF&amp;BCNF</p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC%E5%85%AB%E7%AB%A0%20%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%20%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86/image-20220802110555144.png" alt="image-20220802110555144"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC%E5%85%AB%E7%AB%A0%20%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%20%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86/image-20220802112029369.png" alt="image-20220802112029369"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC%E5%85%AB%E7%AB%A0%20%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%20%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86/image-20220802112041996.png" alt="image-20220802112041996"></p></li><li><p>3NF&amp;BCNF</p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC%E5%85%AB%E7%AB%A0%20%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%20%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86/image-20220802115756283.png" alt="image-20220802115756283"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC%E5%85%AB%E7%AB%A0%20%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%20%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86/image-20220802141030320.png" alt="image-20220802141030320"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC%E5%85%AB%E7%AB%A0%20%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%20%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86/image-20220802143637556.png" alt="image-20220802143637556"></p></li></ol></li></ol><h1 id="8-多值依赖和第四范式"><a href="#8-多值依赖和第四范式" class="headerlink" title="8.多值依赖和第四范式"></a>8.多值依赖和第四范式</h1><ol><li><h2 id="什么是多值依赖？"><a href="#什么是多值依赖？" class="headerlink" title="什么是多值依赖？"></a>什么是多值依赖？</h2><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC%E5%85%AB%E7%AB%A0%20%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%20%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86/image-20220802180156797.png" alt="image-20220802180156797"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC%E5%85%AB%E7%AB%A0%20%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%20%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86/image-20220802180834991.png" alt="image-20220802180834991"></p><p>因此，可以将classes进行拆分以减少数据冗余：</p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC%E5%85%AB%E7%AB%A0%20%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%20%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86/image-20220802180947452.png" alt="image-20220802180947452"></p><p>$if\ \  \alpha\ \rightarrow \ \beta，then\  \alpha \ \rightarrow \rightarrow \beta$</p></li><li><p>第四范式</p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC%E5%85%AB%E7%AB%A0%20%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%20%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86/image-20220802182403665.png" alt="image-20220802182403665"></p><p>4NF&gt;BCNF&gt;3NF</p><p>4NF的一个例子：</p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC%E5%85%AB%E7%AB%A0%20%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%20%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86/image-20220802184519721.png" alt="image-20220802184519721"></p><p>由于4NF我实在理解不了，所以先不管了。</p><p>这些箭头和字母在支离破碎我的灵魂……</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>数据库系统概念</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>数据库系统概念</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据库系统概念 第八章 关系数据库设计 第一部分</title>
    <link href="/2022/07/16/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC%E5%85%AB%E7%AB%A0%20%20%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1/"/>
    <url>/2022/07/16/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC%E5%85%AB%E7%AB%A0%20%20%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="数据库系统概念-第八章-关系数据库设计-第一部分"><a href="#数据库系统概念-第八章-关系数据库设计-第一部分" class="headerlink" title="数据库系统概念  第八章 关系数据库设计  第一部分"></a>数据库系统概念  第八章 关系数据库设计  第一部分</h1><h2 id="1-第一范式"><a href="#1-第一范式" class="headerlink" title="1.第一范式"></a>1.第一范式</h2><ol><li><p>1NF是指数据库表的每一列都是不可分割的基本数据项，同一列中不能有多个值，即实体中的某个属性不能有多个值或不能有重复的属性。（Domain is atomic if its elements are considered to be indivisible units)</p></li><li><p>non-atomic domains examples:</p><ul><li>复合属性-a set of names(<strong>复合</strong>属性：可以再划分为更小的部分，也就是能再划分为一些其他属性的属性。比如说：name属性可被设计为一个包括first_name,middle_name,lase_name的复合属性。)</li><li>多值属性-a person’s phones(<strong>多值</strong>属性：在某些情况下对某个特定实体而言，一个属性可能对应一组值。)</li><li>复杂数据类型-面向对象</li></ul></li><li><p>当一个关系模式R的<strong>所有属性的定义域</strong>(domains of all attributes)都是原子的时，R满足第一范式</p></li><li><p>对于关系数据库，所有的关系都应该满足第一范式。</p></li><li><p><strong>1NF (First Normal Form) Rules</strong></p><ul><li>Each table cell should contain a <u>single value</u>.</li><li><u>Each record</u> needs to be unique.</li></ul><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC%E5%85%AB%E7%AB%A0%20%20%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1/image-20220716163425857.png" alt="image-20220716163425857"></p></li><li><p>那么，怎么处理非原子的属性值呢？—&gt;</p><ul><li>对于复合属性：将其拆成多个属性</li><li>对于多值属性：<ol><li>拆成多个对应的column</li><li>使用一张单独的表来存（phone（pname，phone））</li><li>使用单个field，person(pname,…,<strong>phones</strong>,…)(当成一个字符串)</li></ol></li></ul><p>非原子策略的缺点：复杂的存储方式，数据的冗余存储，复杂的查询过程</p></li></ol><h2 id="2-关系数据库设计中的隐患（pitfalls）"><a href="#2-关系数据库设计中的隐患（pitfalls）" class="headerlink" title="2.关系数据库设计中的隐患（pitfalls）"></a>2.关系数据库设计中的隐患（pitfalls）</h2><ol><li><p>坏的设计会导致：</p><ul><li>数据冗余</li><li>插入，删除，修改异常</li></ul><p>如：假设我们将instructor   department两张表结合成inst_dept表：</p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC%E5%85%AB%E7%AB%A0%20%20%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1/image-20220716164704202.png" alt="image-20220716164704202"></p><p>如图，后果是数据冗余，并且当我们想增加一张department表时，要是没有对应的某个老师，也就不能增加了</p><ul><li><p><strong>冗余</strong></p><p>坏处：造成空间浪费和不一致性</p></li><li><p><strong>更新异常</strong></p><p>复杂的更新可能导致不一致性，比如修改dept_name属性的值，许多元组将会被改变</p></li><li><p><strong>插入或删除异常</strong></p><p>为了存储那些department信息不存在的instructor，可以使用null属性值，但是很难进行处理。</p></li></ul></li></ol><h2 id="3-分解"><a href="#3-分解" class="headerlink" title="3.分解"></a>3.分解</h2><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC%E5%85%AB%E7%AB%A0%20%20%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1/image-20220716170812600.png" alt="image-20220716170812600"></p><p>关系R中所有属性都应出现在分解R1，R2中: $R&#x3D;R_1\cup R_2$</p><p>无损连接分解：$r&#x3D;\prod_{R_1}(r)\bowtie \prod_{R_2}(r)$</p><h4 id="进行分解所要达到的目标："><a href="#进行分解所要达到的目标：" class="headerlink" title="进行分解所要达到的目标："></a>进行分解所要达到的目标：</h4><ol><li>每一个子表中没有数据冗余</li><li>每一个子关系都有良好的范式</li><li>分解是无损分解</li></ol><p>范式理论的依据在于：</p><ul><li>函数依赖</li><li>多值依赖</li></ul><h2 id="4-函数依赖"><a href="#4-函数依赖" class="headerlink" title="4.函数依赖"></a>4.函数依赖</h2><ol><li><p>R是一个关系模式，$\alpha$, $\beta$是R的属性集，并满足$\alpha \subseteq\R \ and \ \beta \subseteq R$  ,  则函数依赖</p><p>$\alpha \rightarrow \beta$   在R上成立当且仅当对于任意合法的关系r(R),当r的两个元组t1，t2在属性$\alpha$上取值相等时，他们在属性$\beta$上取值也相等。即：<br>$$<br>t1[\alpha]&#x3D;t2[\alpha]\Longrightarrow t1[\beta]&#x3D;r2[\beta]<br>$$<br>即，$\beta$函数依赖于$\alpha$函数，而$\alpha 函数决定\beta$</p></li><li><p>函数依赖事实上是一种**<u>完整性约束</u><strong>，</strong><u>描述了关系在特定属性上的值之间的关系</u>**，可以用来judge schema normalization and suggest refinements</p></li><li><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC%E5%85%AB%E7%AB%A0%20%20%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1/image-20220716174237281.png" alt="image-20220716174237281"></p></li><li><p>函数依赖是一种key概念的泛化</p><ul><li>K是关系R的superkey（超码）当且仅当K$\rightarrow$R</li><li>K是关系R的candidate key(minimal super key)，当且仅当K$\rightarrow$R and no $\alpha \subset K,\alpha \rightarrow R$</li></ul></li><li><p>函数依赖允许我们在不适用super key的时候表达一致性约束：</p><p>如,inst_dept(<u>ID</u>,name,salary,<u>dept_name</u>,building,budget)</p><p>我们希望以下这些函数依赖成立：dept_name-&gt;building,ID-&gt;building,但是并不希望dept_name-&gt;salary成立</p></li><li><h4 id="函数依赖的用处："><a href="#函数依赖的用处：" class="headerlink" title="函数依赖的用处："></a>函数依赖的用处：</h4><ul><li><p>测试关系在一个函数依赖集F下是否合法，如果合法，则说r满足F</p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC%E5%85%AB%E7%AB%A0%20%20%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1/image-20220716175734964.png" alt="image-20220716175734964"></p></li><li><p>我们说当在R上的所有合法关系$r_s$满足依赖集F的话，就说R满足F，但是反之不成立</p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC%E5%85%AB%E7%AB%A0%20%20%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1/image-20220716214444490.png" alt="image-20220716214444490"></p><p>不可能通过找到所有的r（因为这太繁琐了），验证其是否满足F来判断R是否满足F，因此需要有一套推理规则来判断R是否满足F</p></li><li><p>注意：一个关系模式R是一个**<u>属性集</u>**，但是并非所有的属性集都是模式，使用符号r(R)来表示是对于关系r而言的，它指的是具有模式R的关系r，当我们写r(R)时，指的既是关系也是它的模式。</p></li><li><h4 id="平凡和非平凡依赖的定义：-trivial-and-non-trivial-dependency"><a href="#平凡和非平凡依赖的定义：-trivial-and-non-trivial-dependency" class="headerlink" title="平凡和非平凡依赖的定义：(trivial and non-trivial dependency)"></a>平凡和非平凡依赖的定义：(trivial and non-trivial dependency)</h4><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC%E5%85%AB%E7%AB%A0%20%20%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1/image-20220716215150661.png" alt="image-20220716215150661"></p></li></ul></li><li><h4 id="函数依赖集的闭包-closure-of-a-set-of-functional-dependencies"><a href="#函数依赖集的闭包-closure-of-a-set-of-functional-dependencies" class="headerlink" title="函数依赖集的闭包:(closure of a set of functional dependencies)"></a>函数依赖集的闭包:(closure of a set of functional dependencies)</h4><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC%E5%85%AB%E7%AB%A0%20%20%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1/image-20220716215350994-16579796318671.png" alt="image-20220716215350994"></p></li><li><h4 id="Armstrong’s-Axioms"><a href="#Armstrong’s-Axioms" class="headerlink" title="Armstrong’s Axioms:"></a>Armstrong’s Axioms:</h4><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC%E5%85%AB%E7%AB%A0%20%20%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1/image-20220716215441849-16579796828023.png" alt="image-20220716215441849"></p><p>这些规则是保真的和完备的。</p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC%E5%85%AB%E7%AB%A0%20%20%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1/image-20220716220206500.png" alt="image-20220716220206500"></p><p>尽大可能地利用传递律，**<u>伪传递律</u>**，合并律</p></li><li><p>Armstrong定理的补充定律：</p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC%E5%85%AB%E7%AB%A0%20%20%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1/image-20220716220442735.png" alt="image-20220716220442735"></p></li><li><p>计算闭包$F^+$闭包的过程：</p><p>不断地应用Armstrong公理</p></li><li><h4 id="属性集的闭包-Closure-of-Attribute-Sets"><a href="#属性集的闭包-Closure-of-Attribute-Sets" class="headerlink" title="属性集的闭包(Closure of Attribute Sets)"></a>属性集的闭包(Closure of Attribute Sets)</h4><p><strong><u>如何判断$ \alpha$是superkey呢？</u></strong></p><p>一种办法是：首先找到闭包$ F^+$,然后对于$ F^+$中所有的函数依赖$ \alpha \rightarrow \beta_i$，看是否{$ \beta_1\ \beta_2…$}&#x3D;R，但是找到闭包并不容易</p><p>另一种判断的方法是利用属性集的闭包。</p><p>定义:给定一个属性集$ \alpha$，在F下由$\alpha$所直接或间接决定的属性的集合称为属性集的闭包$\alpha^+$。</p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC%E5%85%AB%E7%AB%A0%20%20%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1/image-20220716222136183.png" alt="image-20220716222136183"></p><p>即，$\beta \subseteq \alpha^+$说明$\beta$是由$\alpha$直接或间接决定的属性，因此$\alpha \rightarrow \beta$</p><p>因此，若**<u>要看$\alpha$是否为超码，需要看R中的所有属性是不是都在属性集的闭包中。</u>**</p><p>找属性集闭包的过程如下图：</p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC%E5%85%AB%E7%AB%A0%20%20%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1/image-20220716222644598.png" alt="image-20220716222644598"></p><p>例子：</p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC%E5%85%AB%E7%AB%A0%20%20%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1/image-20220716222949149.png" alt="image-20220716222949149"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC%E5%85%AB%E7%AB%A0%20%20%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1/image-20220716223205021.png" alt="image-20220716223205021"></p></li><li><p>属性集闭包的作用：</p><ol><li><p>判断是否为superkey</p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC%E5%85%AB%E7%AB%A0%20%20%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1/image-20220716223442489.png" alt="image-20220716223442489"></p></li><li><p>验证函数依赖是否成立</p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC%E5%85%AB%E7%AB%A0%20%20%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1/image-20220716223455237.png" alt="image-20220716223455237"></p></li><li><p>计算F的闭包</p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC%E5%85%AB%E7%AB%A0%20%20%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1/image-20220716223510025.png" alt="image-20220716223510025"></p></li></ol></li><li><p>正则覆盖(Canonical Cover）</p><p>F的正则覆盖（$F_c$）是闭包与F的闭包相等的最小的函数依赖（FD)集合</p><ul><li><p>没有多余的函数依赖并且没有多余的函数依赖使得$F_c$包含一个多余的属性。</p></li><li><p>左边的属性是唯一的（尽可能使用合并律）</p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC%E5%85%AB%E7%AB%A0%20%20%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1/image-20220716230502550.png" alt="image-20220716230502550"></p></li><li><p>如何获得$F_c$?  &#x3D;&#x3D;&gt;删除多余属性</p><ol><li><p>删除能够通过其他函数依赖推导得到的函数依赖</p></li><li><p>当函数依赖的箭头**<u>左侧</u>**有多余属性时（F蕴涵$F_c$)</p><p>举例：</p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC%E5%85%AB%E7%AB%A0%20%20%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1/image-20220716231844582.png" alt="image-20220716231844582"></p><p>即，如果怀疑箭头左侧的某个属性是多余的，便将这个属性去掉，形成$F_c$,然后看从F能否推出</p><p><strong><u>左侧剩下的属性</u></strong>–&gt;<strong><u>右侧的属性</u></strong>,若能推出，则说明这个属性确实是多余的。</p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC%E5%85%AB%E7%AB%A0%20%20%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1/image-20220716233622092.png" alt="image-20220716233622092"></p></li><li><p>当函数依赖的箭头**<u>右侧</u>**有多余属性时($F_c$蕴涵F)     </p><p>举例：</p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC%E5%85%AB%E7%AB%A0%20%20%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1/image-20220716233420556.png" alt="image-20220716233420556"></p><p>即，如果怀疑箭头右侧的某个属性是多余的，便将这个属性去掉，形成$F_c$,然后看从$F_c$能否推出**<u>左侧的属性–&gt;右侧将要删除的属性</u>**,若能推出，则说明这个属性确实是多余的。</p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC%E5%85%AB%E7%AB%A0%20%20%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1/image-20220716233632142.png" alt="image-20220716233632142"></p></li></ol></li><li><p>计算正则覆盖的过程：</p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC%E5%85%AB%E7%AB%A0%20%20%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1/image-20220716232310323.png" alt="image-20220716232310323"></p></li><li><p>计算正则覆盖的一个例子</p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E7%AC%AC%E5%85%AB%E7%AB%A0%20%20%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1/image-20220716233831322.png" alt="image-20220716233831322"></p></li></ul><p>​</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>数据库系统概念</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>数据库系统概念</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据库系统概念期末最后题目</title>
    <link href="/2022/06/23/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E6%9C%9F%E6%9C%AB%E6%9C%80%E5%90%8E%E9%A2%98%E7%9B%AE/"/>
    <url>/2022/06/23/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E6%9C%9F%E6%9C%AB%E6%9C%80%E5%90%8E%E9%A2%98%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="Part1"><a href="#Part1" class="headerlink" title="Part1"></a>Part1</h1><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E6%9C%9F%E6%9C%AB%E6%9C%80%E5%90%8E%E9%A2%98%E7%9B%AE/image-20220828195430478.png" alt="image-20220828195430478"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E6%9C%9F%E6%9C%AB%E6%9C%80%E5%90%8E%E9%A2%98%E7%9B%AE/image-20220828134952877.png" alt="image-20220828134952877"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E6%9C%9F%E6%9C%AB%E6%9C%80%E5%90%8E%E9%A2%98%E7%9B%AE/image-20220828135648858.png" alt="image-20220828135648858"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E6%9C%9F%E6%9C%AB%E6%9C%80%E5%90%8E%E9%A2%98%E7%9B%AE/image-20220828140440977.png" alt="image-20220828140440977"></p><h1 id="2-Part2"><a href="#2-Part2" class="headerlink" title="2.Part2"></a>2.Part2</h1><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E6%9C%9F%E6%9C%AB%E6%9C%80%E5%90%8E%E9%A2%98%E7%9B%AE/image-20220828195535128.png" alt="image-20220828195535128"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E6%9C%9F%E6%9C%AB%E6%9C%80%E5%90%8E%E9%A2%98%E7%9B%AE/image-20220828195630041.png" alt="image-20220828195630041"></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E6%9C%9F%E6%9C%AB%E6%9C%80%E5%90%8E%E9%A2%98%E7%9B%AE/image-20220828124450248.png" alt="image-20220828124450248"></p><h1 id="Part3"><a href="#Part3" class="headerlink" title="Part3"></a>Part3</h1><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E6%9C%9F%E6%9C%AB%E6%9C%80%E5%90%8E%E9%A2%98%E7%9B%AE/image-20220828144809948.png" alt="image-20220828144809948"></p><h1 id="Part4"><a href="#Part4" class="headerlink" title="Part4"></a>Part4</h1><h2 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h2><p>a.  √</p><p>b.  √     非唯一性搜索码</p><h2 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h2><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E6%9C%9F%E6%9C%AB%E6%9C%80%E5%90%8E%E9%A2%98%E7%9B%AE/image-20220828131822272.png" alt="image-20220828131822272"></p><h1 id="Part5"><a href="#Part5" class="headerlink" title="Part5"></a>Part5</h1><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E6%9C%9F%E6%9C%AB%E6%9C%80%E5%90%8E%E9%A2%98%E7%9B%AE/image-20220828162718150.png" alt="image-20220828162718150"></p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>题目</tag>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
